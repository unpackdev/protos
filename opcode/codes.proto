syntax = "proto3";
package txpull.v1.opcode;
option go_package = "github.com/txpull/protos/dist/go/opcode;opcode_pb";

// OpCode represents the set of operation codes (opcodes) used in the Ethereum Virtual Machine (EVM).
// These opcodes are fundamental instructions that the EVM executes.
enum OpCode {
    // STOP halts execution.
    STOP = 0x0;

    // ADD performs addition operation.
    ADD = 0x1;

    // MUL performs multiplication operation.
    MUL = 0x2;

    // SUB performs subtraction operation.
    SUB = 0x3;

    // DIV performs division operation.
    DIV = 0x4;

    // SDIV performs signed division operation.
    SDIV = 0x5;

    // MOD returns the remainder after division.
    MOD = 0x6;

    // SMOD returns the remainder after signed division.
    SMOD = 0x7;

    // ADDMOD performs the modulo addition of two numbers.
    ADDMOD = 0x8;

    // MULMOD performs the modulo multiplication of two numbers.
    MULMOD = 0x9;

    // EXP performs exponential operation.
    EXP = 0xa;

    // SIGNEXTEND extends the sign bit to the left for a signed number.
    SIGNEXTEND = 0xb;

    // LT performs a less-than comparison.
    LT = 0x10;

    // GT performs a greater-than comparison.
    GT = 0x11;

    // SLT performs a signed less-than comparison.
    SLT = 0x12;

    // SGT performs a signed greater-than comparison.
    SGT = 0x13;

    // EQ checks for equality between two values.
    EQ = 0x14;

    // ISZERO checks if a given value is zero.
    ISZERO = 0x15;

    // AND performs a bitwise AND operation.
    AND = 0x16;

    // OR performs a bitwise OR operation.
    OR = 0x17;

    // XOR performs a bitwise XOR operation.
    XOR = 0x18;

    // NOT performs a bitwise NOT operation.
    NOT = 0x19;

     // BYTE returns the Nth byte of the input data.
    BYTE = 0x1a;

    // SHL and SHR perform bitwise shift left and shift right operations, respectively.
    SHL = 0x1b;
    SHR = 0x1c;
    SAR = 0x1d;

    // KECCAK256 computes the Keccak-256 hash of input data.
    KECCAK256 = 0x20;

    // ADDRESS returns the address of the current account.
    ADDRESS = 0x30;

    // BALANCE returns the balance of the given address.
    BALANCE = 0x31;

    // ORIGIN returns the address of the original sender of the transaction.
    ORIGIN = 0x32;

    // CALLER returns the address of the account that initiated the call.
    CALLER = 0x33;

    // CALLVALUE returns the value passed with the call.
    CALLVALUE = 0x34;

    // CALLDATALOAD loads a word of data from the call data.
    CALLDATALOAD = 0x35;

    // CALLDATASIZE returns the size of the call data.
    CALLDATASIZE = 0x36;

    // CALLDATACOPY copies a portion of the call data to memory.
    CALLDATACOPY = 0x37;

    // CODESIZE returns the size of the contract's code.
    CODESIZE = 0x38;

    // CODECOPY copies a portion of the contract's code to memory.
    CODECOPY = 0x39;

    // GASPRICE returns the gas price of the transaction.
    GASPRICE = 0x3a;

    // EXTCODESIZE returns the size of the code at the given address.
    EXTCODESIZE = 0x3b;

    // EXTCODECOPY copies a portion of the code at the given address to memory.
    EXTCODECOPY = 0x3c;

    // RETURNDATASIZE returns the size of the return data buffer.
    RETURNDATASIZE = 0x3d;

    // RETURNDATACOPY copies a portion of the return data buffer to memory.
    RETURNDATACOPY = 0x3e;

    // EXTCODEHASH returns the hash of the code at the given address.
    EXTCODEHASH = 0x3f;

    // BLOCKHASH returns the hash of a specific block.
    BLOCKHASH = 0x40;

    // COINBASE returns the address of the block's beneficiary.
    COINBASE = 0x41;

    // TIMESTAMP returns the timestamp of the current block.
    TIMESTAMP = 0x42;

    // NUMBER returns the block number of the current block.
    NUMBER = 0x43;

    // DIFFICULTY returns the difficulty of the current block.
    DIFFICULTY = 0x44;

    // GASLIMIT returns the gas limit of the current block.
    GASLIMIT = 0x45;

    // CHAINID returns the chain ID of the current chain.
    CHAINID = 0x46;

    // SELFBALANCE returns the balance of the current contract.
    SELFBALANCE = 0x47;

    // BASEFEE returns the base fee of the current block.
    BASEFEE = 0x48;

    // BLOBHASH returns the hash of the provided data.
    BLOBHASH = 0x49;

    // POP removes the top item from the stack.
    POP = 0x50;

    // MLOAD loads a word from memory.
    MLOAD = 0x51;

    // MSTORE stores a word in memory.
    MSTORE = 0x52;

    // MSTORE8 stores a byte in memory.
    MSTORE8 = 0x53;

    // SLOAD loads a word from storage.
    SLOAD = 0x54;

    // SSTORE stores a word to storage.
    SSTORE = 0x55;

    // JUMP transfers control to a different part of the code.
    JUMP = 0x56;

    // JUMPI conditionally transfers control to a different part of the code.
    JUMPI = 0x57;

    // PC returns the program counter.
    PC = 0x58;

    // MSIZE returns the size of the active memory in bytes.
    MSIZE = 0x59;

    // GAS returns the available gas.
    GAS = 0x5a;

    // JUMPDEST marks a destination for jumps within the code.
    JUMPDEST = 0x5b;

    // PUSH1-PUSH32 place the given number of bytes onto the stack.
    PUSH0 = 0x5f;
    PUSH1 = 0x60;
    PUSH2 = 0x61;
    PUSH3 = 0x62;
    PUSH4 = 0x63;
    PUSH5 = 0x64;
    PUSH6 = 0x65;
    PUSH7 = 0x66;
    PUSH8 = 0x67;
    PUSH9 = 0x68;
    PUSH10 = 0x69;
    PUSH11 = 0x6a;
    PUSH12 = 0x6b;
    PUSH13 = 0x6c;
    PUSH14 = 0x6d;
    PUSH15 = 0x6e;
    PUSH16 = 0x6f;
    PUSH17 = 0x70;
    PUSH18 = 0x71;
    PUSH19 = 0x72;
    PUSH20 = 0x73;
    PUSH21 = 0x74;
    PUSH22 = 0x75;
    PUSH23 = 0x76;
    PUSH24 = 0x77;
    PUSH25 = 0x78;
    PUSH26 = 0x79;
    PUSH27 = 0x7a;
    PUSH28 = 0x7b;
    PUSH29 = 0x7c;
    PUSH30 = 0x7d;
    PUSH31 = 0x7e;
    PUSH32 = 0x7f;

    // DUP1-DUP16 duplicate the Nth item from the stack.
    DUP1 = 0x80;
    DUP2 = 0x81;
    DUP3 = 0x82;
    DUP4 = 0x83;
    DUP5 = 0x84;
    DUP6 = 0x85;
    DUP7 = 0x86;
    DUP8 = 0x87;
    DUP9 = 0x88;
    DUP10 = 0x89;
    DUP11 = 0x8a;
    DUP12 = 0x8b;
    DUP13 = 0x8c;
    DUP14 = 0x8d;
    DUP15 = 0x8e;
    DUP16 = 0x8f;

    // SWAP1-SWAP16 swaps the top stack item with the Nth item.
    SWAP1 = 0x90;
    SWAP2 = 0x91;
    SWAP3 = 0x92;
    SWAP4 = 0x93;
    SWAP5 = 0x94;
    SWAP6 = 0x95;
    SWAP7 = 0x96;
    SWAP8 = 0x97;
    SWAP9 = 0x98;
    SWAP10 = 0x99;
    SWAP11 = 0x9a;
    SWAP12 = 0x9b;
    SWAP13 = 0x9c;
    SWAP14 = 0x9d;
    SWAP15 = 0x9e;
    SWAP16 = 0x9f;

    // LOG0-LOG4 record a log entry.
    LOG0 = 0xa0;
    LOG1 = 0xa1;
    LOG2 = 0xa2;
    LOG3 = 0xa3;
    LOG4 = 0xa4;

    // TLOAD and TSTORE provide access to transaction-specific data.
    TLOAD = 0xb3;
    TSTORE = 0xb4;

    // CREATE creates a new contract.
    CREATE = 0xf0;

    // CALL invokes a message call to another contract.
    CALL = 0xf1;

    // CALLCODE invokes a message call to another contract using the current code's context.
    CALLCODE = 0xf2;

    // RETURN halts execution and returns data from a contract.
    RETURN = 0xf3;

    // DELEGATECALL performs a message call to another contract, preserving the caller's context.
    DELEGATECALL = 0xf4;

    // CREATE2 creates a new contract with a specified salt.
    CREATE2 = 0xf5;

    // STATICCALL performs a static message call to another contract.
    STATICCALL = 0xfa;

    // REVERT stops execution and reverts state changes.
    REVERT = 0xfd;

    // INVALID is an invalid opcode.
    INVALID = 0xfe;

    // SELFDESTRUCT destroys the current contract and sends remaining funds to an address.
    SELFDESTRUCT = 0xff;
}
