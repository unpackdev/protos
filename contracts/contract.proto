syntax = "proto3";
package unpack.v1.contracts;
option go_package = "github.com/unpackdev/protos/dist/go/contracts;contracts_pb";

import "ir/eip.proto";
import "contracts/vulnerability.proto";
import "contracts/constructor.proto";
import "contracts/proxy.proto";
import "sources/source.proto";

// Represents details of a contract.
message Contract {
    string uuid = 1;  // Unique identifier for the contract.
    int64  network_id = 2;  // Network ID associated with the contract.
    string name = 3;  // Name of the contract.
    string address = 4;  // Address of the contract.
    string license = 5;  // License associated with the contract.
    string language = 6;  // Programming language used for the contract.
    string execution_bytecode = 7;  // Execution bytecode of the contract.
    string deployed_bytecode = 8;   // Deployed bytecode of the contract.
    int64  block_number = 9;        // Block number where the contract was deployed.
    string block_hash = 10;         // Hash of the block where the contract was deployed.
    string transaction_hash = 11;   // Transaction hash of the contract deployment.
    bool   verified = 12;           // Indicates if the contract is verified.
    string compiler_version = 13;   // Version of the compiler used.
    string evm_version = 14;        // Version of the EVM used.
    string solgo_version = 15;      // Version of the Solgo, used to decompile contract.
    bool   optimized = 16;          // Indicates if the contract is optimized.
    int32  optimization_runs = 17;  // Number of optimization runs.

    // List of possible contract types associated.
    repeated string possible_contract_types = 18;

    // Total number of contracts discovered in the IR.
    int32 contracts_count = 19;

    // List of Ethereum Improvement Proposals (EIPs) associated with this IR.
    repeated unpack.v1.ir.EIP standards = 20;

    // Metadata URLs associated with the contract.
    repeated string metadata_urls = 21;

    // Implementations associated with the contract.
    repeated unpack.v1.contracts.ProxyImplementation implementations = 22;
    
    // Constructor details of the contract.
    unpack.v1.contracts.Constructor constructor = 23;

    // Indicates if the contract has vulnerabilities.
    bool has_vulnerabilities = 24;

    // Metrics of vulnerabilities associated with the contract.
    repeated unpack.v1.contracts.VulnerabilityMetric vulnerability_metrics = 25;

    // Vulnerabilities associated with the contract.
    repeated unpack.v1.contracts.Vulnerability vulnerabilities = 26;

    // ABI of the contract in raw JSON format.
    string abi = 27;

    unpack.v1.sources.Sources sources = 28;

    bool is_proxy = 29;

    bool self_destructed = 30;

    repeated string processed_states = 31;
    repeated string failed_states = 32;
    bool processed = 33;
    bool partial = 34;
}