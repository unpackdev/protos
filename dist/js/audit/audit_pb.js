// source: audit/audit.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.unpack.v1.audit.AdditionalFields', null, global);
goog.exportSymbol('proto.unpack.v1.audit.Detector', null, global);
goog.exportSymbol('proto.unpack.v1.audit.Element', null, global);
goog.exportSymbol('proto.unpack.v1.audit.Report', null, global);
goog.exportSymbol('proto.unpack.v1.audit.Results', null, global);
goog.exportSymbol('proto.unpack.v1.audit.SourceMapping', null, global);
goog.exportSymbol('proto.unpack.v1.audit.TypeSpecificFields', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.unpack.v1.audit.Report = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.unpack.v1.audit.Report, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.unpack.v1.audit.Report.displayName = 'proto.unpack.v1.audit.Report';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.unpack.v1.audit.Results = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.unpack.v1.audit.Results.repeatedFields_, null);
};
goog.inherits(proto.unpack.v1.audit.Results, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.unpack.v1.audit.Results.displayName = 'proto.unpack.v1.audit.Results';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.unpack.v1.audit.Detector = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.unpack.v1.audit.Detector.repeatedFields_, null);
};
goog.inherits(proto.unpack.v1.audit.Detector, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.unpack.v1.audit.Detector.displayName = 'proto.unpack.v1.audit.Detector';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.unpack.v1.audit.Element = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.unpack.v1.audit.Element, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.unpack.v1.audit.Element.displayName = 'proto.unpack.v1.audit.Element';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.unpack.v1.audit.SourceMapping = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.unpack.v1.audit.SourceMapping.repeatedFields_, null);
};
goog.inherits(proto.unpack.v1.audit.SourceMapping, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.unpack.v1.audit.SourceMapping.displayName = 'proto.unpack.v1.audit.SourceMapping';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.unpack.v1.audit.TypeSpecificFields = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.unpack.v1.audit.TypeSpecificFields.repeatedFields_, null);
};
goog.inherits(proto.unpack.v1.audit.TypeSpecificFields, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.unpack.v1.audit.TypeSpecificFields.displayName = 'proto.unpack.v1.audit.TypeSpecificFields';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.unpack.v1.audit.AdditionalFields = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.unpack.v1.audit.AdditionalFields, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.unpack.v1.audit.AdditionalFields.displayName = 'proto.unpack.v1.audit.AdditionalFields';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.unpack.v1.audit.Report.prototype.toObject = function(opt_includeInstance) {
  return proto.unpack.v1.audit.Report.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.unpack.v1.audit.Report} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.unpack.v1.audit.Report.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    error: jspb.Message.getFieldWithDefault(msg, 2, ""),
    results: (f = msg.getResults()) && proto.unpack.v1.audit.Results.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.unpack.v1.audit.Report}
 */
proto.unpack.v1.audit.Report.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.unpack.v1.audit.Report;
  return proto.unpack.v1.audit.Report.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.unpack.v1.audit.Report} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.unpack.v1.audit.Report}
 */
proto.unpack.v1.audit.Report.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    case 3:
      var value = new proto.unpack.v1.audit.Results;
      reader.readMessage(value,proto.unpack.v1.audit.Results.deserializeBinaryFromReader);
      msg.setResults(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.unpack.v1.audit.Report.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.unpack.v1.audit.Report.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.unpack.v1.audit.Report} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.unpack.v1.audit.Report.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getResults();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.unpack.v1.audit.Results.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.unpack.v1.audit.Report.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.unpack.v1.audit.Report} returns this
 */
proto.unpack.v1.audit.Report.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string error = 2;
 * @return {string}
 */
proto.unpack.v1.audit.Report.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.unpack.v1.audit.Report} returns this
 */
proto.unpack.v1.audit.Report.prototype.setError = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Results results = 3;
 * @return {?proto.unpack.v1.audit.Results}
 */
proto.unpack.v1.audit.Report.prototype.getResults = function() {
  return /** @type{?proto.unpack.v1.audit.Results} */ (
    jspb.Message.getWrapperField(this, proto.unpack.v1.audit.Results, 3));
};


/**
 * @param {?proto.unpack.v1.audit.Results|undefined} value
 * @return {!proto.unpack.v1.audit.Report} returns this
*/
proto.unpack.v1.audit.Report.prototype.setResults = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.unpack.v1.audit.Report} returns this
 */
proto.unpack.v1.audit.Report.prototype.clearResults = function() {
  return this.setResults(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.unpack.v1.audit.Report.prototype.hasResults = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.unpack.v1.audit.Results.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.unpack.v1.audit.Results.prototype.toObject = function(opt_includeInstance) {
  return proto.unpack.v1.audit.Results.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.unpack.v1.audit.Results} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.unpack.v1.audit.Results.toObject = function(includeInstance, msg) {
  var f, obj = {
    detectorsList: jspb.Message.toObjectList(msg.getDetectorsList(),
    proto.unpack.v1.audit.Detector.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.unpack.v1.audit.Results}
 */
proto.unpack.v1.audit.Results.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.unpack.v1.audit.Results;
  return proto.unpack.v1.audit.Results.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.unpack.v1.audit.Results} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.unpack.v1.audit.Results}
 */
proto.unpack.v1.audit.Results.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.unpack.v1.audit.Detector;
      reader.readMessage(value,proto.unpack.v1.audit.Detector.deserializeBinaryFromReader);
      msg.addDetectors(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.unpack.v1.audit.Results.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.unpack.v1.audit.Results.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.unpack.v1.audit.Results} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.unpack.v1.audit.Results.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDetectorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.unpack.v1.audit.Detector.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Detector detectors = 1;
 * @return {!Array<!proto.unpack.v1.audit.Detector>}
 */
proto.unpack.v1.audit.Results.prototype.getDetectorsList = function() {
  return /** @type{!Array<!proto.unpack.v1.audit.Detector>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.unpack.v1.audit.Detector, 1));
};


/**
 * @param {!Array<!proto.unpack.v1.audit.Detector>} value
 * @return {!proto.unpack.v1.audit.Results} returns this
*/
proto.unpack.v1.audit.Results.prototype.setDetectorsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.unpack.v1.audit.Detector=} opt_value
 * @param {number=} opt_index
 * @return {!proto.unpack.v1.audit.Detector}
 */
proto.unpack.v1.audit.Results.prototype.addDetectors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.unpack.v1.audit.Detector, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.unpack.v1.audit.Results} returns this
 */
proto.unpack.v1.audit.Results.prototype.clearDetectorsList = function() {
  return this.setDetectorsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.unpack.v1.audit.Detector.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.unpack.v1.audit.Detector.prototype.toObject = function(opt_includeInstance) {
  return proto.unpack.v1.audit.Detector.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.unpack.v1.audit.Detector} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.unpack.v1.audit.Detector.toObject = function(includeInstance, msg) {
  var f, obj = {
    elementsList: jspb.Message.toObjectList(msg.getElementsList(),
    proto.unpack.v1.audit.Element.toObject, includeInstance),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    markdown: jspb.Message.getFieldWithDefault(msg, 3, ""),
    firstMarkdownElement: jspb.Message.getFieldWithDefault(msg, 4, ""),
    id: jspb.Message.getFieldWithDefault(msg, 5, ""),
    check: jspb.Message.getFieldWithDefault(msg, 6, ""),
    impact: jspb.Message.getFieldWithDefault(msg, 7, ""),
    confidence: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.unpack.v1.audit.Detector}
 */
proto.unpack.v1.audit.Detector.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.unpack.v1.audit.Detector;
  return proto.unpack.v1.audit.Detector.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.unpack.v1.audit.Detector} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.unpack.v1.audit.Detector}
 */
proto.unpack.v1.audit.Detector.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.unpack.v1.audit.Element;
      reader.readMessage(value,proto.unpack.v1.audit.Element.deserializeBinaryFromReader);
      msg.addElements(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarkdown(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFirstMarkdownElement(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCheck(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setImpact(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setConfidence(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.unpack.v1.audit.Detector.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.unpack.v1.audit.Detector.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.unpack.v1.audit.Detector} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.unpack.v1.audit.Detector.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getElementsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.unpack.v1.audit.Element.serializeBinaryToWriter
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMarkdown();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFirstMarkdownElement();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCheck();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getImpact();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getConfidence();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * repeated Element elements = 1;
 * @return {!Array<!proto.unpack.v1.audit.Element>}
 */
proto.unpack.v1.audit.Detector.prototype.getElementsList = function() {
  return /** @type{!Array<!proto.unpack.v1.audit.Element>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.unpack.v1.audit.Element, 1));
};


/**
 * @param {!Array<!proto.unpack.v1.audit.Element>} value
 * @return {!proto.unpack.v1.audit.Detector} returns this
*/
proto.unpack.v1.audit.Detector.prototype.setElementsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.unpack.v1.audit.Element=} opt_value
 * @param {number=} opt_index
 * @return {!proto.unpack.v1.audit.Element}
 */
proto.unpack.v1.audit.Detector.prototype.addElements = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.unpack.v1.audit.Element, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.unpack.v1.audit.Detector} returns this
 */
proto.unpack.v1.audit.Detector.prototype.clearElementsList = function() {
  return this.setElementsList([]);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.unpack.v1.audit.Detector.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.unpack.v1.audit.Detector} returns this
 */
proto.unpack.v1.audit.Detector.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string markdown = 3;
 * @return {string}
 */
proto.unpack.v1.audit.Detector.prototype.getMarkdown = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.unpack.v1.audit.Detector} returns this
 */
proto.unpack.v1.audit.Detector.prototype.setMarkdown = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string first_markdown_element = 4;
 * @return {string}
 */
proto.unpack.v1.audit.Detector.prototype.getFirstMarkdownElement = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.unpack.v1.audit.Detector} returns this
 */
proto.unpack.v1.audit.Detector.prototype.setFirstMarkdownElement = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string id = 5;
 * @return {string}
 */
proto.unpack.v1.audit.Detector.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.unpack.v1.audit.Detector} returns this
 */
proto.unpack.v1.audit.Detector.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string check = 6;
 * @return {string}
 */
proto.unpack.v1.audit.Detector.prototype.getCheck = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.unpack.v1.audit.Detector} returns this
 */
proto.unpack.v1.audit.Detector.prototype.setCheck = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string impact = 7;
 * @return {string}
 */
proto.unpack.v1.audit.Detector.prototype.getImpact = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.unpack.v1.audit.Detector} returns this
 */
proto.unpack.v1.audit.Detector.prototype.setImpact = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string confidence = 8;
 * @return {string}
 */
proto.unpack.v1.audit.Detector.prototype.getConfidence = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.unpack.v1.audit.Detector} returns this
 */
proto.unpack.v1.audit.Detector.prototype.setConfidence = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.unpack.v1.audit.Element.prototype.toObject = function(opt_includeInstance) {
  return proto.unpack.v1.audit.Element.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.unpack.v1.audit.Element} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.unpack.v1.audit.Element.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sourceMapping: (f = msg.getSourceMapping()) && proto.unpack.v1.audit.SourceMapping.toObject(includeInstance, f),
    typeSpecificFields: (f = msg.getTypeSpecificFields()) && proto.unpack.v1.audit.TypeSpecificFields.toObject(includeInstance, f),
    signature: jspb.Message.getFieldWithDefault(msg, 5, ""),
    additionalFields: (f = msg.getAdditionalFields()) && proto.unpack.v1.audit.AdditionalFields.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.unpack.v1.audit.Element}
 */
proto.unpack.v1.audit.Element.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.unpack.v1.audit.Element;
  return proto.unpack.v1.audit.Element.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.unpack.v1.audit.Element} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.unpack.v1.audit.Element}
 */
proto.unpack.v1.audit.Element.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = new proto.unpack.v1.audit.SourceMapping;
      reader.readMessage(value,proto.unpack.v1.audit.SourceMapping.deserializeBinaryFromReader);
      msg.setSourceMapping(value);
      break;
    case 4:
      var value = new proto.unpack.v1.audit.TypeSpecificFields;
      reader.readMessage(value,proto.unpack.v1.audit.TypeSpecificFields.deserializeBinaryFromReader);
      msg.setTypeSpecificFields(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignature(value);
      break;
    case 6:
      var value = new proto.unpack.v1.audit.AdditionalFields;
      reader.readMessage(value,proto.unpack.v1.audit.AdditionalFields.deserializeBinaryFromReader);
      msg.setAdditionalFields(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.unpack.v1.audit.Element.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.unpack.v1.audit.Element.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.unpack.v1.audit.Element} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.unpack.v1.audit.Element.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSourceMapping();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.unpack.v1.audit.SourceMapping.serializeBinaryToWriter
    );
  }
  f = message.getTypeSpecificFields();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.unpack.v1.audit.TypeSpecificFields.serializeBinaryToWriter
    );
  }
  f = message.getSignature();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getAdditionalFields();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.unpack.v1.audit.AdditionalFields.serializeBinaryToWriter
    );
  }
};


/**
 * optional string type = 1;
 * @return {string}
 */
proto.unpack.v1.audit.Element.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.unpack.v1.audit.Element} returns this
 */
proto.unpack.v1.audit.Element.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.unpack.v1.audit.Element.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.unpack.v1.audit.Element} returns this
 */
proto.unpack.v1.audit.Element.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional SourceMapping source_mapping = 3;
 * @return {?proto.unpack.v1.audit.SourceMapping}
 */
proto.unpack.v1.audit.Element.prototype.getSourceMapping = function() {
  return /** @type{?proto.unpack.v1.audit.SourceMapping} */ (
    jspb.Message.getWrapperField(this, proto.unpack.v1.audit.SourceMapping, 3));
};


/**
 * @param {?proto.unpack.v1.audit.SourceMapping|undefined} value
 * @return {!proto.unpack.v1.audit.Element} returns this
*/
proto.unpack.v1.audit.Element.prototype.setSourceMapping = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.unpack.v1.audit.Element} returns this
 */
proto.unpack.v1.audit.Element.prototype.clearSourceMapping = function() {
  return this.setSourceMapping(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.unpack.v1.audit.Element.prototype.hasSourceMapping = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TypeSpecificFields type_specific_fields = 4;
 * @return {?proto.unpack.v1.audit.TypeSpecificFields}
 */
proto.unpack.v1.audit.Element.prototype.getTypeSpecificFields = function() {
  return /** @type{?proto.unpack.v1.audit.TypeSpecificFields} */ (
    jspb.Message.getWrapperField(this, proto.unpack.v1.audit.TypeSpecificFields, 4));
};


/**
 * @param {?proto.unpack.v1.audit.TypeSpecificFields|undefined} value
 * @return {!proto.unpack.v1.audit.Element} returns this
*/
proto.unpack.v1.audit.Element.prototype.setTypeSpecificFields = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.unpack.v1.audit.Element} returns this
 */
proto.unpack.v1.audit.Element.prototype.clearTypeSpecificFields = function() {
  return this.setTypeSpecificFields(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.unpack.v1.audit.Element.prototype.hasTypeSpecificFields = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string signature = 5;
 * @return {string}
 */
proto.unpack.v1.audit.Element.prototype.getSignature = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.unpack.v1.audit.Element} returns this
 */
proto.unpack.v1.audit.Element.prototype.setSignature = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional AdditionalFields additional_fields = 6;
 * @return {?proto.unpack.v1.audit.AdditionalFields}
 */
proto.unpack.v1.audit.Element.prototype.getAdditionalFields = function() {
  return /** @type{?proto.unpack.v1.audit.AdditionalFields} */ (
    jspb.Message.getWrapperField(this, proto.unpack.v1.audit.AdditionalFields, 6));
};


/**
 * @param {?proto.unpack.v1.audit.AdditionalFields|undefined} value
 * @return {!proto.unpack.v1.audit.Element} returns this
*/
proto.unpack.v1.audit.Element.prototype.setAdditionalFields = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.unpack.v1.audit.Element} returns this
 */
proto.unpack.v1.audit.Element.prototype.clearAdditionalFields = function() {
  return this.setAdditionalFields(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.unpack.v1.audit.Element.prototype.hasAdditionalFields = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.unpack.v1.audit.SourceMapping.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.unpack.v1.audit.SourceMapping.prototype.toObject = function(opt_includeInstance) {
  return proto.unpack.v1.audit.SourceMapping.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.unpack.v1.audit.SourceMapping} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.unpack.v1.audit.SourceMapping.toObject = function(includeInstance, msg) {
  var f, obj = {
    start: jspb.Message.getFieldWithDefault(msg, 1, 0),
    length: jspb.Message.getFieldWithDefault(msg, 2, 0),
    filenameRelative: jspb.Message.getFieldWithDefault(msg, 3, ""),
    filenameAbsolute: jspb.Message.getFieldWithDefault(msg, 4, ""),
    filenameShort: jspb.Message.getFieldWithDefault(msg, 5, ""),
    isDependency: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    linesList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f,
    startingColumn: jspb.Message.getFieldWithDefault(msg, 8, 0),
    endingColumn: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.unpack.v1.audit.SourceMapping}
 */
proto.unpack.v1.audit.SourceMapping.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.unpack.v1.audit.SourceMapping;
  return proto.unpack.v1.audit.SourceMapping.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.unpack.v1.audit.SourceMapping} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.unpack.v1.audit.SourceMapping}
 */
proto.unpack.v1.audit.SourceMapping.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStart(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLength(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilenameRelative(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilenameAbsolute(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilenameShort(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsDependency(value);
      break;
    case 7:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setLinesList(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStartingColumn(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEndingColumn(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.unpack.v1.audit.SourceMapping.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.unpack.v1.audit.SourceMapping.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.unpack.v1.audit.SourceMapping} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.unpack.v1.audit.SourceMapping.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStart();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getLength();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getFilenameRelative();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFilenameAbsolute();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getFilenameShort();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getIsDependency();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getLinesList();
  if (f.length > 0) {
    writer.writePackedInt32(
      7,
      f
    );
  }
  f = message.getStartingColumn();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getEndingColumn();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
};


/**
 * optional int32 start = 1;
 * @return {number}
 */
proto.unpack.v1.audit.SourceMapping.prototype.getStart = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.unpack.v1.audit.SourceMapping} returns this
 */
proto.unpack.v1.audit.SourceMapping.prototype.setStart = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 length = 2;
 * @return {number}
 */
proto.unpack.v1.audit.SourceMapping.prototype.getLength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.unpack.v1.audit.SourceMapping} returns this
 */
proto.unpack.v1.audit.SourceMapping.prototype.setLength = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string filename_relative = 3;
 * @return {string}
 */
proto.unpack.v1.audit.SourceMapping.prototype.getFilenameRelative = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.unpack.v1.audit.SourceMapping} returns this
 */
proto.unpack.v1.audit.SourceMapping.prototype.setFilenameRelative = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string filename_absolute = 4;
 * @return {string}
 */
proto.unpack.v1.audit.SourceMapping.prototype.getFilenameAbsolute = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.unpack.v1.audit.SourceMapping} returns this
 */
proto.unpack.v1.audit.SourceMapping.prototype.setFilenameAbsolute = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string filename_short = 5;
 * @return {string}
 */
proto.unpack.v1.audit.SourceMapping.prototype.getFilenameShort = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.unpack.v1.audit.SourceMapping} returns this
 */
proto.unpack.v1.audit.SourceMapping.prototype.setFilenameShort = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bool is_dependency = 6;
 * @return {boolean}
 */
proto.unpack.v1.audit.SourceMapping.prototype.getIsDependency = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.unpack.v1.audit.SourceMapping} returns this
 */
proto.unpack.v1.audit.SourceMapping.prototype.setIsDependency = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * repeated int32 lines = 7;
 * @return {!Array<number>}
 */
proto.unpack.v1.audit.SourceMapping.prototype.getLinesList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.unpack.v1.audit.SourceMapping} returns this
 */
proto.unpack.v1.audit.SourceMapping.prototype.setLinesList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.unpack.v1.audit.SourceMapping} returns this
 */
proto.unpack.v1.audit.SourceMapping.prototype.addLines = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.unpack.v1.audit.SourceMapping} returns this
 */
proto.unpack.v1.audit.SourceMapping.prototype.clearLinesList = function() {
  return this.setLinesList([]);
};


/**
 * optional int32 starting_column = 8;
 * @return {number}
 */
proto.unpack.v1.audit.SourceMapping.prototype.getStartingColumn = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.unpack.v1.audit.SourceMapping} returns this
 */
proto.unpack.v1.audit.SourceMapping.prototype.setStartingColumn = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int32 ending_column = 9;
 * @return {number}
 */
proto.unpack.v1.audit.SourceMapping.prototype.getEndingColumn = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.unpack.v1.audit.SourceMapping} returns this
 */
proto.unpack.v1.audit.SourceMapping.prototype.setEndingColumn = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.unpack.v1.audit.TypeSpecificFields.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.unpack.v1.audit.TypeSpecificFields.prototype.toObject = function(opt_includeInstance) {
  return proto.unpack.v1.audit.TypeSpecificFields.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.unpack.v1.audit.TypeSpecificFields} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.unpack.v1.audit.TypeSpecificFields.toObject = function(includeInstance, msg) {
  var f, obj = {
    parent: (f = msg.getParent()) && proto.unpack.v1.audit.Element.toObject(includeInstance, f),
    directiveList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.unpack.v1.audit.TypeSpecificFields}
 */
proto.unpack.v1.audit.TypeSpecificFields.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.unpack.v1.audit.TypeSpecificFields;
  return proto.unpack.v1.audit.TypeSpecificFields.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.unpack.v1.audit.TypeSpecificFields} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.unpack.v1.audit.TypeSpecificFields}
 */
proto.unpack.v1.audit.TypeSpecificFields.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.unpack.v1.audit.Element;
      reader.readMessage(value,proto.unpack.v1.audit.Element.deserializeBinaryFromReader);
      msg.setParent(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addDirective(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.unpack.v1.audit.TypeSpecificFields.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.unpack.v1.audit.TypeSpecificFields.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.unpack.v1.audit.TypeSpecificFields} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.unpack.v1.audit.TypeSpecificFields.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParent();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.unpack.v1.audit.Element.serializeBinaryToWriter
    );
  }
  f = message.getDirectiveList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional Element parent = 1;
 * @return {?proto.unpack.v1.audit.Element}
 */
proto.unpack.v1.audit.TypeSpecificFields.prototype.getParent = function() {
  return /** @type{?proto.unpack.v1.audit.Element} */ (
    jspb.Message.getWrapperField(this, proto.unpack.v1.audit.Element, 1));
};


/**
 * @param {?proto.unpack.v1.audit.Element|undefined} value
 * @return {!proto.unpack.v1.audit.TypeSpecificFields} returns this
*/
proto.unpack.v1.audit.TypeSpecificFields.prototype.setParent = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.unpack.v1.audit.TypeSpecificFields} returns this
 */
proto.unpack.v1.audit.TypeSpecificFields.prototype.clearParent = function() {
  return this.setParent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.unpack.v1.audit.TypeSpecificFields.prototype.hasParent = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated string directive = 2;
 * @return {!Array<string>}
 */
proto.unpack.v1.audit.TypeSpecificFields.prototype.getDirectiveList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.unpack.v1.audit.TypeSpecificFields} returns this
 */
proto.unpack.v1.audit.TypeSpecificFields.prototype.setDirectiveList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.unpack.v1.audit.TypeSpecificFields} returns this
 */
proto.unpack.v1.audit.TypeSpecificFields.prototype.addDirective = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.unpack.v1.audit.TypeSpecificFields} returns this
 */
proto.unpack.v1.audit.TypeSpecificFields.prototype.clearDirectiveList = function() {
  return this.setDirectiveList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.unpack.v1.audit.AdditionalFields.prototype.toObject = function(opt_includeInstance) {
  return proto.unpack.v1.audit.AdditionalFields.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.unpack.v1.audit.AdditionalFields} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.unpack.v1.audit.AdditionalFields.toObject = function(includeInstance, msg) {
  var f, obj = {
    underlyingType: jspb.Message.getFieldWithDefault(msg, 1, ""),
    variableName: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.unpack.v1.audit.AdditionalFields}
 */
proto.unpack.v1.audit.AdditionalFields.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.unpack.v1.audit.AdditionalFields;
  return proto.unpack.v1.audit.AdditionalFields.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.unpack.v1.audit.AdditionalFields} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.unpack.v1.audit.AdditionalFields}
 */
proto.unpack.v1.audit.AdditionalFields.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnderlyingType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVariableName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.unpack.v1.audit.AdditionalFields.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.unpack.v1.audit.AdditionalFields.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.unpack.v1.audit.AdditionalFields} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.unpack.v1.audit.AdditionalFields.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUnderlyingType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVariableName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string underlying_type = 1;
 * @return {string}
 */
proto.unpack.v1.audit.AdditionalFields.prototype.getUnderlyingType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.unpack.v1.audit.AdditionalFields} returns this
 */
proto.unpack.v1.audit.AdditionalFields.prototype.setUnderlyingType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string variable_name = 2;
 * @return {string}
 */
proto.unpack.v1.audit.AdditionalFields.prototype.getVariableName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.unpack.v1.audit.AdditionalFields} returns this
 */
proto.unpack.v1.audit.AdditionalFields.prototype.setVariableName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.unpack.v1.audit);
