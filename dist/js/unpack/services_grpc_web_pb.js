/**
 * @fileoverview gRPC-Web generated client stub for unpack.v1.unpack
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.1
// 	protoc              v3.12.4
// source: unpack/services.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var unpack_types_pb = require('../unpack/types_pb.js')
const proto = {};
proto.unpack = {};
proto.unpack.v1 = {};
proto.unpack.v1.unpack = require('./services_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.unpack.v1.unpack.AuthorizationServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.unpack.v1.unpack.AuthorizationServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.unpack.v1.unpack.ObserverServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.unpack.v1.unpack.ObserverServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.unpack.v1.unpack.NetworkRequest,
 *   !proto.unpack.v1.unpack.NetworkResponse>}
 */
const methodDescriptor_ObserverService_GetNetworks = new grpc.web.MethodDescriptor(
  '/unpack.v1.unpack.ObserverService/GetNetworks',
  grpc.web.MethodType.UNARY,
  unpack_types_pb.NetworkRequest,
  unpack_types_pb.NetworkResponse,
  /**
   * @param {!proto.unpack.v1.unpack.NetworkRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  unpack_types_pb.NetworkResponse.deserializeBinary
);


/**
 * @param {!proto.unpack.v1.unpack.NetworkRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.unpack.v1.unpack.NetworkResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.unpack.v1.unpack.NetworkResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.unpack.v1.unpack.ObserverServiceClient.prototype.getNetworks =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/unpack.v1.unpack.ObserverService/GetNetworks',
      request,
      metadata || {},
      methodDescriptor_ObserverService_GetNetworks,
      callback);
};


/**
 * @param {!proto.unpack.v1.unpack.NetworkRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.unpack.v1.unpack.NetworkResponse>}
 *     Promise that resolves to the response
 */
proto.unpack.v1.unpack.ObserverServicePromiseClient.prototype.getNetworks =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/unpack.v1.unpack.ObserverService/GetNetworks',
      request,
      metadata || {},
      methodDescriptor_ObserverService_GetNetworks);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.unpack.v1.unpack.AstRequest,
 *   !proto.unpack.v1.unpack.AstResponse>}
 */
const methodDescriptor_ObserverService_GetAST = new grpc.web.MethodDescriptor(
  '/unpack.v1.unpack.ObserverService/GetAST',
  grpc.web.MethodType.UNARY,
  unpack_types_pb.AstRequest,
  unpack_types_pb.AstResponse,
  /**
   * @param {!proto.unpack.v1.unpack.AstRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  unpack_types_pb.AstResponse.deserializeBinary
);


/**
 * @param {!proto.unpack.v1.unpack.AstRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.unpack.v1.unpack.AstResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.unpack.v1.unpack.AstResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.unpack.v1.unpack.ObserverServiceClient.prototype.getAST =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/unpack.v1.unpack.ObserverService/GetAST',
      request,
      metadata || {},
      methodDescriptor_ObserverService_GetAST,
      callback);
};


/**
 * @param {!proto.unpack.v1.unpack.AstRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.unpack.v1.unpack.AstResponse>}
 *     Promise that resolves to the response
 */
proto.unpack.v1.unpack.ObserverServicePromiseClient.prototype.getAST =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/unpack.v1.unpack.ObserverService/GetAST',
      request,
      metadata || {},
      methodDescriptor_ObserverService_GetAST);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.unpack.v1.unpack.OpCodeRequest,
 *   !proto.unpack.v1.unpack.OpCodeResponse>}
 */
const methodDescriptor_ObserverService_GetOpCode = new grpc.web.MethodDescriptor(
  '/unpack.v1.unpack.ObserverService/GetOpCode',
  grpc.web.MethodType.UNARY,
  unpack_types_pb.OpCodeRequest,
  unpack_types_pb.OpCodeResponse,
  /**
   * @param {!proto.unpack.v1.unpack.OpCodeRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  unpack_types_pb.OpCodeResponse.deserializeBinary
);


/**
 * @param {!proto.unpack.v1.unpack.OpCodeRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.unpack.v1.unpack.OpCodeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.unpack.v1.unpack.OpCodeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.unpack.v1.unpack.ObserverServiceClient.prototype.getOpCode =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/unpack.v1.unpack.ObserverService/GetOpCode',
      request,
      metadata || {},
      methodDescriptor_ObserverService_GetOpCode,
      callback);
};


/**
 * @param {!proto.unpack.v1.unpack.OpCodeRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.unpack.v1.unpack.OpCodeResponse>}
 *     Promise that resolves to the response
 */
proto.unpack.v1.unpack.ObserverServicePromiseClient.prototype.getOpCode =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/unpack.v1.unpack.ObserverService/GetOpCode',
      request,
      metadata || {},
      methodDescriptor_ObserverService_GetOpCode);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.unpack.v1.unpack.MethodRequest,
 *   !proto.unpack.v1.unpack.MethodResponse>}
 */
const methodDescriptor_ObserverService_GetMethod = new grpc.web.MethodDescriptor(
  '/unpack.v1.unpack.ObserverService/GetMethod',
  grpc.web.MethodType.UNARY,
  unpack_types_pb.MethodRequest,
  unpack_types_pb.MethodResponse,
  /**
   * @param {!proto.unpack.v1.unpack.MethodRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  unpack_types_pb.MethodResponse.deserializeBinary
);


/**
 * @param {!proto.unpack.v1.unpack.MethodRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.unpack.v1.unpack.MethodResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.unpack.v1.unpack.MethodResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.unpack.v1.unpack.ObserverServiceClient.prototype.getMethod =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/unpack.v1.unpack.ObserverService/GetMethod',
      request,
      metadata || {},
      methodDescriptor_ObserverService_GetMethod,
      callback);
};


/**
 * @param {!proto.unpack.v1.unpack.MethodRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.unpack.v1.unpack.MethodResponse>}
 *     Promise that resolves to the response
 */
proto.unpack.v1.unpack.ObserverServicePromiseClient.prototype.getMethod =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/unpack.v1.unpack.ObserverService/GetMethod',
      request,
      metadata || {},
      methodDescriptor_ObserverService_GetMethod);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.unpack.v1.unpack.MetadataRequest,
 *   !proto.unpack.v1.unpack.MetadataResponse>}
 */
const methodDescriptor_ObserverService_GetMetadata = new grpc.web.MethodDescriptor(
  '/unpack.v1.unpack.ObserverService/GetMetadata',
  grpc.web.MethodType.UNARY,
  unpack_types_pb.MetadataRequest,
  unpack_types_pb.MetadataResponse,
  /**
   * @param {!proto.unpack.v1.unpack.MetadataRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  unpack_types_pb.MetadataResponse.deserializeBinary
);


/**
 * @param {!proto.unpack.v1.unpack.MetadataRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.unpack.v1.unpack.MetadataResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.unpack.v1.unpack.MetadataResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.unpack.v1.unpack.ObserverServiceClient.prototype.getMetadata =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/unpack.v1.unpack.ObserverService/GetMetadata',
      request,
      metadata || {},
      methodDescriptor_ObserverService_GetMetadata,
      callback);
};


/**
 * @param {!proto.unpack.v1.unpack.MetadataRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.unpack.v1.unpack.MetadataResponse>}
 *     Promise that resolves to the response
 */
proto.unpack.v1.unpack.ObserverServicePromiseClient.prototype.getMetadata =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/unpack.v1.unpack.ObserverService/GetMetadata',
      request,
      metadata || {},
      methodDescriptor_ObserverService_GetMetadata);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.unpack.v1.unpack.AnalysisRequest,
 *   !proto.unpack.v1.unpack.AnalysisResponse>}
 */
const methodDescriptor_ObserverService_GetAnalysis = new grpc.web.MethodDescriptor(
  '/unpack.v1.unpack.ObserverService/GetAnalysis',
  grpc.web.MethodType.UNARY,
  unpack_types_pb.AnalysisRequest,
  unpack_types_pb.AnalysisResponse,
  /**
   * @param {!proto.unpack.v1.unpack.AnalysisRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  unpack_types_pb.AnalysisResponse.deserializeBinary
);


/**
 * @param {!proto.unpack.v1.unpack.AnalysisRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.unpack.v1.unpack.AnalysisResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.unpack.v1.unpack.AnalysisResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.unpack.v1.unpack.ObserverServiceClient.prototype.getAnalysis =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/unpack.v1.unpack.ObserverService/GetAnalysis',
      request,
      metadata || {},
      methodDescriptor_ObserverService_GetAnalysis,
      callback);
};


/**
 * @param {!proto.unpack.v1.unpack.AnalysisRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.unpack.v1.unpack.AnalysisResponse>}
 *     Promise that resolves to the response
 */
proto.unpack.v1.unpack.ObserverServicePromiseClient.prototype.getAnalysis =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/unpack.v1.unpack.ObserverService/GetAnalysis',
      request,
      metadata || {},
      methodDescriptor_ObserverService_GetAnalysis);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.unpack.v1.unpack.ContractRequest,
 *   !proto.unpack.v1.unpack.ContractResponse>}
 */
const methodDescriptor_ObserverService_GetContract = new grpc.web.MethodDescriptor(
  '/unpack.v1.unpack.ObserverService/GetContract',
  grpc.web.MethodType.UNARY,
  unpack_types_pb.ContractRequest,
  unpack_types_pb.ContractResponse,
  /**
   * @param {!proto.unpack.v1.unpack.ContractRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  unpack_types_pb.ContractResponse.deserializeBinary
);


/**
 * @param {!proto.unpack.v1.unpack.ContractRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.unpack.v1.unpack.ContractResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.unpack.v1.unpack.ContractResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.unpack.v1.unpack.ObserverServiceClient.prototype.getContract =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/unpack.v1.unpack.ObserverService/GetContract',
      request,
      metadata || {},
      methodDescriptor_ObserverService_GetContract,
      callback);
};


/**
 * @param {!proto.unpack.v1.unpack.ContractRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.unpack.v1.unpack.ContractResponse>}
 *     Promise that resolves to the response
 */
proto.unpack.v1.unpack.ObserverServicePromiseClient.prototype.getContract =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/unpack.v1.unpack.ObserverService/GetContract',
      request,
      metadata || {},
      methodDescriptor_ObserverService_GetContract);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.unpack.v1.unpack.VerificationDetailsRequest,
 *   !proto.unpack.v1.unpack.VerificationDetailsResponse>}
 */
const methodDescriptor_ObserverService_GetVerificationDetails = new grpc.web.MethodDescriptor(
  '/unpack.v1.unpack.ObserverService/GetVerificationDetails',
  grpc.web.MethodType.UNARY,
  unpack_types_pb.VerificationDetailsRequest,
  unpack_types_pb.VerificationDetailsResponse,
  /**
   * @param {!proto.unpack.v1.unpack.VerificationDetailsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  unpack_types_pb.VerificationDetailsResponse.deserializeBinary
);


/**
 * @param {!proto.unpack.v1.unpack.VerificationDetailsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.unpack.v1.unpack.VerificationDetailsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.unpack.v1.unpack.VerificationDetailsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.unpack.v1.unpack.ObserverServiceClient.prototype.getVerificationDetails =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/unpack.v1.unpack.ObserverService/GetVerificationDetails',
      request,
      metadata || {},
      methodDescriptor_ObserverService_GetVerificationDetails,
      callback);
};


/**
 * @param {!proto.unpack.v1.unpack.VerificationDetailsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.unpack.v1.unpack.VerificationDetailsResponse>}
 *     Promise that resolves to the response
 */
proto.unpack.v1.unpack.ObserverServicePromiseClient.prototype.getVerificationDetails =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/unpack.v1.unpack.ObserverService/GetVerificationDetails',
      request,
      metadata || {},
      methodDescriptor_ObserverService_GetVerificationDetails);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.unpack.v1.unpack.AbiRequest,
 *   !proto.unpack.v1.unpack.AbiResponse>}
 */
const methodDescriptor_ObserverService_GetABI = new grpc.web.MethodDescriptor(
  '/unpack.v1.unpack.ObserverService/GetABI',
  grpc.web.MethodType.UNARY,
  unpack_types_pb.AbiRequest,
  unpack_types_pb.AbiResponse,
  /**
   * @param {!proto.unpack.v1.unpack.AbiRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  unpack_types_pb.AbiResponse.deserializeBinary
);


/**
 * @param {!proto.unpack.v1.unpack.AbiRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.unpack.v1.unpack.AbiResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.unpack.v1.unpack.AbiResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.unpack.v1.unpack.ObserverServiceClient.prototype.getABI =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/unpack.v1.unpack.ObserverService/GetABI',
      request,
      metadata || {},
      methodDescriptor_ObserverService_GetABI,
      callback);
};


/**
 * @param {!proto.unpack.v1.unpack.AbiRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.unpack.v1.unpack.AbiResponse>}
 *     Promise that resolves to the response
 */
proto.unpack.v1.unpack.ObserverServicePromiseClient.prototype.getABI =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/unpack.v1.unpack.ObserverService/GetABI',
      request,
      metadata || {},
      methodDescriptor_ObserverService_GetABI);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.unpack.v1.unpack.SourceCodeRequest,
 *   !proto.unpack.v1.unpack.SourceCodeResponse>}
 */
const methodDescriptor_ObserverService_GetSourceCode = new grpc.web.MethodDescriptor(
  '/unpack.v1.unpack.ObserverService/GetSourceCode',
  grpc.web.MethodType.UNARY,
  unpack_types_pb.SourceCodeRequest,
  unpack_types_pb.SourceCodeResponse,
  /**
   * @param {!proto.unpack.v1.unpack.SourceCodeRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  unpack_types_pb.SourceCodeResponse.deserializeBinary
);


/**
 * @param {!proto.unpack.v1.unpack.SourceCodeRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.unpack.v1.unpack.SourceCodeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.unpack.v1.unpack.SourceCodeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.unpack.v1.unpack.ObserverServiceClient.prototype.getSourceCode =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/unpack.v1.unpack.ObserverService/GetSourceCode',
      request,
      metadata || {},
      methodDescriptor_ObserverService_GetSourceCode,
      callback);
};


/**
 * @param {!proto.unpack.v1.unpack.SourceCodeRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.unpack.v1.unpack.SourceCodeResponse>}
 *     Promise that resolves to the response
 */
proto.unpack.v1.unpack.ObserverServicePromiseClient.prototype.getSourceCode =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/unpack.v1.unpack.ObserverService/GetSourceCode',
      request,
      metadata || {},
      methodDescriptor_ObserverService_GetSourceCode);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.unpack.v1.unpack.BytecodeRequest,
 *   !proto.unpack.v1.unpack.BytecodeResponse>}
 */
const methodDescriptor_ObserverService_GetBytecode = new grpc.web.MethodDescriptor(
  '/unpack.v1.unpack.ObserverService/GetBytecode',
  grpc.web.MethodType.UNARY,
  unpack_types_pb.BytecodeRequest,
  unpack_types_pb.BytecodeResponse,
  /**
   * @param {!proto.unpack.v1.unpack.BytecodeRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  unpack_types_pb.BytecodeResponse.deserializeBinary
);


/**
 * @param {!proto.unpack.v1.unpack.BytecodeRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.unpack.v1.unpack.BytecodeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.unpack.v1.unpack.BytecodeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.unpack.v1.unpack.ObserverServiceClient.prototype.getBytecode =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/unpack.v1.unpack.ObserverService/GetBytecode',
      request,
      metadata || {},
      methodDescriptor_ObserverService_GetBytecode,
      callback);
};


/**
 * @param {!proto.unpack.v1.unpack.BytecodeRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.unpack.v1.unpack.BytecodeResponse>}
 *     Promise that resolves to the response
 */
proto.unpack.v1.unpack.ObserverServicePromiseClient.prototype.getBytecode =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/unpack.v1.unpack.ObserverService/GetBytecode',
      request,
      metadata || {},
      methodDescriptor_ObserverService_GetBytecode);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.unpack.v1.unpack.MethodsBySignatureRequest,
 *   !proto.unpack.v1.unpack.MethodsBySignatureResponse>}
 */
const methodDescriptor_ObserverService_GetMethodsBySignature = new grpc.web.MethodDescriptor(
  '/unpack.v1.unpack.ObserverService/GetMethodsBySignature',
  grpc.web.MethodType.UNARY,
  unpack_types_pb.MethodsBySignatureRequest,
  unpack_types_pb.MethodsBySignatureResponse,
  /**
   * @param {!proto.unpack.v1.unpack.MethodsBySignatureRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  unpack_types_pb.MethodsBySignatureResponse.deserializeBinary
);


/**
 * @param {!proto.unpack.v1.unpack.MethodsBySignatureRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.unpack.v1.unpack.MethodsBySignatureResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.unpack.v1.unpack.MethodsBySignatureResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.unpack.v1.unpack.ObserverServiceClient.prototype.getMethodsBySignature =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/unpack.v1.unpack.ObserverService/GetMethodsBySignature',
      request,
      metadata || {},
      methodDescriptor_ObserverService_GetMethodsBySignature,
      callback);
};


/**
 * @param {!proto.unpack.v1.unpack.MethodsBySignatureRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.unpack.v1.unpack.MethodsBySignatureResponse>}
 *     Promise that resolves to the response
 */
proto.unpack.v1.unpack.ObserverServicePromiseClient.prototype.getMethodsBySignature =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/unpack.v1.unpack.ObserverService/GetMethodsBySignature',
      request,
      metadata || {},
      methodDescriptor_ObserverService_GetMethodsBySignature);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.unpack.v1.unpack.BlockRequest,
 *   !proto.unpack.v1.unpack.BlockResponse>}
 */
const methodDescriptor_ObserverService_GetBlock = new grpc.web.MethodDescriptor(
  '/unpack.v1.unpack.ObserverService/GetBlock',
  grpc.web.MethodType.UNARY,
  unpack_types_pb.BlockRequest,
  unpack_types_pb.BlockResponse,
  /**
   * @param {!proto.unpack.v1.unpack.BlockRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  unpack_types_pb.BlockResponse.deserializeBinary
);


/**
 * @param {!proto.unpack.v1.unpack.BlockRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.unpack.v1.unpack.BlockResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.unpack.v1.unpack.BlockResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.unpack.v1.unpack.ObserverServiceClient.prototype.getBlock =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/unpack.v1.unpack.ObserverService/GetBlock',
      request,
      metadata || {},
      methodDescriptor_ObserverService_GetBlock,
      callback);
};


/**
 * @param {!proto.unpack.v1.unpack.BlockRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.unpack.v1.unpack.BlockResponse>}
 *     Promise that resolves to the response
 */
proto.unpack.v1.unpack.ObserverServicePromiseClient.prototype.getBlock =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/unpack.v1.unpack.ObserverService/GetBlock',
      request,
      metadata || {},
      methodDescriptor_ObserverService_GetBlock);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.unpack.v1.unpack.TransactionRequest,
 *   !proto.unpack.v1.unpack.TransactionResponse>}
 */
const methodDescriptor_ObserverService_GetTransaction = new grpc.web.MethodDescriptor(
  '/unpack.v1.unpack.ObserverService/GetTransaction',
  grpc.web.MethodType.UNARY,
  unpack_types_pb.TransactionRequest,
  unpack_types_pb.TransactionResponse,
  /**
   * @param {!proto.unpack.v1.unpack.TransactionRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  unpack_types_pb.TransactionResponse.deserializeBinary
);


/**
 * @param {!proto.unpack.v1.unpack.TransactionRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.unpack.v1.unpack.TransactionResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.unpack.v1.unpack.TransactionResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.unpack.v1.unpack.ObserverServiceClient.prototype.getTransaction =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/unpack.v1.unpack.ObserverService/GetTransaction',
      request,
      metadata || {},
      methodDescriptor_ObserverService_GetTransaction,
      callback);
};


/**
 * @param {!proto.unpack.v1.unpack.TransactionRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.unpack.v1.unpack.TransactionResponse>}
 *     Promise that resolves to the response
 */
proto.unpack.v1.unpack.ObserverServicePromiseClient.prototype.getTransaction =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/unpack.v1.unpack.ObserverService/GetTransaction',
      request,
      metadata || {},
      methodDescriptor_ObserverService_GetTransaction);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.unpack.v1.unpack.ReceiptRequest,
 *   !proto.unpack.v1.unpack.ReceiptResponse>}
 */
const methodDescriptor_ObserverService_GetReceipt = new grpc.web.MethodDescriptor(
  '/unpack.v1.unpack.ObserverService/GetReceipt',
  grpc.web.MethodType.UNARY,
  unpack_types_pb.ReceiptRequest,
  unpack_types_pb.ReceiptResponse,
  /**
   * @param {!proto.unpack.v1.unpack.ReceiptRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  unpack_types_pb.ReceiptResponse.deserializeBinary
);


/**
 * @param {!proto.unpack.v1.unpack.ReceiptRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.unpack.v1.unpack.ReceiptResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.unpack.v1.unpack.ReceiptResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.unpack.v1.unpack.ObserverServiceClient.prototype.getReceipt =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/unpack.v1.unpack.ObserverService/GetReceipt',
      request,
      metadata || {},
      methodDescriptor_ObserverService_GetReceipt,
      callback);
};


/**
 * @param {!proto.unpack.v1.unpack.ReceiptRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.unpack.v1.unpack.ReceiptResponse>}
 *     Promise that resolves to the response
 */
proto.unpack.v1.unpack.ObserverServicePromiseClient.prototype.getReceipt =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/unpack.v1.unpack.ObserverService/GetReceipt',
      request,
      metadata || {},
      methodDescriptor_ObserverService_GetReceipt);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.unpack.v1.unpack.LogRequest,
 *   !proto.unpack.v1.unpack.LogResponse>}
 */
const methodDescriptor_ObserverService_GetLog = new grpc.web.MethodDescriptor(
  '/unpack.v1.unpack.ObserverService/GetLog',
  grpc.web.MethodType.UNARY,
  unpack_types_pb.LogRequest,
  unpack_types_pb.LogResponse,
  /**
   * @param {!proto.unpack.v1.unpack.LogRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  unpack_types_pb.LogResponse.deserializeBinary
);


/**
 * @param {!proto.unpack.v1.unpack.LogRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.unpack.v1.unpack.LogResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.unpack.v1.unpack.LogResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.unpack.v1.unpack.ObserverServiceClient.prototype.getLog =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/unpack.v1.unpack.ObserverService/GetLog',
      request,
      metadata || {},
      methodDescriptor_ObserverService_GetLog,
      callback);
};


/**
 * @param {!proto.unpack.v1.unpack.LogRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.unpack.v1.unpack.LogResponse>}
 *     Promise that resolves to the response
 */
proto.unpack.v1.unpack.ObserverServicePromiseClient.prototype.getLog =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/unpack.v1.unpack.ObserverService/GetLog',
      request,
      metadata || {},
      methodDescriptor_ObserverService_GetLog);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.unpack.v1.unpack.TraceRequest,
 *   !proto.unpack.v1.unpack.TraceResponse>}
 */
const methodDescriptor_ObserverService_GetTrace = new grpc.web.MethodDescriptor(
  '/unpack.v1.unpack.ObserverService/GetTrace',
  grpc.web.MethodType.UNARY,
  unpack_types_pb.TraceRequest,
  unpack_types_pb.TraceResponse,
  /**
   * @param {!proto.unpack.v1.unpack.TraceRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  unpack_types_pb.TraceResponse.deserializeBinary
);


/**
 * @param {!proto.unpack.v1.unpack.TraceRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.unpack.v1.unpack.TraceResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.unpack.v1.unpack.TraceResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.unpack.v1.unpack.ObserverServiceClient.prototype.getTrace =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/unpack.v1.unpack.ObserverService/GetTrace',
      request,
      metadata || {},
      methodDescriptor_ObserverService_GetTrace,
      callback);
};


/**
 * @param {!proto.unpack.v1.unpack.TraceRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.unpack.v1.unpack.TraceResponse>}
 *     Promise that resolves to the response
 */
proto.unpack.v1.unpack.ObserverServicePromiseClient.prototype.getTrace =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/unpack.v1.unpack.ObserverService/GetTrace',
      request,
      metadata || {},
      methodDescriptor_ObserverService_GetTrace);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.unpack.v1.unpack.QueueContractRequest,
 *   !proto.unpack.v1.unpack.QueueContractResponse>}
 */
const methodDescriptor_ObserverService_QueueContract = new grpc.web.MethodDescriptor(
  '/unpack.v1.unpack.ObserverService/QueueContract',
  grpc.web.MethodType.UNARY,
  unpack_types_pb.QueueContractRequest,
  unpack_types_pb.QueueContractResponse,
  /**
   * @param {!proto.unpack.v1.unpack.QueueContractRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  unpack_types_pb.QueueContractResponse.deserializeBinary
);


/**
 * @param {!proto.unpack.v1.unpack.QueueContractRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.unpack.v1.unpack.QueueContractResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.unpack.v1.unpack.QueueContractResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.unpack.v1.unpack.ObserverServiceClient.prototype.queueContract =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/unpack.v1.unpack.ObserverService/QueueContract',
      request,
      metadata || {},
      methodDescriptor_ObserverService_QueueContract,
      callback);
};


/**
 * @param {!proto.unpack.v1.unpack.QueueContractRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.unpack.v1.unpack.QueueContractResponse>}
 *     Promise that resolves to the response
 */
proto.unpack.v1.unpack.ObserverServicePromiseClient.prototype.queueContract =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/unpack.v1.unpack.ObserverService/QueueContract',
      request,
      metadata || {},
      methodDescriptor_ObserverService_QueueContract);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.unpack.v1.unpack.QueueMethodRequest,
 *   !proto.unpack.v1.unpack.QueueMethodResponse>}
 */
const methodDescriptor_ObserverService_QueueMethod = new grpc.web.MethodDescriptor(
  '/unpack.v1.unpack.ObserverService/QueueMethod',
  grpc.web.MethodType.UNARY,
  unpack_types_pb.QueueMethodRequest,
  unpack_types_pb.QueueMethodResponse,
  /**
   * @param {!proto.unpack.v1.unpack.QueueMethodRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  unpack_types_pb.QueueMethodResponse.deserializeBinary
);


/**
 * @param {!proto.unpack.v1.unpack.QueueMethodRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.unpack.v1.unpack.QueueMethodResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.unpack.v1.unpack.QueueMethodResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.unpack.v1.unpack.ObserverServiceClient.prototype.queueMethod =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/unpack.v1.unpack.ObserverService/QueueMethod',
      request,
      metadata || {},
      methodDescriptor_ObserverService_QueueMethod,
      callback);
};


/**
 * @param {!proto.unpack.v1.unpack.QueueMethodRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.unpack.v1.unpack.QueueMethodResponse>}
 *     Promise that resolves to the response
 */
proto.unpack.v1.unpack.ObserverServicePromiseClient.prototype.queueMethod =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/unpack.v1.unpack.ObserverService/QueueMethod',
      request,
      metadata || {},
      methodDescriptor_ObserverService_QueueMethod);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.unpack.v1.unpack.QueueBytecodeRequest,
 *   !proto.unpack.v1.unpack.QueueBytecodeResponse>}
 */
const methodDescriptor_ObserverService_QueueBytecode = new grpc.web.MethodDescriptor(
  '/unpack.v1.unpack.ObserverService/QueueBytecode',
  grpc.web.MethodType.UNARY,
  unpack_types_pb.QueueBytecodeRequest,
  unpack_types_pb.QueueBytecodeResponse,
  /**
   * @param {!proto.unpack.v1.unpack.QueueBytecodeRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  unpack_types_pb.QueueBytecodeResponse.deserializeBinary
);


/**
 * @param {!proto.unpack.v1.unpack.QueueBytecodeRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.unpack.v1.unpack.QueueBytecodeResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.unpack.v1.unpack.QueueBytecodeResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.unpack.v1.unpack.ObserverServiceClient.prototype.queueBytecode =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/unpack.v1.unpack.ObserverService/QueueBytecode',
      request,
      metadata || {},
      methodDescriptor_ObserverService_QueueBytecode,
      callback);
};


/**
 * @param {!proto.unpack.v1.unpack.QueueBytecodeRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.unpack.v1.unpack.QueueBytecodeResponse>}
 *     Promise that resolves to the response
 */
proto.unpack.v1.unpack.ObserverServicePromiseClient.prototype.queueBytecode =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/unpack.v1.unpack.ObserverService/QueueBytecode',
      request,
      metadata || {},
      methodDescriptor_ObserverService_QueueBytecode);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.unpack.v1.unpack.StatisticsRequest,
 *   !proto.unpack.v1.unpack.StatisticsResponse>}
 */
const methodDescriptor_ObserverService_GetStatistics = new grpc.web.MethodDescriptor(
  '/unpack.v1.unpack.ObserverService/GetStatistics',
  grpc.web.MethodType.UNARY,
  unpack_types_pb.StatisticsRequest,
  unpack_types_pb.StatisticsResponse,
  /**
   * @param {!proto.unpack.v1.unpack.StatisticsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  unpack_types_pb.StatisticsResponse.deserializeBinary
);


/**
 * @param {!proto.unpack.v1.unpack.StatisticsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.unpack.v1.unpack.StatisticsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.unpack.v1.unpack.StatisticsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.unpack.v1.unpack.ObserverServiceClient.prototype.getStatistics =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/unpack.v1.unpack.ObserverService/GetStatistics',
      request,
      metadata || {},
      methodDescriptor_ObserverService_GetStatistics,
      callback);
};


/**
 * @param {!proto.unpack.v1.unpack.StatisticsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.unpack.v1.unpack.StatisticsResponse>}
 *     Promise that resolves to the response
 */
proto.unpack.v1.unpack.ObserverServicePromiseClient.prototype.getStatistics =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/unpack.v1.unpack.ObserverService/GetStatistics',
      request,
      metadata || {},
      methodDescriptor_ObserverService_GetStatistics);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.unpack.v1.unpack.QueueStatusRequest,
 *   !proto.unpack.v1.unpack.QueueStatusResponse>}
 */
const methodDescriptor_ObserverService_GetQueueStatus = new grpc.web.MethodDescriptor(
  '/unpack.v1.unpack.ObserverService/GetQueueStatus',
  grpc.web.MethodType.UNARY,
  unpack_types_pb.QueueStatusRequest,
  unpack_types_pb.QueueStatusResponse,
  /**
   * @param {!proto.unpack.v1.unpack.QueueStatusRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  unpack_types_pb.QueueStatusResponse.deserializeBinary
);


/**
 * @param {!proto.unpack.v1.unpack.QueueStatusRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.unpack.v1.unpack.QueueStatusResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.unpack.v1.unpack.QueueStatusResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.unpack.v1.unpack.ObserverServiceClient.prototype.getQueueStatus =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/unpack.v1.unpack.ObserverService/GetQueueStatus',
      request,
      metadata || {},
      methodDescriptor_ObserverService_GetQueueStatus,
      callback);
};


/**
 * @param {!proto.unpack.v1.unpack.QueueStatusRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.unpack.v1.unpack.QueueStatusResponse>}
 *     Promise that resolves to the response
 */
proto.unpack.v1.unpack.ObserverServicePromiseClient.prototype.getQueueStatus =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/unpack.v1.unpack.ObserverService/GetQueueStatus',
      request,
      metadata || {},
      methodDescriptor_ObserverService_GetQueueStatus);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.unpack.v1.unpack.QueueStatisticsRequest,
 *   !proto.unpack.v1.unpack.QueueStatisticsResponse>}
 */
const methodDescriptor_ObserverService_GetQueueStatistics = new grpc.web.MethodDescriptor(
  '/unpack.v1.unpack.ObserverService/GetQueueStatistics',
  grpc.web.MethodType.UNARY,
  unpack_types_pb.QueueStatisticsRequest,
  unpack_types_pb.QueueStatisticsResponse,
  /**
   * @param {!proto.unpack.v1.unpack.QueueStatisticsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  unpack_types_pb.QueueStatisticsResponse.deserializeBinary
);


/**
 * @param {!proto.unpack.v1.unpack.QueueStatisticsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.unpack.v1.unpack.QueueStatisticsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.unpack.v1.unpack.QueueStatisticsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.unpack.v1.unpack.ObserverServiceClient.prototype.getQueueStatistics =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/unpack.v1.unpack.ObserverService/GetQueueStatistics',
      request,
      metadata || {},
      methodDescriptor_ObserverService_GetQueueStatistics,
      callback);
};


/**
 * @param {!proto.unpack.v1.unpack.QueueStatisticsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.unpack.v1.unpack.QueueStatisticsResponse>}
 *     Promise that resolves to the response
 */
proto.unpack.v1.unpack.ObserverServicePromiseClient.prototype.getQueueStatistics =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/unpack.v1.unpack.ObserverService/GetQueueStatistics',
      request,
      metadata || {},
      methodDescriptor_ObserverService_GetQueueStatistics);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.unpack.v1.unpack.HealthRequest,
 *   !proto.unpack.v1.unpack.HealthResponse>}
 */
const methodDescriptor_ObserverService_GetHealth = new grpc.web.MethodDescriptor(
  '/unpack.v1.unpack.ObserverService/GetHealth',
  grpc.web.MethodType.UNARY,
  unpack_types_pb.HealthRequest,
  unpack_types_pb.HealthResponse,
  /**
   * @param {!proto.unpack.v1.unpack.HealthRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  unpack_types_pb.HealthResponse.deserializeBinary
);


/**
 * @param {!proto.unpack.v1.unpack.HealthRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.unpack.v1.unpack.HealthResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.unpack.v1.unpack.HealthResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.unpack.v1.unpack.ObserverServiceClient.prototype.getHealth =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/unpack.v1.unpack.ObserverService/GetHealth',
      request,
      metadata || {},
      methodDescriptor_ObserverService_GetHealth,
      callback);
};


/**
 * @param {!proto.unpack.v1.unpack.HealthRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.unpack.v1.unpack.HealthResponse>}
 *     Promise that resolves to the response
 */
proto.unpack.v1.unpack.ObserverServicePromiseClient.prototype.getHealth =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/unpack.v1.unpack.ObserverService/GetHealth',
      request,
      metadata || {},
      methodDescriptor_ObserverService_GetHealth);
};


module.exports = proto.unpack.v1.unpack;

