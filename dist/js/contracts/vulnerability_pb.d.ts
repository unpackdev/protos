import * as jspb from 'google-protobuf'



export class Implements extends jspb.Message {
  getUuid(): string;
  setUuid(value: string): Implements;

  getName(): string;
  setName(value: string): Implements;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Implements.AsObject;
  static toObject(includeInstance: boolean, msg: Implements): Implements.AsObject;
  static serializeBinaryToWriter(message: Implements, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Implements;
  static deserializeBinaryFromReader(message: Implements, reader: jspb.BinaryReader): Implements;
}

export namespace Implements {
  export type AsObject = {
    uuid: string,
    name: string,
  }
}

export class VulnerabilityMetric extends jspb.Message {
  getLevel(): string;
  setLevel(value: string): VulnerabilityMetric;

  getCount(): number;
  setCount(value: number): VulnerabilityMetric;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): VulnerabilityMetric.AsObject;
  static toObject(includeInstance: boolean, msg: VulnerabilityMetric): VulnerabilityMetric.AsObject;
  static serializeBinaryToWriter(message: VulnerabilityMetric, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): VulnerabilityMetric;
  static deserializeBinaryFromReader(message: VulnerabilityMetric, reader: jspb.BinaryReader): VulnerabilityMetric;
}

export namespace VulnerabilityMetric {
  export type AsObject = {
    level: string,
    count: number,
  }
}

export class Element extends jspb.Message {
  getName(): string;
  setName(value: string): Element;

  getType(): string;
  setType(value: string): Element;

  getStart(): number;
  setStart(value: number): Element;

  getLength(): number;
  setLength(value: number): Element;

  getStartingColumn(): number;
  setStartingColumn(value: number): Element;

  getEndingColumn(): number;
  setEndingColumn(value: number): Element;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Element.AsObject;
  static toObject(includeInstance: boolean, msg: Element): Element.AsObject;
  static serializeBinaryToWriter(message: Element, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Element;
  static deserializeBinaryFromReader(message: Element, reader: jspb.BinaryReader): Element;
}

export namespace Element {
  export type AsObject = {
    name: string,
    type: string,
    start: number,
    length: number,
    startingColumn: number,
    endingColumn: number,
  }
}

export class Vulnerability extends jspb.Message {
  getCheck(): string;
  setCheck(value: string): Vulnerability;

  getImpact(): string;
  setImpact(value: string): Vulnerability;

  getDescription(): string;
  setDescription(value: string): Vulnerability;

  getConfidence(): string;
  setConfidence(value: string): Vulnerability;

  getElementsList(): Array<Element>;
  setElementsList(value: Array<Element>): Vulnerability;
  clearElementsList(): Vulnerability;
  addElements(value?: Element, index?: number): Element;

  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): Vulnerability.AsObject;
  static toObject(includeInstance: boolean, msg: Vulnerability): Vulnerability.AsObject;
  static serializeBinaryToWriter(message: Vulnerability, writer: jspb.BinaryWriter): void;
  static deserializeBinary(bytes: Uint8Array): Vulnerability;
  static deserializeBinaryFromReader(message: Vulnerability, reader: jspb.BinaryReader): Vulnerability;
}

export namespace Vulnerability {
  export type AsObject = {
    check: string,
    impact: string,
    description: string,
    confidence: string,
    elementsList: Array<Element.AsObject>,
  }
}

