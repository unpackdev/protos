// source: ast/statement.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var ast_types_pb = require('../ast/types_pb.js');
goog.object.extend(proto, ast_types_pb);
var ast_src_pb = require('../ast/src_pb.js');
goog.object.extend(proto, ast_src_pb);
var ast_parameters_pb = require('../ast/parameters_pb.js');
goog.object.extend(proto, ast_parameters_pb);
goog.exportSymbol('proto.txpull.v1.ast.Argument', null, global);
goog.exportSymbol('proto.txpull.v1.ast.Declaration', null, global);
goog.exportSymbol('proto.txpull.v1.ast.Expression', null, global);
goog.exportSymbol('proto.txpull.v1.ast.Statement', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.txpull.v1.ast.Statement = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.txpull.v1.ast.Statement.repeatedFields_, null);
};
goog.inherits(proto.txpull.v1.ast.Statement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.txpull.v1.ast.Statement.displayName = 'proto.txpull.v1.ast.Statement';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.txpull.v1.ast.Expression = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.txpull.v1.ast.Expression.repeatedFields_, null);
};
goog.inherits(proto.txpull.v1.ast.Expression, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.txpull.v1.ast.Expression.displayName = 'proto.txpull.v1.ast.Expression';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.txpull.v1.ast.Declaration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.txpull.v1.ast.Declaration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.txpull.v1.ast.Declaration.displayName = 'proto.txpull.v1.ast.Declaration';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.txpull.v1.ast.Argument = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.txpull.v1.ast.Argument, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.txpull.v1.ast.Argument.displayName = 'proto.txpull.v1.ast.Argument';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.txpull.v1.ast.Statement.repeatedFields_ = [6,7,14,17];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.txpull.v1.ast.Statement.prototype.toObject = function(opt_includeInstance) {
  return proto.txpull.v1.ast.Statement.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.txpull.v1.ast.Statement} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.txpull.v1.ast.Statement.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    nodeType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    src: (f = msg.getSrc()) && ast_src_pb.Src.toObject(includeInstance, f),
    expression: (f = msg.getExpression()) && proto.txpull.v1.ast.Expression.toObject(includeInstance, f),
    functionReturnParameters: jspb.Message.getFieldWithDefault(msg, 5, 0),
    declarationsList: jspb.Message.toObjectList(msg.getDeclarationsList(),
    proto.txpull.v1.ast.Declaration.toObject, includeInstance),
    assignmentsList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f,
    initialValue: (f = msg.getInitialValue()) && proto.txpull.v1.ast.Argument.toObject(includeInstance, f),
    kind: jspb.Message.getFieldWithDefault(msg, 9, 0),
    isConstant: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
    isLValue: jspb.Message.getBooleanFieldWithDefault(msg, 11, false),
    isPure: jspb.Message.getBooleanFieldWithDefault(msg, 12, false),
    lValueRequested: jspb.Message.getBooleanFieldWithDefault(msg, 13, false),
    namesList: (f = jspb.Message.getRepeatedField(msg, 14)) == null ? undefined : f,
    tryCall: jspb.Message.getBooleanFieldWithDefault(msg, 15, false),
    typeDescriptions: (f = msg.getTypeDescriptions()) && ast_parameters_pb.TypeDescriptions.toObject(includeInstance, f),
    argumentsList: jspb.Message.toObjectList(msg.getArgumentsList(),
    proto.txpull.v1.ast.Argument.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.txpull.v1.ast.Statement}
 */
proto.txpull.v1.ast.Statement.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.txpull.v1.ast.Statement;
  return proto.txpull.v1.ast.Statement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.txpull.v1.ast.Statement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.txpull.v1.ast.Statement}
 */
proto.txpull.v1.ast.Statement.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.txpull.v1.ast.NodeType} */ (reader.readEnum());
      msg.setNodeType(value);
      break;
    case 3:
      var value = new ast_src_pb.Src;
      reader.readMessage(value,ast_src_pb.Src.deserializeBinaryFromReader);
      msg.setSrc(value);
      break;
    case 4:
      var value = new proto.txpull.v1.ast.Expression;
      reader.readMessage(value,proto.txpull.v1.ast.Expression.deserializeBinaryFromReader);
      msg.setExpression(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFunctionReturnParameters(value);
      break;
    case 6:
      var value = new proto.txpull.v1.ast.Declaration;
      reader.readMessage(value,proto.txpull.v1.ast.Declaration.deserializeBinaryFromReader);
      msg.addDeclarations(value);
      break;
    case 7:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt64());
      msg.setAssignmentsList(value);
      break;
    case 8:
      var value = new proto.txpull.v1.ast.Argument;
      reader.readMessage(value,proto.txpull.v1.ast.Argument.deserializeBinaryFromReader);
      msg.setInitialValue(value);
      break;
    case 9:
      var value = /** @type {!proto.txpull.v1.ast.NodeType} */ (reader.readEnum());
      msg.setKind(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsConstant(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsLValue(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsPure(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLValueRequested(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.addNames(value);
      break;
    case 15:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTryCall(value);
      break;
    case 16:
      var value = new ast_parameters_pb.TypeDescriptions;
      reader.readMessage(value,ast_parameters_pb.TypeDescriptions.deserializeBinaryFromReader);
      msg.setTypeDescriptions(value);
      break;
    case 17:
      var value = new proto.txpull.v1.ast.Argument;
      reader.readMessage(value,proto.txpull.v1.ast.Argument.deserializeBinaryFromReader);
      msg.addArguments(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.txpull.v1.ast.Statement.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.txpull.v1.ast.Statement.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.txpull.v1.ast.Statement} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.txpull.v1.ast.Statement.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getNodeType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getSrc();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      ast_src_pb.Src.serializeBinaryToWriter
    );
  }
  f = message.getExpression();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.txpull.v1.ast.Expression.serializeBinaryToWriter
    );
  }
  f = message.getFunctionReturnParameters();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getDeclarationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.txpull.v1.ast.Declaration.serializeBinaryToWriter
    );
  }
  f = message.getAssignmentsList();
  if (f.length > 0) {
    writer.writePackedInt64(
      7,
      f
    );
  }
  f = message.getInitialValue();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.txpull.v1.ast.Argument.serializeBinaryToWriter
    );
  }
  f = message.getKind();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = message.getIsConstant();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getIsLValue();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getIsPure();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = message.getLValueRequested();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
  f = message.getNamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      14,
      f
    );
  }
  f = message.getTryCall();
  if (f) {
    writer.writeBool(
      15,
      f
    );
  }
  f = message.getTypeDescriptions();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      ast_parameters_pb.TypeDescriptions.serializeBinaryToWriter
    );
  }
  f = message.getArgumentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      17,
      f,
      proto.txpull.v1.ast.Argument.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.txpull.v1.ast.Statement.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.txpull.v1.ast.Statement} returns this
 */
proto.txpull.v1.ast.Statement.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional NodeType node_type = 2;
 * @return {!proto.txpull.v1.ast.NodeType}
 */
proto.txpull.v1.ast.Statement.prototype.getNodeType = function() {
  return /** @type {!proto.txpull.v1.ast.NodeType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.txpull.v1.ast.NodeType} value
 * @return {!proto.txpull.v1.ast.Statement} returns this
 */
proto.txpull.v1.ast.Statement.prototype.setNodeType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional Src src = 3;
 * @return {?proto.txpull.v1.ast.Src}
 */
proto.txpull.v1.ast.Statement.prototype.getSrc = function() {
  return /** @type{?proto.txpull.v1.ast.Src} */ (
    jspb.Message.getWrapperField(this, ast_src_pb.Src, 3));
};


/**
 * @param {?proto.txpull.v1.ast.Src|undefined} value
 * @return {!proto.txpull.v1.ast.Statement} returns this
*/
proto.txpull.v1.ast.Statement.prototype.setSrc = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.txpull.v1.ast.Statement} returns this
 */
proto.txpull.v1.ast.Statement.prototype.clearSrc = function() {
  return this.setSrc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.txpull.v1.ast.Statement.prototype.hasSrc = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Expression expression = 4;
 * @return {?proto.txpull.v1.ast.Expression}
 */
proto.txpull.v1.ast.Statement.prototype.getExpression = function() {
  return /** @type{?proto.txpull.v1.ast.Expression} */ (
    jspb.Message.getWrapperField(this, proto.txpull.v1.ast.Expression, 4));
};


/**
 * @param {?proto.txpull.v1.ast.Expression|undefined} value
 * @return {!proto.txpull.v1.ast.Statement} returns this
*/
proto.txpull.v1.ast.Statement.prototype.setExpression = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.txpull.v1.ast.Statement} returns this
 */
proto.txpull.v1.ast.Statement.prototype.clearExpression = function() {
  return this.setExpression(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.txpull.v1.ast.Statement.prototype.hasExpression = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int64 function_return_parameters = 5;
 * @return {number}
 */
proto.txpull.v1.ast.Statement.prototype.getFunctionReturnParameters = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.txpull.v1.ast.Statement} returns this
 */
proto.txpull.v1.ast.Statement.prototype.setFunctionReturnParameters = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * repeated Declaration declarations = 6;
 * @return {!Array<!proto.txpull.v1.ast.Declaration>}
 */
proto.txpull.v1.ast.Statement.prototype.getDeclarationsList = function() {
  return /** @type{!Array<!proto.txpull.v1.ast.Declaration>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.txpull.v1.ast.Declaration, 6));
};


/**
 * @param {!Array<!proto.txpull.v1.ast.Declaration>} value
 * @return {!proto.txpull.v1.ast.Statement} returns this
*/
proto.txpull.v1.ast.Statement.prototype.setDeclarationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.txpull.v1.ast.Declaration=} opt_value
 * @param {number=} opt_index
 * @return {!proto.txpull.v1.ast.Declaration}
 */
proto.txpull.v1.ast.Statement.prototype.addDeclarations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.txpull.v1.ast.Declaration, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.txpull.v1.ast.Statement} returns this
 */
proto.txpull.v1.ast.Statement.prototype.clearDeclarationsList = function() {
  return this.setDeclarationsList([]);
};


/**
 * repeated int64 assignments = 7;
 * @return {!Array<number>}
 */
proto.txpull.v1.ast.Statement.prototype.getAssignmentsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.txpull.v1.ast.Statement} returns this
 */
proto.txpull.v1.ast.Statement.prototype.setAssignmentsList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.txpull.v1.ast.Statement} returns this
 */
proto.txpull.v1.ast.Statement.prototype.addAssignments = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.txpull.v1.ast.Statement} returns this
 */
proto.txpull.v1.ast.Statement.prototype.clearAssignmentsList = function() {
  return this.setAssignmentsList([]);
};


/**
 * optional Argument initial_value = 8;
 * @return {?proto.txpull.v1.ast.Argument}
 */
proto.txpull.v1.ast.Statement.prototype.getInitialValue = function() {
  return /** @type{?proto.txpull.v1.ast.Argument} */ (
    jspb.Message.getWrapperField(this, proto.txpull.v1.ast.Argument, 8));
};


/**
 * @param {?proto.txpull.v1.ast.Argument|undefined} value
 * @return {!proto.txpull.v1.ast.Statement} returns this
*/
proto.txpull.v1.ast.Statement.prototype.setInitialValue = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.txpull.v1.ast.Statement} returns this
 */
proto.txpull.v1.ast.Statement.prototype.clearInitialValue = function() {
  return this.setInitialValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.txpull.v1.ast.Statement.prototype.hasInitialValue = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional NodeType kind = 9;
 * @return {!proto.txpull.v1.ast.NodeType}
 */
proto.txpull.v1.ast.Statement.prototype.getKind = function() {
  return /** @type {!proto.txpull.v1.ast.NodeType} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {!proto.txpull.v1.ast.NodeType} value
 * @return {!proto.txpull.v1.ast.Statement} returns this
 */
proto.txpull.v1.ast.Statement.prototype.setKind = function(value) {
  return jspb.Message.setProto3EnumField(this, 9, value);
};


/**
 * optional bool is_constant = 10;
 * @return {boolean}
 */
proto.txpull.v1.ast.Statement.prototype.getIsConstant = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.txpull.v1.ast.Statement} returns this
 */
proto.txpull.v1.ast.Statement.prototype.setIsConstant = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional bool is_l_value = 11;
 * @return {boolean}
 */
proto.txpull.v1.ast.Statement.prototype.getIsLValue = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.txpull.v1.ast.Statement} returns this
 */
proto.txpull.v1.ast.Statement.prototype.setIsLValue = function(value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional bool is_pure = 12;
 * @return {boolean}
 */
proto.txpull.v1.ast.Statement.prototype.getIsPure = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.txpull.v1.ast.Statement} returns this
 */
proto.txpull.v1.ast.Statement.prototype.setIsPure = function(value) {
  return jspb.Message.setProto3BooleanField(this, 12, value);
};


/**
 * optional bool l_value_requested = 13;
 * @return {boolean}
 */
proto.txpull.v1.ast.Statement.prototype.getLValueRequested = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, false));
};


/**
 * @param {boolean} value
 * @return {!proto.txpull.v1.ast.Statement} returns this
 */
proto.txpull.v1.ast.Statement.prototype.setLValueRequested = function(value) {
  return jspb.Message.setProto3BooleanField(this, 13, value);
};


/**
 * repeated string names = 14;
 * @return {!Array<string>}
 */
proto.txpull.v1.ast.Statement.prototype.getNamesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 14));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.txpull.v1.ast.Statement} returns this
 */
proto.txpull.v1.ast.Statement.prototype.setNamesList = function(value) {
  return jspb.Message.setField(this, 14, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.txpull.v1.ast.Statement} returns this
 */
proto.txpull.v1.ast.Statement.prototype.addNames = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 14, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.txpull.v1.ast.Statement} returns this
 */
proto.txpull.v1.ast.Statement.prototype.clearNamesList = function() {
  return this.setNamesList([]);
};


/**
 * optional bool try_call = 15;
 * @return {boolean}
 */
proto.txpull.v1.ast.Statement.prototype.getTryCall = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 15, false));
};


/**
 * @param {boolean} value
 * @return {!proto.txpull.v1.ast.Statement} returns this
 */
proto.txpull.v1.ast.Statement.prototype.setTryCall = function(value) {
  return jspb.Message.setProto3BooleanField(this, 15, value);
};


/**
 * optional TypeDescriptions type_descriptions = 16;
 * @return {?proto.txpull.v1.ast.TypeDescriptions}
 */
proto.txpull.v1.ast.Statement.prototype.getTypeDescriptions = function() {
  return /** @type{?proto.txpull.v1.ast.TypeDescriptions} */ (
    jspb.Message.getWrapperField(this, ast_parameters_pb.TypeDescriptions, 16));
};


/**
 * @param {?proto.txpull.v1.ast.TypeDescriptions|undefined} value
 * @return {!proto.txpull.v1.ast.Statement} returns this
*/
proto.txpull.v1.ast.Statement.prototype.setTypeDescriptions = function(value) {
  return jspb.Message.setWrapperField(this, 16, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.txpull.v1.ast.Statement} returns this
 */
proto.txpull.v1.ast.Statement.prototype.clearTypeDescriptions = function() {
  return this.setTypeDescriptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.txpull.v1.ast.Statement.prototype.hasTypeDescriptions = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * repeated Argument arguments = 17;
 * @return {!Array<!proto.txpull.v1.ast.Argument>}
 */
proto.txpull.v1.ast.Statement.prototype.getArgumentsList = function() {
  return /** @type{!Array<!proto.txpull.v1.ast.Argument>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.txpull.v1.ast.Argument, 17));
};


/**
 * @param {!Array<!proto.txpull.v1.ast.Argument>} value
 * @return {!proto.txpull.v1.ast.Statement} returns this
*/
proto.txpull.v1.ast.Statement.prototype.setArgumentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 17, value);
};


/**
 * @param {!proto.txpull.v1.ast.Argument=} opt_value
 * @param {number=} opt_index
 * @return {!proto.txpull.v1.ast.Argument}
 */
proto.txpull.v1.ast.Statement.prototype.addArguments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 17, opt_value, proto.txpull.v1.ast.Argument, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.txpull.v1.ast.Statement} returns this
 */
proto.txpull.v1.ast.Statement.prototype.clearArgumentsList = function() {
  return this.setArgumentsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.txpull.v1.ast.Expression.repeatedFields_ = [5,9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.txpull.v1.ast.Expression.prototype.toObject = function(opt_includeInstance) {
  return proto.txpull.v1.ast.Expression.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.txpull.v1.ast.Expression} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.txpull.v1.ast.Expression.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    nodeType: jspb.Message.getFieldWithDefault(msg, 3, 0),
    src: (f = msg.getSrc()) && ast_src_pb.Src.toObject(includeInstance, f),
    overloadedDeclarationsList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    referencedDeclaration: jspb.Message.getFieldWithDefault(msg, 6, 0),
    typeDescriptions: (f = msg.getTypeDescriptions()) && ast_parameters_pb.TypeDescriptions.toObject(includeInstance, f),
    expression: (f = msg.getExpression()) && proto.txpull.v1.ast.Expression.toObject(includeInstance, f),
    argumentTypesList: jspb.Message.toObjectList(msg.getArgumentTypesList(),
    ast_parameters_pb.TypeDescriptions.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.txpull.v1.ast.Expression}
 */
proto.txpull.v1.ast.Expression.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.txpull.v1.ast.Expression;
  return proto.txpull.v1.ast.Expression.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.txpull.v1.ast.Expression} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.txpull.v1.ast.Expression}
 */
proto.txpull.v1.ast.Expression.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {!proto.txpull.v1.ast.NodeType} */ (reader.readEnum());
      msg.setNodeType(value);
      break;
    case 4:
      var value = new ast_src_pb.Src;
      reader.readMessage(value,ast_src_pb.Src.deserializeBinaryFromReader);
      msg.setSrc(value);
      break;
    case 5:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt64());
      msg.setOverloadedDeclarationsList(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setReferencedDeclaration(value);
      break;
    case 7:
      var value = new ast_parameters_pb.TypeDescriptions;
      reader.readMessage(value,ast_parameters_pb.TypeDescriptions.deserializeBinaryFromReader);
      msg.setTypeDescriptions(value);
      break;
    case 8:
      var value = new proto.txpull.v1.ast.Expression;
      reader.readMessage(value,proto.txpull.v1.ast.Expression.deserializeBinaryFromReader);
      msg.setExpression(value);
      break;
    case 9:
      var value = new ast_parameters_pb.TypeDescriptions;
      reader.readMessage(value,ast_parameters_pb.TypeDescriptions.deserializeBinaryFromReader);
      msg.addArgumentTypes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.txpull.v1.ast.Expression.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.txpull.v1.ast.Expression.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.txpull.v1.ast.Expression} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.txpull.v1.ast.Expression.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNodeType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getSrc();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      ast_src_pb.Src.serializeBinaryToWriter
    );
  }
  f = message.getOverloadedDeclarationsList();
  if (f.length > 0) {
    writer.writePackedInt64(
      5,
      f
    );
  }
  f = message.getReferencedDeclaration();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getTypeDescriptions();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      ast_parameters_pb.TypeDescriptions.serializeBinaryToWriter
    );
  }
  f = message.getExpression();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.txpull.v1.ast.Expression.serializeBinaryToWriter
    );
  }
  f = message.getArgumentTypesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      ast_parameters_pb.TypeDescriptions.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.txpull.v1.ast.Expression.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.txpull.v1.ast.Expression} returns this
 */
proto.txpull.v1.ast.Expression.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.txpull.v1.ast.Expression.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.txpull.v1.ast.Expression} returns this
 */
proto.txpull.v1.ast.Expression.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional NodeType node_type = 3;
 * @return {!proto.txpull.v1.ast.NodeType}
 */
proto.txpull.v1.ast.Expression.prototype.getNodeType = function() {
  return /** @type {!proto.txpull.v1.ast.NodeType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.txpull.v1.ast.NodeType} value
 * @return {!proto.txpull.v1.ast.Expression} returns this
 */
proto.txpull.v1.ast.Expression.prototype.setNodeType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional Src src = 4;
 * @return {?proto.txpull.v1.ast.Src}
 */
proto.txpull.v1.ast.Expression.prototype.getSrc = function() {
  return /** @type{?proto.txpull.v1.ast.Src} */ (
    jspb.Message.getWrapperField(this, ast_src_pb.Src, 4));
};


/**
 * @param {?proto.txpull.v1.ast.Src|undefined} value
 * @return {!proto.txpull.v1.ast.Expression} returns this
*/
proto.txpull.v1.ast.Expression.prototype.setSrc = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.txpull.v1.ast.Expression} returns this
 */
proto.txpull.v1.ast.Expression.prototype.clearSrc = function() {
  return this.setSrc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.txpull.v1.ast.Expression.prototype.hasSrc = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated int64 overloaded_declarations = 5;
 * @return {!Array<number>}
 */
proto.txpull.v1.ast.Expression.prototype.getOverloadedDeclarationsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.txpull.v1.ast.Expression} returns this
 */
proto.txpull.v1.ast.Expression.prototype.setOverloadedDeclarationsList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.txpull.v1.ast.Expression} returns this
 */
proto.txpull.v1.ast.Expression.prototype.addOverloadedDeclarations = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.txpull.v1.ast.Expression} returns this
 */
proto.txpull.v1.ast.Expression.prototype.clearOverloadedDeclarationsList = function() {
  return this.setOverloadedDeclarationsList([]);
};


/**
 * optional int64 referenced_declaration = 6;
 * @return {number}
 */
proto.txpull.v1.ast.Expression.prototype.getReferencedDeclaration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.txpull.v1.ast.Expression} returns this
 */
proto.txpull.v1.ast.Expression.prototype.setReferencedDeclaration = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional TypeDescriptions type_descriptions = 7;
 * @return {?proto.txpull.v1.ast.TypeDescriptions}
 */
proto.txpull.v1.ast.Expression.prototype.getTypeDescriptions = function() {
  return /** @type{?proto.txpull.v1.ast.TypeDescriptions} */ (
    jspb.Message.getWrapperField(this, ast_parameters_pb.TypeDescriptions, 7));
};


/**
 * @param {?proto.txpull.v1.ast.TypeDescriptions|undefined} value
 * @return {!proto.txpull.v1.ast.Expression} returns this
*/
proto.txpull.v1.ast.Expression.prototype.setTypeDescriptions = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.txpull.v1.ast.Expression} returns this
 */
proto.txpull.v1.ast.Expression.prototype.clearTypeDescriptions = function() {
  return this.setTypeDescriptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.txpull.v1.ast.Expression.prototype.hasTypeDescriptions = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Expression expression = 8;
 * @return {?proto.txpull.v1.ast.Expression}
 */
proto.txpull.v1.ast.Expression.prototype.getExpression = function() {
  return /** @type{?proto.txpull.v1.ast.Expression} */ (
    jspb.Message.getWrapperField(this, proto.txpull.v1.ast.Expression, 8));
};


/**
 * @param {?proto.txpull.v1.ast.Expression|undefined} value
 * @return {!proto.txpull.v1.ast.Expression} returns this
*/
proto.txpull.v1.ast.Expression.prototype.setExpression = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.txpull.v1.ast.Expression} returns this
 */
proto.txpull.v1.ast.Expression.prototype.clearExpression = function() {
  return this.setExpression(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.txpull.v1.ast.Expression.prototype.hasExpression = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * repeated TypeDescriptions argument_types = 9;
 * @return {!Array<!proto.txpull.v1.ast.TypeDescriptions>}
 */
proto.txpull.v1.ast.Expression.prototype.getArgumentTypesList = function() {
  return /** @type{!Array<!proto.txpull.v1.ast.TypeDescriptions>} */ (
    jspb.Message.getRepeatedWrapperField(this, ast_parameters_pb.TypeDescriptions, 9));
};


/**
 * @param {!Array<!proto.txpull.v1.ast.TypeDescriptions>} value
 * @return {!proto.txpull.v1.ast.Expression} returns this
*/
proto.txpull.v1.ast.Expression.prototype.setArgumentTypesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.txpull.v1.ast.TypeDescriptions=} opt_value
 * @param {number=} opt_index
 * @return {!proto.txpull.v1.ast.TypeDescriptions}
 */
proto.txpull.v1.ast.Expression.prototype.addArgumentTypes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.txpull.v1.ast.TypeDescriptions, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.txpull.v1.ast.Expression} returns this
 */
proto.txpull.v1.ast.Expression.prototype.clearArgumentTypesList = function() {
  return this.setArgumentTypesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.txpull.v1.ast.Declaration.prototype.toObject = function(opt_includeInstance) {
  return proto.txpull.v1.ast.Declaration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.txpull.v1.ast.Declaration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.txpull.v1.ast.Declaration.toObject = function(includeInstance, msg) {
  var f, obj = {
    constant: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    id: jspb.Message.getFieldWithDefault(msg, 2, 0),
    mutability: jspb.Message.getFieldWithDefault(msg, 3, 0),
    name: jspb.Message.getFieldWithDefault(msg, 4, ""),
    nodeType: jspb.Message.getFieldWithDefault(msg, 5, 0),
    scope: jspb.Message.getFieldWithDefault(msg, 6, 0),
    src: (f = msg.getSrc()) && ast_src_pb.Src.toObject(includeInstance, f),
    stateVariable: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    storageLocation: jspb.Message.getFieldWithDefault(msg, 9, 0),
    typeName: (f = msg.getTypeName()) && ast_parameters_pb.TypeName.toObject(includeInstance, f),
    visibility: jspb.Message.getFieldWithDefault(msg, 12, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.txpull.v1.ast.Declaration}
 */
proto.txpull.v1.ast.Declaration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.txpull.v1.ast.Declaration;
  return proto.txpull.v1.ast.Declaration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.txpull.v1.ast.Declaration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.txpull.v1.ast.Declaration}
 */
proto.txpull.v1.ast.Declaration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setConstant(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {!proto.txpull.v1.ast.Mutability} */ (reader.readEnum());
      msg.setMutability(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 5:
      var value = /** @type {!proto.txpull.v1.ast.NodeType} */ (reader.readEnum());
      msg.setNodeType(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setScope(value);
      break;
    case 7:
      var value = new ast_src_pb.Src;
      reader.readMessage(value,ast_src_pb.Src.deserializeBinaryFromReader);
      msg.setSrc(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStateVariable(value);
      break;
    case 9:
      var value = /** @type {!proto.txpull.v1.ast.StorageLocation} */ (reader.readEnum());
      msg.setStorageLocation(value);
      break;
    case 11:
      var value = new ast_parameters_pb.TypeName;
      reader.readMessage(value,ast_parameters_pb.TypeName.deserializeBinaryFromReader);
      msg.setTypeName(value);
      break;
    case 12:
      var value = /** @type {!proto.txpull.v1.ast.Visibility} */ (reader.readEnum());
      msg.setVisibility(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.txpull.v1.ast.Declaration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.txpull.v1.ast.Declaration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.txpull.v1.ast.Declaration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.txpull.v1.ast.Declaration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConstant();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getMutability();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getNodeType();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getScope();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getSrc();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      ast_src_pb.Src.serializeBinaryToWriter
    );
  }
  f = message.getStateVariable();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getStorageLocation();
  if (f !== 0.0) {
    writer.writeEnum(
      9,
      f
    );
  }
  f = message.getTypeName();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      ast_parameters_pb.TypeName.serializeBinaryToWriter
    );
  }
  f = message.getVisibility();
  if (f !== 0.0) {
    writer.writeEnum(
      12,
      f
    );
  }
};


/**
 * optional bool constant = 1;
 * @return {boolean}
 */
proto.txpull.v1.ast.Declaration.prototype.getConstant = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.txpull.v1.ast.Declaration} returns this
 */
proto.txpull.v1.ast.Declaration.prototype.setConstant = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional int64 id = 2;
 * @return {number}
 */
proto.txpull.v1.ast.Declaration.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.txpull.v1.ast.Declaration} returns this
 */
proto.txpull.v1.ast.Declaration.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Mutability mutability = 3;
 * @return {!proto.txpull.v1.ast.Mutability}
 */
proto.txpull.v1.ast.Declaration.prototype.getMutability = function() {
  return /** @type {!proto.txpull.v1.ast.Mutability} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.txpull.v1.ast.Mutability} value
 * @return {!proto.txpull.v1.ast.Declaration} returns this
 */
proto.txpull.v1.ast.Declaration.prototype.setMutability = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.txpull.v1.ast.Declaration.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.txpull.v1.ast.Declaration} returns this
 */
proto.txpull.v1.ast.Declaration.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional NodeType node_type = 5;
 * @return {!proto.txpull.v1.ast.NodeType}
 */
proto.txpull.v1.ast.Declaration.prototype.getNodeType = function() {
  return /** @type {!proto.txpull.v1.ast.NodeType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.txpull.v1.ast.NodeType} value
 * @return {!proto.txpull.v1.ast.Declaration} returns this
 */
proto.txpull.v1.ast.Declaration.prototype.setNodeType = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional int64 scope = 6;
 * @return {number}
 */
proto.txpull.v1.ast.Declaration.prototype.getScope = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.txpull.v1.ast.Declaration} returns this
 */
proto.txpull.v1.ast.Declaration.prototype.setScope = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional Src src = 7;
 * @return {?proto.txpull.v1.ast.Src}
 */
proto.txpull.v1.ast.Declaration.prototype.getSrc = function() {
  return /** @type{?proto.txpull.v1.ast.Src} */ (
    jspb.Message.getWrapperField(this, ast_src_pb.Src, 7));
};


/**
 * @param {?proto.txpull.v1.ast.Src|undefined} value
 * @return {!proto.txpull.v1.ast.Declaration} returns this
*/
proto.txpull.v1.ast.Declaration.prototype.setSrc = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.txpull.v1.ast.Declaration} returns this
 */
proto.txpull.v1.ast.Declaration.prototype.clearSrc = function() {
  return this.setSrc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.txpull.v1.ast.Declaration.prototype.hasSrc = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bool state_variable = 8;
 * @return {boolean}
 */
proto.txpull.v1.ast.Declaration.prototype.getStateVariable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.txpull.v1.ast.Declaration} returns this
 */
proto.txpull.v1.ast.Declaration.prototype.setStateVariable = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional StorageLocation storage_location = 9;
 * @return {!proto.txpull.v1.ast.StorageLocation}
 */
proto.txpull.v1.ast.Declaration.prototype.getStorageLocation = function() {
  return /** @type {!proto.txpull.v1.ast.StorageLocation} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {!proto.txpull.v1.ast.StorageLocation} value
 * @return {!proto.txpull.v1.ast.Declaration} returns this
 */
proto.txpull.v1.ast.Declaration.prototype.setStorageLocation = function(value) {
  return jspb.Message.setProto3EnumField(this, 9, value);
};


/**
 * optional TypeName type_name = 11;
 * @return {?proto.txpull.v1.ast.TypeName}
 */
proto.txpull.v1.ast.Declaration.prototype.getTypeName = function() {
  return /** @type{?proto.txpull.v1.ast.TypeName} */ (
    jspb.Message.getWrapperField(this, ast_parameters_pb.TypeName, 11));
};


/**
 * @param {?proto.txpull.v1.ast.TypeName|undefined} value
 * @return {!proto.txpull.v1.ast.Declaration} returns this
*/
proto.txpull.v1.ast.Declaration.prototype.setTypeName = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.txpull.v1.ast.Declaration} returns this
 */
proto.txpull.v1.ast.Declaration.prototype.clearTypeName = function() {
  return this.setTypeName(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.txpull.v1.ast.Declaration.prototype.hasTypeName = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional Visibility visibility = 12;
 * @return {!proto.txpull.v1.ast.Visibility}
 */
proto.txpull.v1.ast.Declaration.prototype.getVisibility = function() {
  return /** @type {!proto.txpull.v1.ast.Visibility} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {!proto.txpull.v1.ast.Visibility} value
 * @return {!proto.txpull.v1.ast.Declaration} returns this
 */
proto.txpull.v1.ast.Declaration.prototype.setVisibility = function(value) {
  return jspb.Message.setProto3EnumField(this, 12, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.txpull.v1.ast.Argument.prototype.toObject = function(opt_includeInstance) {
  return proto.txpull.v1.ast.Argument.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.txpull.v1.ast.Argument} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.txpull.v1.ast.Argument.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    nodeType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    src: (f = msg.getSrc()) && ast_src_pb.Src.toObject(includeInstance, f),
    commonType: (f = msg.getCommonType()) && ast_parameters_pb.TypeDescriptions.toObject(includeInstance, f),
    isConstant: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    isLValue: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    isPure: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    lValueRequested: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    leftExpression: (f = msg.getLeftExpression()) && proto.txpull.v1.ast.Expression.toObject(includeInstance, f),
    operator: jspb.Message.getFieldWithDefault(msg, 10, 0),
    rightExpression: (f = msg.getRightExpression()) && proto.txpull.v1.ast.Expression.toObject(includeInstance, f),
    typeDescriptions: (f = msg.getTypeDescriptions()) && ast_parameters_pb.TypeDescriptions.toObject(includeInstance, f),
    name: jspb.Message.getFieldWithDefault(msg, 13, ""),
    value: jspb.Message.getFieldWithDefault(msg, 14, ""),
    hexValue: jspb.Message.getFieldWithDefault(msg, 15, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.txpull.v1.ast.Argument}
 */
proto.txpull.v1.ast.Argument.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.txpull.v1.ast.Argument;
  return proto.txpull.v1.ast.Argument.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.txpull.v1.ast.Argument} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.txpull.v1.ast.Argument}
 */
proto.txpull.v1.ast.Argument.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!proto.txpull.v1.ast.NodeType} */ (reader.readEnum());
      msg.setNodeType(value);
      break;
    case 3:
      var value = new ast_src_pb.Src;
      reader.readMessage(value,ast_src_pb.Src.deserializeBinaryFromReader);
      msg.setSrc(value);
      break;
    case 4:
      var value = new ast_parameters_pb.TypeDescriptions;
      reader.readMessage(value,ast_parameters_pb.TypeDescriptions.deserializeBinaryFromReader);
      msg.setCommonType(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsConstant(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsLValue(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsPure(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLValueRequested(value);
      break;
    case 9:
      var value = new proto.txpull.v1.ast.Expression;
      reader.readMessage(value,proto.txpull.v1.ast.Expression.deserializeBinaryFromReader);
      msg.setLeftExpression(value);
      break;
    case 10:
      var value = /** @type {!proto.txpull.v1.ast.Operator} */ (reader.readEnum());
      msg.setOperator(value);
      break;
    case 11:
      var value = new proto.txpull.v1.ast.Expression;
      reader.readMessage(value,proto.txpull.v1.ast.Expression.deserializeBinaryFromReader);
      msg.setRightExpression(value);
      break;
    case 12:
      var value = new ast_parameters_pb.TypeDescriptions;
      reader.readMessage(value,ast_parameters_pb.TypeDescriptions.deserializeBinaryFromReader);
      msg.setTypeDescriptions(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 15:
      var value = /** @type {string} */ (reader.readString());
      msg.setHexValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.txpull.v1.ast.Argument.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.txpull.v1.ast.Argument.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.txpull.v1.ast.Argument} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.txpull.v1.ast.Argument.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getNodeType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getSrc();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      ast_src_pb.Src.serializeBinaryToWriter
    );
  }
  f = message.getCommonType();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      ast_parameters_pb.TypeDescriptions.serializeBinaryToWriter
    );
  }
  f = message.getIsConstant();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getIsLValue();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getIsPure();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getLValueRequested();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getLeftExpression();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.txpull.v1.ast.Expression.serializeBinaryToWriter
    );
  }
  f = message.getOperator();
  if (f !== 0.0) {
    writer.writeEnum(
      10,
      f
    );
  }
  f = message.getRightExpression();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.txpull.v1.ast.Expression.serializeBinaryToWriter
    );
  }
  f = message.getTypeDescriptions();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      ast_parameters_pb.TypeDescriptions.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      14,
      f
    );
  }
  f = message.getHexValue();
  if (f.length > 0) {
    writer.writeString(
      15,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.txpull.v1.ast.Argument.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.txpull.v1.ast.Argument} returns this
 */
proto.txpull.v1.ast.Argument.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional NodeType node_type = 2;
 * @return {!proto.txpull.v1.ast.NodeType}
 */
proto.txpull.v1.ast.Argument.prototype.getNodeType = function() {
  return /** @type {!proto.txpull.v1.ast.NodeType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.txpull.v1.ast.NodeType} value
 * @return {!proto.txpull.v1.ast.Argument} returns this
 */
proto.txpull.v1.ast.Argument.prototype.setNodeType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional Src src = 3;
 * @return {?proto.txpull.v1.ast.Src}
 */
proto.txpull.v1.ast.Argument.prototype.getSrc = function() {
  return /** @type{?proto.txpull.v1.ast.Src} */ (
    jspb.Message.getWrapperField(this, ast_src_pb.Src, 3));
};


/**
 * @param {?proto.txpull.v1.ast.Src|undefined} value
 * @return {!proto.txpull.v1.ast.Argument} returns this
*/
proto.txpull.v1.ast.Argument.prototype.setSrc = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.txpull.v1.ast.Argument} returns this
 */
proto.txpull.v1.ast.Argument.prototype.clearSrc = function() {
  return this.setSrc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.txpull.v1.ast.Argument.prototype.hasSrc = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TypeDescriptions common_type = 4;
 * @return {?proto.txpull.v1.ast.TypeDescriptions}
 */
proto.txpull.v1.ast.Argument.prototype.getCommonType = function() {
  return /** @type{?proto.txpull.v1.ast.TypeDescriptions} */ (
    jspb.Message.getWrapperField(this, ast_parameters_pb.TypeDescriptions, 4));
};


/**
 * @param {?proto.txpull.v1.ast.TypeDescriptions|undefined} value
 * @return {!proto.txpull.v1.ast.Argument} returns this
*/
proto.txpull.v1.ast.Argument.prototype.setCommonType = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.txpull.v1.ast.Argument} returns this
 */
proto.txpull.v1.ast.Argument.prototype.clearCommonType = function() {
  return this.setCommonType(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.txpull.v1.ast.Argument.prototype.hasCommonType = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool is_constant = 5;
 * @return {boolean}
 */
proto.txpull.v1.ast.Argument.prototype.getIsConstant = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.txpull.v1.ast.Argument} returns this
 */
proto.txpull.v1.ast.Argument.prototype.setIsConstant = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool is_l_value = 6;
 * @return {boolean}
 */
proto.txpull.v1.ast.Argument.prototype.getIsLValue = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.txpull.v1.ast.Argument} returns this
 */
proto.txpull.v1.ast.Argument.prototype.setIsLValue = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool is_pure = 7;
 * @return {boolean}
 */
proto.txpull.v1.ast.Argument.prototype.getIsPure = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.txpull.v1.ast.Argument} returns this
 */
proto.txpull.v1.ast.Argument.prototype.setIsPure = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional bool l_value_requested = 8;
 * @return {boolean}
 */
proto.txpull.v1.ast.Argument.prototype.getLValueRequested = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.txpull.v1.ast.Argument} returns this
 */
proto.txpull.v1.ast.Argument.prototype.setLValueRequested = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional Expression left_expression = 9;
 * @return {?proto.txpull.v1.ast.Expression}
 */
proto.txpull.v1.ast.Argument.prototype.getLeftExpression = function() {
  return /** @type{?proto.txpull.v1.ast.Expression} */ (
    jspb.Message.getWrapperField(this, proto.txpull.v1.ast.Expression, 9));
};


/**
 * @param {?proto.txpull.v1.ast.Expression|undefined} value
 * @return {!proto.txpull.v1.ast.Argument} returns this
*/
proto.txpull.v1.ast.Argument.prototype.setLeftExpression = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.txpull.v1.ast.Argument} returns this
 */
proto.txpull.v1.ast.Argument.prototype.clearLeftExpression = function() {
  return this.setLeftExpression(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.txpull.v1.ast.Argument.prototype.hasLeftExpression = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional Operator operator = 10;
 * @return {!proto.txpull.v1.ast.Operator}
 */
proto.txpull.v1.ast.Argument.prototype.getOperator = function() {
  return /** @type {!proto.txpull.v1.ast.Operator} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {!proto.txpull.v1.ast.Operator} value
 * @return {!proto.txpull.v1.ast.Argument} returns this
 */
proto.txpull.v1.ast.Argument.prototype.setOperator = function(value) {
  return jspb.Message.setProto3EnumField(this, 10, value);
};


/**
 * optional Expression right_expression = 11;
 * @return {?proto.txpull.v1.ast.Expression}
 */
proto.txpull.v1.ast.Argument.prototype.getRightExpression = function() {
  return /** @type{?proto.txpull.v1.ast.Expression} */ (
    jspb.Message.getWrapperField(this, proto.txpull.v1.ast.Expression, 11));
};


/**
 * @param {?proto.txpull.v1.ast.Expression|undefined} value
 * @return {!proto.txpull.v1.ast.Argument} returns this
*/
proto.txpull.v1.ast.Argument.prototype.setRightExpression = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.txpull.v1.ast.Argument} returns this
 */
proto.txpull.v1.ast.Argument.prototype.clearRightExpression = function() {
  return this.setRightExpression(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.txpull.v1.ast.Argument.prototype.hasRightExpression = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional TypeDescriptions type_descriptions = 12;
 * @return {?proto.txpull.v1.ast.TypeDescriptions}
 */
proto.txpull.v1.ast.Argument.prototype.getTypeDescriptions = function() {
  return /** @type{?proto.txpull.v1.ast.TypeDescriptions} */ (
    jspb.Message.getWrapperField(this, ast_parameters_pb.TypeDescriptions, 12));
};


/**
 * @param {?proto.txpull.v1.ast.TypeDescriptions|undefined} value
 * @return {!proto.txpull.v1.ast.Argument} returns this
*/
proto.txpull.v1.ast.Argument.prototype.setTypeDescriptions = function(value) {
  return jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.txpull.v1.ast.Argument} returns this
 */
proto.txpull.v1.ast.Argument.prototype.clearTypeDescriptions = function() {
  return this.setTypeDescriptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.txpull.v1.ast.Argument.prototype.hasTypeDescriptions = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional string name = 13;
 * @return {string}
 */
proto.txpull.v1.ast.Argument.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.txpull.v1.ast.Argument} returns this
 */
proto.txpull.v1.ast.Argument.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * optional string value = 14;
 * @return {string}
 */
proto.txpull.v1.ast.Argument.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 14, ""));
};


/**
 * @param {string} value
 * @return {!proto.txpull.v1.ast.Argument} returns this
 */
proto.txpull.v1.ast.Argument.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 14, value);
};


/**
 * optional string hex_value = 15;
 * @return {string}
 */
proto.txpull.v1.ast.Argument.prototype.getHexValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};


/**
 * @param {string} value
 * @return {!proto.txpull.v1.ast.Argument} returns this
 */
proto.txpull.v1.ast.Argument.prototype.setHexValue = function(value) {
  return jspb.Message.setProto3StringField(this, 15, value);
};


goog.object.extend(exports, proto.txpull.v1.ast);
