// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.12.4
// source: unpack/contract.proto

//import "unpack/types.proto";

package unpack_pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ReceiptStatus int32

const (
	ReceiptStatus_RS_UNKNOWN ReceiptStatus = 0
	ReceiptStatus_RS_SUCCESS ReceiptStatus = 1
	ReceiptStatus_RS_FAILURE ReceiptStatus = 2
)

// Enum value maps for ReceiptStatus.
var (
	ReceiptStatus_name = map[int32]string{
		0: "RS_UNKNOWN",
		1: "RS_SUCCESS",
		2: "RS_FAILURE",
	}
	ReceiptStatus_value = map[string]int32{
		"RS_UNKNOWN": 0,
		"RS_SUCCESS": 1,
		"RS_FAILURE": 2,
	}
)

func (x ReceiptStatus) Enum() *ReceiptStatus {
	p := new(ReceiptStatus)
	*p = x
	return p
}

func (x ReceiptStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReceiptStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_unpack_contract_proto_enumTypes[0].Descriptor()
}

func (ReceiptStatus) Type() protoreflect.EnumType {
	return &file_unpack_contract_proto_enumTypes[0]
}

func (x ReceiptStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReceiptStatus.Descriptor instead.
func (ReceiptStatus) EnumDescriptor() ([]byte, []int) {
	return file_unpack_contract_proto_rawDescGZIP(), []int{0}
}

type VerificationStatus int32

const (
	VerificationStatus_VS_UNKNOWN    VerificationStatus = 0
	VerificationStatus_VS_VERIFIED   VerificationStatus = 1
	VerificationStatus_VS_PARTIAL    VerificationStatus = 2
	VerificationStatus_VS_UNVERIFIED VerificationStatus = 3
)

// Enum value maps for VerificationStatus.
var (
	VerificationStatus_name = map[int32]string{
		0: "VS_UNKNOWN",
		1: "VS_VERIFIED",
		2: "VS_PARTIAL",
		3: "VS_UNVERIFIED",
	}
	VerificationStatus_value = map[string]int32{
		"VS_UNKNOWN":    0,
		"VS_VERIFIED":   1,
		"VS_PARTIAL":    2,
		"VS_UNVERIFIED": 3,
	}
)

func (x VerificationStatus) Enum() *VerificationStatus {
	p := new(VerificationStatus)
	*p = x
	return p
}

func (x VerificationStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VerificationStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_unpack_contract_proto_enumTypes[1].Descriptor()
}

func (VerificationStatus) Type() protoreflect.EnumType {
	return &file_unpack_contract_proto_enumTypes[1]
}

func (x VerificationStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VerificationStatus.Descriptor instead.
func (VerificationStatus) EnumDescriptor() ([]byte, []int) {
	return file_unpack_contract_proto_rawDescGZIP(), []int{1}
}

type ContractType int32

const (
	ContractType_CT_UNKNOWN ContractType = 0
	ContractType_CT_ERC20   ContractType = 1
	ContractType_CT_ERC721  ContractType = 2
	ContractType_CT_ERC1155 ContractType = 3
	ContractType_CT_BEP20   ContractType = 4
	ContractType_CT_BEP721  ContractType = 5
	ContractType_CT_BEP1155 ContractType = 6
)

// Enum value maps for ContractType.
var (
	ContractType_name = map[int32]string{
		0: "CT_UNKNOWN",
		1: "CT_ERC20",
		2: "CT_ERC721",
		3: "CT_ERC1155",
		4: "CT_BEP20",
		5: "CT_BEP721",
		6: "CT_BEP1155",
	}
	ContractType_value = map[string]int32{
		"CT_UNKNOWN": 0,
		"CT_ERC20":   1,
		"CT_ERC721":  2,
		"CT_ERC1155": 3,
		"CT_BEP20":   4,
		"CT_BEP721":  5,
		"CT_BEP1155": 6,
	}
)

func (x ContractType) Enum() *ContractType {
	p := new(ContractType)
	*p = x
	return p
}

func (x ContractType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContractType) Descriptor() protoreflect.EnumDescriptor {
	return file_unpack_contract_proto_enumTypes[2].Descriptor()
}

func (ContractType) Type() protoreflect.EnumType {
	return &file_unpack_contract_proto_enumTypes[2]
}

func (x ContractType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContractType.Descriptor instead.
func (ContractType) EnumDescriptor() ([]byte, []int) {
	return file_unpack_contract_proto_rawDescGZIP(), []int{2}
}

type ContractLanguage int32

const (
	ContractLanguage_CL_UNKNOWN  ContractLanguage = 0
	ContractLanguage_CL_SOLIDITY ContractLanguage = 1
	ContractLanguage_CL_VYPER    ContractLanguage = 2
	ContractLanguage_CL_OTHER    ContractLanguage = 3
)

// Enum value maps for ContractLanguage.
var (
	ContractLanguage_name = map[int32]string{
		0: "CL_UNKNOWN",
		1: "CL_SOLIDITY",
		2: "CL_VYPER",
		3: "CL_OTHER",
	}
	ContractLanguage_value = map[string]int32{
		"CL_UNKNOWN":  0,
		"CL_SOLIDITY": 1,
		"CL_VYPER":    2,
		"CL_OTHER":    3,
	}
)

func (x ContractLanguage) Enum() *ContractLanguage {
	p := new(ContractLanguage)
	*p = x
	return p
}

func (x ContractLanguage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContractLanguage) Descriptor() protoreflect.EnumDescriptor {
	return file_unpack_contract_proto_enumTypes[3].Descriptor()
}

func (ContractLanguage) Type() protoreflect.EnumType {
	return &file_unpack_contract_proto_enumTypes[3]
}

func (x ContractLanguage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContractLanguage.Descriptor instead.
func (ContractLanguage) EnumDescriptor() ([]byte, []int) {
	return file_unpack_contract_proto_rawDescGZIP(), []int{3}
}

type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	License            string           `protobuf:"bytes,1,opt,name=license,proto3" json:"license,omitempty"`
	CompilerVersionRaw string           `protobuf:"bytes,2,opt,name=compiler_version_raw,json=compilerVersionRaw,proto3" json:"compiler_version_raw,omitempty"`
	CompilerVersion    string           `protobuf:"bytes,3,opt,name=compiler_version,json=compilerVersion,proto3" json:"compiler_version,omitempty"`
	EvmVersion         string           `protobuf:"bytes,4,opt,name=evm_version,json=evmVersion,proto3" json:"evm_version,omitempty"`
	Language           ContractLanguage `protobuf:"varint,5,opt,name=language,proto3,enum=txpull.v1.unpack.ContractLanguage" json:"language,omitempty"`
	Type               ContractType     `protobuf:"varint,6,opt,name=type,proto3,enum=txpull.v1.unpack.ContractType" json:"type,omitempty"`
	CborEncoded        bool             `protobuf:"varint,7,opt,name=cbor_encoded,json=cborEncoded,proto3" json:"cbor_encoded,omitempty"`
	CborRawMetadata    []byte           `protobuf:"bytes,8,opt,name=cbor_raw_metadata,json=cborRawMetadata,proto3" json:"cbor_raw_metadata,omitempty"`
	CborLength         int32            `protobuf:"varint,9,opt,name=cbor_length,json=cborLength,proto3" json:"cbor_length,omitempty"`
	Ipfs               string           `protobuf:"bytes,10,opt,name=ipfs,proto3" json:"ipfs,omitempty"`
	Bzzr0              string           `protobuf:"bytes,11,opt,name=bzzr0,proto3" json:"bzzr0,omitempty"`
	Bzzr1              string           `protobuf:"bytes,12,opt,name=bzzr1,proto3" json:"bzzr1,omitempty"`
	Remappings         []string         `protobuf:"bytes,13,rep,name=remappings,proto3" json:"remappings,omitempty"`
	IsProxy            bool             `protobuf:"varint,14,opt,name=is_proxy,json=isProxy,proto3" json:"is_proxy,omitempty"`
	ProxyConfidence    uint32           `protobuf:"varint,15,opt,name=proxy_confidence,json=proxyConfidence,proto3" json:"proxy_confidence,omitempty"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unpack_contract_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_unpack_contract_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_unpack_contract_proto_rawDescGZIP(), []int{0}
}

func (x *Metadata) GetLicense() string {
	if x != nil {
		return x.License
	}
	return ""
}

func (x *Metadata) GetCompilerVersionRaw() string {
	if x != nil {
		return x.CompilerVersionRaw
	}
	return ""
}

func (x *Metadata) GetCompilerVersion() string {
	if x != nil {
		return x.CompilerVersion
	}
	return ""
}

func (x *Metadata) GetEvmVersion() string {
	if x != nil {
		return x.EvmVersion
	}
	return ""
}

func (x *Metadata) GetLanguage() ContractLanguage {
	if x != nil {
		return x.Language
	}
	return ContractLanguage_CL_UNKNOWN
}

func (x *Metadata) GetType() ContractType {
	if x != nil {
		return x.Type
	}
	return ContractType_CT_UNKNOWN
}

func (x *Metadata) GetCborEncoded() bool {
	if x != nil {
		return x.CborEncoded
	}
	return false
}

func (x *Metadata) GetCborRawMetadata() []byte {
	if x != nil {
		return x.CborRawMetadata
	}
	return nil
}

func (x *Metadata) GetCborLength() int32 {
	if x != nil {
		return x.CborLength
	}
	return 0
}

func (x *Metadata) GetIpfs() string {
	if x != nil {
		return x.Ipfs
	}
	return ""
}

func (x *Metadata) GetBzzr0() string {
	if x != nil {
		return x.Bzzr0
	}
	return ""
}

func (x *Metadata) GetBzzr1() string {
	if x != nil {
		return x.Bzzr1
	}
	return ""
}

func (x *Metadata) GetRemappings() []string {
	if x != nil {
		return x.Remappings
	}
	return nil
}

func (x *Metadata) GetIsProxy() bool {
	if x != nil {
		return x.IsProxy
	}
	return false
}

func (x *Metadata) GetProxyConfidence() uint32 {
	if x != nil {
		return x.ProxyConfidence
	}
	return 0
}

type YulDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StackAllocation bool  `protobuf:"varint,1,opt,name=stack_allocation,json=stackAllocation,proto3" json:"stack_allocation,omitempty"`
	OptimizerSteps  int32 `protobuf:"varint,2,opt,name=optimizer_steps,json=optimizerSteps,proto3" json:"optimizer_steps,omitempty"`
}

func (x *YulDetails) Reset() {
	*x = YulDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unpack_contract_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YulDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YulDetails) ProtoMessage() {}

func (x *YulDetails) ProtoReflect() protoreflect.Message {
	mi := &file_unpack_contract_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YulDetails.ProtoReflect.Descriptor instead.
func (*YulDetails) Descriptor() ([]byte, []int) {
	return file_unpack_contract_proto_rawDescGZIP(), []int{1}
}

func (x *YulDetails) GetStackAllocation() bool {
	if x != nil {
		return x.StackAllocation
	}
	return false
}

func (x *YulDetails) GetOptimizerSteps() int32 {
	if x != nil {
		return x.OptimizerSteps
	}
	return 0
}

type OptimizerDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Peephole          bool        `protobuf:"varint,1,opt,name=peephole,proto3" json:"peephole,omitempty"`
	Inliner           bool        `protobuf:"varint,2,opt,name=inliner,proto3" json:"inliner,omitempty"`
	JumpdestRemover   bool        `protobuf:"varint,3,opt,name=jumpdest_remover,json=jumpdestRemover,proto3" json:"jumpdest_remover,omitempty"`
	OrderLiterals     bool        `protobuf:"varint,4,opt,name=order_literals,json=orderLiterals,proto3" json:"order_literals,omitempty"`
	Deduplicate       bool        `protobuf:"varint,5,opt,name=deduplicate,proto3" json:"deduplicate,omitempty"`
	Cse               bool        `protobuf:"varint,6,opt,name=cse,proto3" json:"cse,omitempty"`
	ConstantOptimizer bool        `protobuf:"varint,7,opt,name=constant_optimizer,json=constantOptimizer,proto3" json:"constant_optimizer,omitempty"`
	Yul               bool        `protobuf:"varint,8,opt,name=yul,proto3" json:"yul,omitempty"`
	YulDetails        *YulDetails `protobuf:"bytes,9,opt,name=yul_details,json=yulDetails,proto3" json:"yul_details,omitempty"`
}

func (x *OptimizerDetails) Reset() {
	*x = OptimizerDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unpack_contract_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptimizerDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptimizerDetails) ProtoMessage() {}

func (x *OptimizerDetails) ProtoReflect() protoreflect.Message {
	mi := &file_unpack_contract_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptimizerDetails.ProtoReflect.Descriptor instead.
func (*OptimizerDetails) Descriptor() ([]byte, []int) {
	return file_unpack_contract_proto_rawDescGZIP(), []int{2}
}

func (x *OptimizerDetails) GetPeephole() bool {
	if x != nil {
		return x.Peephole
	}
	return false
}

func (x *OptimizerDetails) GetInliner() bool {
	if x != nil {
		return x.Inliner
	}
	return false
}

func (x *OptimizerDetails) GetJumpdestRemover() bool {
	if x != nil {
		return x.JumpdestRemover
	}
	return false
}

func (x *OptimizerDetails) GetOrderLiterals() bool {
	if x != nil {
		return x.OrderLiterals
	}
	return false
}

func (x *OptimizerDetails) GetDeduplicate() bool {
	if x != nil {
		return x.Deduplicate
	}
	return false
}

func (x *OptimizerDetails) GetCse() bool {
	if x != nil {
		return x.Cse
	}
	return false
}

func (x *OptimizerDetails) GetConstantOptimizer() bool {
	if x != nil {
		return x.ConstantOptimizer
	}
	return false
}

func (x *OptimizerDetails) GetYul() bool {
	if x != nil {
		return x.Yul
	}
	return false
}

func (x *OptimizerDetails) GetYulDetails() *YulDetails {
	if x != nil {
		return x.YulDetails
	}
	return nil
}

type Optimizer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool              `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Runs    int32             `protobuf:"varint,2,opt,name=runs,proto3" json:"runs,omitempty"`
	Details *OptimizerDetails `protobuf:"bytes,3,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *Optimizer) Reset() {
	*x = Optimizer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unpack_contract_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Optimizer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Optimizer) ProtoMessage() {}

func (x *Optimizer) ProtoReflect() protoreflect.Message {
	mi := &file_unpack_contract_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Optimizer.ProtoReflect.Descriptor instead.
func (*Optimizer) Descriptor() ([]byte, []int) {
	return file_unpack_contract_proto_rawDescGZIP(), []int{3}
}

func (x *Optimizer) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Optimizer) GetRuns() int32 {
	if x != nil {
		return x.Runs
	}
	return 0
}

func (x *Optimizer) GetDetails() *OptimizerDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

type SourceDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comments     []string       `protobuf:"bytes,1,rep,name=comments,proto3" json:"comments,omitempty"`
	Pragmas      []string       `protobuf:"bytes,2,rep,name=pragmas,proto3" json:"pragmas,omitempty"`
	Imports      []string       `protobuf:"bytes,3,rep,name=imports,proto3" json:"imports,omitempty"`
	Inherits     []string       `protobuf:"bytes,4,rep,name=inherits,proto3" json:"inherits,omitempty"`
	IsInterface  bool           `protobuf:"varint,5,opt,name=is_interface,json=isInterface,proto3" json:"is_interface,omitempty"`
	IsLibrary    bool           `protobuf:"varint,6,opt,name=is_library,json=isLibrary,proto3" json:"is_library,omitempty"`
	IsAbstract   bool           `protobuf:"varint,7,opt,name=is_abstract,json=isAbstract,proto3" json:"is_abstract,omitempty"`
	IsContract   bool           `protobuf:"varint,8,opt,name=is_contract,json=isContract,proto3" json:"is_contract,omitempty"`
	SyntaxErrors []*SyntaxError `protobuf:"bytes,9,rep,name=syntax_errors,json=syntaxErrors,proto3" json:"syntax_errors,omitempty"`
}

func (x *SourceDetails) Reset() {
	*x = SourceDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unpack_contract_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceDetails) ProtoMessage() {}

func (x *SourceDetails) ProtoReflect() protoreflect.Message {
	mi := &file_unpack_contract_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceDetails.ProtoReflect.Descriptor instead.
func (*SourceDetails) Descriptor() ([]byte, []int) {
	return file_unpack_contract_proto_rawDescGZIP(), []int{4}
}

func (x *SourceDetails) GetComments() []string {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *SourceDetails) GetPragmas() []string {
	if x != nil {
		return x.Pragmas
	}
	return nil
}

func (x *SourceDetails) GetImports() []string {
	if x != nil {
		return x.Imports
	}
	return nil
}

func (x *SourceDetails) GetInherits() []string {
	if x != nil {
		return x.Inherits
	}
	return nil
}

func (x *SourceDetails) GetIsInterface() bool {
	if x != nil {
		return x.IsInterface
	}
	return false
}

func (x *SourceDetails) GetIsLibrary() bool {
	if x != nil {
		return x.IsLibrary
	}
	return false
}

func (x *SourceDetails) GetIsAbstract() bool {
	if x != nil {
		return x.IsAbstract
	}
	return false
}

func (x *SourceDetails) GetIsContract() bool {
	if x != nil {
		return x.IsContract
	}
	return false
}

func (x *SourceDetails) GetSyntaxErrors() []*SyntaxError {
	if x != nil {
		return x.SyntaxErrors
	}
	return nil
}

type Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid       string         `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name       string         `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Path       string         `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	License    string         `protobuf:"bytes,4,opt,name=license,proto3" json:"license,omitempty"`
	Source     string         `protobuf:"bytes,5,opt,name=source,proto3" json:"source,omitempty"`
	Entrypoint bool           `protobuf:"varint,6,opt,name=entrypoint,proto3" json:"entrypoint,omitempty"`
	Abi        string         `protobuf:"bytes,7,opt,name=abi,proto3" json:"abi,omitempty"`
	Ast        string         `protobuf:"bytes,8,opt,name=ast,proto3" json:"ast,omitempty"`
	Details    *SourceDetails `protobuf:"bytes,13,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *Source) Reset() {
	*x = Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unpack_contract_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Source) ProtoMessage() {}

func (x *Source) ProtoReflect() protoreflect.Message {
	mi := &file_unpack_contract_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Source.ProtoReflect.Descriptor instead.
func (*Source) Descriptor() ([]byte, []int) {
	return file_unpack_contract_proto_rawDescGZIP(), []int{5}
}

func (x *Source) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Source) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Source) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Source) GetLicense() string {
	if x != nil {
		return x.License
	}
	return ""
}

func (x *Source) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Source) GetEntrypoint() bool {
	if x != nil {
		return x.Entrypoint
	}
	return false
}

func (x *Source) GetAbi() string {
	if x != nil {
		return x.Abi
	}
	return ""
}

func (x *Source) GetAst() string {
	if x != nil {
		return x.Ast
	}
	return ""
}

func (x *Source) GetDetails() *SourceDetails {
	if x != nil {
		return x.Details
	}
	return nil
}

type Company struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Symbol  string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Country string `protobuf:"bytes,3,opt,name=country,proto3" json:"country,omitempty"`
}

func (x *Company) Reset() {
	*x = Company{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unpack_contract_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Company) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Company) ProtoMessage() {}

func (x *Company) ProtoReflect() protoreflect.Message {
	mi := &file_unpack_contract_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Company.ProtoReflect.Descriptor instead.
func (*Company) Descriptor() ([]byte, []int) {
	return file_unpack_contract_proto_rawDescGZIP(), []int{6}
}

func (x *Company) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Company) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *Company) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

type Social struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Twitter   string     `protobuf:"bytes,1,opt,name=twitter,proto3" json:"twitter,omitempty"`
	Github    string     `protobuf:"bytes,2,opt,name=github,proto3" json:"github,omitempty"`
	Reddit    string     `protobuf:"bytes,3,opt,name=reddit,proto3" json:"reddit,omitempty"`
	Slack     string     `protobuf:"bytes,4,opt,name=slack,proto3" json:"slack,omitempty"`
	Discord   string     `protobuf:"bytes,5,opt,name=discord,proto3" json:"discord,omitempty"`
	Telegram  string     `protobuf:"bytes,6,opt,name=telegram,proto3" json:"telegram,omitempty"`
	Website   string     `protobuf:"bytes,7,opt,name=website,proto3" json:"website,omitempty"`
	Email     string     `protobuf:"bytes,8,opt,name=email,proto3" json:"email,omitempty"`
	Medium    string     `protobuf:"bytes,9,opt,name=medium,proto3" json:"medium,omitempty"`
	Linkedin  string     `protobuf:"bytes,10,opt,name=linkedin,proto3" json:"linkedin,omitempty"`
	Facebook  string     `protobuf:"bytes,11,opt,name=facebook,proto3" json:"facebook,omitempty"`
	Youtube   string     `protobuf:"bytes,12,opt,name=youtube,proto3" json:"youtube,omitempty"`
	Instagram string     `protobuf:"bytes,13,opt,name=instagram,proto3" json:"instagram,omitempty"`
	Whatsapp  string     `protobuf:"bytes,14,opt,name=whatsapp,proto3" json:"whatsapp,omitempty"`
	Viber     string     `protobuf:"bytes,15,opt,name=viber,proto3" json:"viber,omitempty"`
	Snapchat  string     `protobuf:"bytes,16,opt,name=snapchat,proto3" json:"snapchat,omitempty"`
	Tiktok    string     `protobuf:"bytes,17,opt,name=tiktok,proto3" json:"tiktok,omitempty"`
	Pinterest string     `protobuf:"bytes,18,opt,name=pinterest,proto3" json:"pinterest,omitempty"`
	Tumblr    string     `protobuf:"bytes,19,opt,name=tumblr,proto3" json:"tumblr,omitempty"`
	Twitch    string     `protobuf:"bytes,20,opt,name=twitch,proto3" json:"twitch,omitempty"`
	Cohost    string     `protobuf:"bytes,21,opt,name=cohost,proto3" json:"cohost,omitempty"`
	Companies []*Company `protobuf:"bytes,22,rep,name=companies,proto3" json:"companies,omitempty"`
}

func (x *Social) Reset() {
	*x = Social{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unpack_contract_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Social) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Social) ProtoMessage() {}

func (x *Social) ProtoReflect() protoreflect.Message {
	mi := &file_unpack_contract_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Social.ProtoReflect.Descriptor instead.
func (*Social) Descriptor() ([]byte, []int) {
	return file_unpack_contract_proto_rawDescGZIP(), []int{7}
}

func (x *Social) GetTwitter() string {
	if x != nil {
		return x.Twitter
	}
	return ""
}

func (x *Social) GetGithub() string {
	if x != nil {
		return x.Github
	}
	return ""
}

func (x *Social) GetReddit() string {
	if x != nil {
		return x.Reddit
	}
	return ""
}

func (x *Social) GetSlack() string {
	if x != nil {
		return x.Slack
	}
	return ""
}

func (x *Social) GetDiscord() string {
	if x != nil {
		return x.Discord
	}
	return ""
}

func (x *Social) GetTelegram() string {
	if x != nil {
		return x.Telegram
	}
	return ""
}

func (x *Social) GetWebsite() string {
	if x != nil {
		return x.Website
	}
	return ""
}

func (x *Social) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Social) GetMedium() string {
	if x != nil {
		return x.Medium
	}
	return ""
}

func (x *Social) GetLinkedin() string {
	if x != nil {
		return x.Linkedin
	}
	return ""
}

func (x *Social) GetFacebook() string {
	if x != nil {
		return x.Facebook
	}
	return ""
}

func (x *Social) GetYoutube() string {
	if x != nil {
		return x.Youtube
	}
	return ""
}

func (x *Social) GetInstagram() string {
	if x != nil {
		return x.Instagram
	}
	return ""
}

func (x *Social) GetWhatsapp() string {
	if x != nil {
		return x.Whatsapp
	}
	return ""
}

func (x *Social) GetViber() string {
	if x != nil {
		return x.Viber
	}
	return ""
}

func (x *Social) GetSnapchat() string {
	if x != nil {
		return x.Snapchat
	}
	return ""
}

func (x *Social) GetTiktok() string {
	if x != nil {
		return x.Tiktok
	}
	return ""
}

func (x *Social) GetPinterest() string {
	if x != nil {
		return x.Pinterest
	}
	return ""
}

func (x *Social) GetTumblr() string {
	if x != nil {
		return x.Tumblr
	}
	return ""
}

func (x *Social) GetTwitch() string {
	if x != nil {
		return x.Twitch
	}
	return ""
}

func (x *Social) GetCohost() string {
	if x != nil {
		return x.Cohost
	}
	return ""
}

func (x *Social) GetCompanies() []*Company {
	if x != nil {
		return x.Companies
	}
	return nil
}

type SyntaxError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Line     int32  `protobuf:"varint,1,opt,name=line,proto3" json:"line,omitempty"`
	Column   int32  `protobuf:"varint,2,opt,name=column,proto3" json:"column,omitempty"`
	Message  string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Severity string `protobuf:"bytes,4,opt,name=severity,proto3" json:"severity,omitempty"`
}

func (x *SyntaxError) Reset() {
	*x = SyntaxError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unpack_contract_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SyntaxError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyntaxError) ProtoMessage() {}

func (x *SyntaxError) ProtoReflect() protoreflect.Message {
	mi := &file_unpack_contract_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyntaxError.ProtoReflect.Descriptor instead.
func (*SyntaxError) Descriptor() ([]byte, []int) {
	return file_unpack_contract_proto_rawDescGZIP(), []int{8}
}

func (x *SyntaxError) GetLine() int32 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *SyntaxError) GetColumn() int32 {
	if x != nil {
		return x.Column
	}
	return 0
}

func (x *SyntaxError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SyntaxError) GetSeverity() string {
	if x != nil {
		return x.Severity
	}
	return ""
}

type ConstructorArgument struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type    string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Value   string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Indexed bool   `protobuf:"varint,4,opt,name=indexed,proto3" json:"indexed,omitempty"`
}

func (x *ConstructorArgument) Reset() {
	*x = ConstructorArgument{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unpack_contract_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConstructorArgument) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConstructorArgument) ProtoMessage() {}

func (x *ConstructorArgument) ProtoReflect() protoreflect.Message {
	mi := &file_unpack_contract_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConstructorArgument.ProtoReflect.Descriptor instead.
func (*ConstructorArgument) Descriptor() ([]byte, []int) {
	return file_unpack_contract_proto_rawDescGZIP(), []int{9}
}

func (x *ConstructorArgument) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ConstructorArgument) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ConstructorArgument) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ConstructorArgument) GetIndexed() bool {
	if x != nil {
		return x.Indexed
	}
	return false
}

type Constructor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Abi          string                 `protobuf:"bytes,1,opt,name=abi,proto3" json:"abi,omitempty"`
	SignatureRaw string                 `protobuf:"bytes,2,opt,name=signature_raw,json=signatureRaw,proto3" json:"signature_raw,omitempty"`
	Arguments    []*ConstructorArgument `protobuf:"bytes,3,rep,name=arguments,proto3" json:"arguments,omitempty"`
}

func (x *Constructor) Reset() {
	*x = Constructor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unpack_contract_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Constructor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Constructor) ProtoMessage() {}

func (x *Constructor) ProtoReflect() protoreflect.Message {
	mi := &file_unpack_contract_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Constructor.ProtoReflect.Descriptor instead.
func (*Constructor) Descriptor() ([]byte, []int) {
	return file_unpack_contract_proto_rawDescGZIP(), []int{10}
}

func (x *Constructor) GetAbi() string {
	if x != nil {
		return x.Abi
	}
	return ""
}

func (x *Constructor) GetSignatureRaw() string {
	if x != nil {
		return x.SignatureRaw
	}
	return ""
}

func (x *Constructor) GetArguments() []*ConstructorArgument {
	if x != nil {
		return x.Arguments
	}
	return nil
}

type Contract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid                 string             `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	NetworkId            int64              `protobuf:"varint,2,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	Address              string             `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	Name                 string             `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	BlockNumber          int64              `protobuf:"varint,5,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	BlockHash            string             `protobuf:"bytes,6,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	TransactionHash      string             `protobuf:"bytes,7,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
	ReceiptStatus        ReceiptStatus      `protobuf:"varint,8,opt,name=receipt_status,json=receiptStatus,proto3,enum=txpull.v1.unpack.ReceiptStatus" json:"receipt_status,omitempty"`
	Metadata             *Metadata          `protobuf:"bytes,9,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Optimizer            *Optimizer         `protobuf:"bytes,10,opt,name=optimizer,proto3" json:"optimizer,omitempty"`
	Bytecode             []byte             `protobuf:"bytes,11,opt,name=bytecode,proto3" json:"bytecode,omitempty"`
	BytecodeSize         int64              `protobuf:"varint,12,opt,name=bytecode_size,json=bytecodeSize,proto3" json:"bytecode_size,omitempty"`
	CreationBytecode     []byte             `protobuf:"bytes,13,opt,name=creation_bytecode,json=creationBytecode,proto3" json:"creation_bytecode,omitempty"`
	CreationBytecodeSize int64              `protobuf:"varint,14,opt,name=creation_bytecode_size,json=creationBytecodeSize,proto3" json:"creation_bytecode_size,omitempty"`
	GasUsed              uint64             `protobuf:"varint,15,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`
	EffectiveGasPrice    uint64             `protobuf:"varint,16,opt,name=effective_gas_price,json=effectiveGasPrice,proto3" json:"effective_gas_price,omitempty"`
	VerificationStatus   VerificationStatus `protobuf:"varint,17,opt,name=verification_status,json=verificationStatus,proto3,enum=txpull.v1.unpack.VerificationStatus" json:"verification_status,omitempty"`
	Abi                  string             `protobuf:"bytes,18,opt,name=abi,proto3" json:"abi,omitempty"`
	SourceEntryPoint     string             `protobuf:"bytes,19,opt,name=source_entry_point,json=sourceEntryPoint,proto3" json:"source_entry_point,omitempty"`
	CompilationTargets   map[string]string  `protobuf:"bytes,20,rep,name=compilation_targets,json=compilationTargets,proto3" json:"compilation_targets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Constructor          *Constructor       `protobuf:"bytes,21,opt,name=constructor,proto3" json:"constructor,omitempty"`
	Sources              []*Source          `protobuf:"bytes,22,rep,name=sources,proto3" json:"sources,omitempty"`
	Social               *Social            `protobuf:"bytes,23,opt,name=social,proto3" json:"social,omitempty"`
}

func (x *Contract) Reset() {
	*x = Contract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_unpack_contract_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Contract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Contract) ProtoMessage() {}

func (x *Contract) ProtoReflect() protoreflect.Message {
	mi := &file_unpack_contract_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Contract.ProtoReflect.Descriptor instead.
func (*Contract) Descriptor() ([]byte, []int) {
	return file_unpack_contract_proto_rawDescGZIP(), []int{11}
}

func (x *Contract) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Contract) GetNetworkId() int64 {
	if x != nil {
		return x.NetworkId
	}
	return 0
}

func (x *Contract) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Contract) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Contract) GetBlockNumber() int64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *Contract) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *Contract) GetTransactionHash() string {
	if x != nil {
		return x.TransactionHash
	}
	return ""
}

func (x *Contract) GetReceiptStatus() ReceiptStatus {
	if x != nil {
		return x.ReceiptStatus
	}
	return ReceiptStatus_RS_UNKNOWN
}

func (x *Contract) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Contract) GetOptimizer() *Optimizer {
	if x != nil {
		return x.Optimizer
	}
	return nil
}

func (x *Contract) GetBytecode() []byte {
	if x != nil {
		return x.Bytecode
	}
	return nil
}

func (x *Contract) GetBytecodeSize() int64 {
	if x != nil {
		return x.BytecodeSize
	}
	return 0
}

func (x *Contract) GetCreationBytecode() []byte {
	if x != nil {
		return x.CreationBytecode
	}
	return nil
}

func (x *Contract) GetCreationBytecodeSize() int64 {
	if x != nil {
		return x.CreationBytecodeSize
	}
	return 0
}

func (x *Contract) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *Contract) GetEffectiveGasPrice() uint64 {
	if x != nil {
		return x.EffectiveGasPrice
	}
	return 0
}

func (x *Contract) GetVerificationStatus() VerificationStatus {
	if x != nil {
		return x.VerificationStatus
	}
	return VerificationStatus_VS_UNKNOWN
}

func (x *Contract) GetAbi() string {
	if x != nil {
		return x.Abi
	}
	return ""
}

func (x *Contract) GetSourceEntryPoint() string {
	if x != nil {
		return x.SourceEntryPoint
	}
	return ""
}

func (x *Contract) GetCompilationTargets() map[string]string {
	if x != nil {
		return x.CompilationTargets
	}
	return nil
}

func (x *Contract) GetConstructor() *Constructor {
	if x != nil {
		return x.Constructor
	}
	return nil
}

func (x *Contract) GetSources() []*Source {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *Contract) GetSocial() *Social {
	if x != nil {
		return x.Social
	}
	return nil
}

var File_unpack_contract_proto protoreflect.FileDescriptor

var file_unpack_contract_proto_rawDesc = []byte{
	0x0a, 0x15, 0x75, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x74, 0x78, 0x70, 0x75, 0x6c, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x75, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x22, 0xac, 0x04, 0x0a, 0x08, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x61, 0x77, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f,
	0x6d, 0x70, 0x69, 0x6c, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a,
	0x0b, 0x65, 0x76, 0x6d, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x65, 0x76, 0x6d, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3e,
	0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x22, 0x2e, 0x74, 0x78, 0x70, 0x75, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x75, 0x6e, 0x70,
	0x61, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x32,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x74,
	0x78, 0x70, 0x75, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x75, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x62, 0x6f, 0x72, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x63, 0x62, 0x6f, 0x72, 0x45, 0x6e,
	0x63, 0x6f, 0x64, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x62, 0x6f, 0x72, 0x5f, 0x72, 0x61,
	0x77, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0f, 0x63, 0x62, 0x6f, 0x72, 0x52, 0x61, 0x77, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x62, 0x6f, 0x72, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x62, 0x6f, 0x72, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x70, 0x66, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x69, 0x70, 0x66, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x7a, 0x7a, 0x72, 0x30, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x7a, 0x7a, 0x72, 0x30, 0x12, 0x14, 0x0a, 0x05,
	0x62, 0x7a, 0x7a, 0x72, 0x31, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x62, 0x7a, 0x7a,
	0x72, 0x31, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x29, 0x0a,
	0x10, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x60, 0x0a, 0x0a, 0x59, 0x75, 0x6c, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f,
	0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x41, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x72, 0x5f, 0x73,
	0x74, 0x65, 0x70, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6f, 0x70, 0x74, 0x69,
	0x6d, 0x69, 0x7a, 0x65, 0x72, 0x53, 0x74, 0x65, 0x70, 0x73, 0x22, 0xce, 0x02, 0x0a, 0x10, 0x4f,
	0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x65, 0x65, 0x70, 0x68, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x70, 0x65, 0x65, 0x70, 0x68, 0x6f, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x6a, 0x75, 0x6d, 0x70, 0x64, 0x65, 0x73,
	0x74, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x6a, 0x75, 0x6d, 0x70, 0x64, 0x65, 0x73, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x72,
	0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61,
	0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4c,
	0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x64, 0x75, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x65,
	0x64, 0x75, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x73, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x63, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x79, 0x75,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x79, 0x75, 0x6c, 0x12, 0x3d, 0x0a, 0x0b,
	0x79, 0x75, 0x6c, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x78, 0x70, 0x75, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x75, 0x6e,
	0x70, 0x61, 0x63, 0x6b, 0x2e, 0x59, 0x75, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x0a, 0x79, 0x75, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x77, 0x0a, 0x09, 0x4f,
	0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x72, 0x75, 0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x78, 0x70, 0x75, 0x6c, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x75, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6d,
	0x69, 0x7a, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x22, 0xc3, 0x02, 0x0a, 0x0d, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x61, 0x67, 0x6d, 0x61, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x61, 0x67, 0x6d, 0x61, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x69,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69,
	0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69,
	0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x6c, 0x69, 0x62, 0x72,
	0x61, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x4c, 0x69, 0x62,
	0x72, 0x61, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x61, 0x62, 0x73, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x41, 0x62, 0x73,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x42, 0x0a, 0x0d, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x74, 0x78, 0x70, 0x75, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x75, 0x6e, 0x70, 0x61, 0x63, 0x6b,
	0x2e, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0c, 0x73, 0x79,
	0x6e, 0x74, 0x61, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x22, 0xf5, 0x01, 0x0a, 0x06, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x62, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x61, 0x62, 0x69, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x61, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x78, 0x70, 0x75, 0x6c,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x75, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x2e, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x22, 0x4f, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x22, 0xdb, 0x04, 0x0a, 0x06, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x77, 0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x64, 0x64, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6c, 0x61, 0x63,
	0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x12, 0x18,
	0x0a, 0x07, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6c, 0x65,
	0x67, 0x72, 0x61, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6c, 0x65,
	0x67, 0x72, 0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x61, 0x63, 0x65,
	0x62, 0x6f, 0x6f, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x61, 0x63, 0x65,
	0x62, 0x6f, 0x6f, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x12, 0x1a, 0x0a, 0x08,
	0x77, 0x68, 0x61, 0x74, 0x73, 0x61, 0x70, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x77, 0x68, 0x61, 0x74, 0x73, 0x61, 0x70, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x69, 0x62, 0x65,
	0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x69, 0x62, 0x65, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x63, 0x68, 0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x6e, 0x61, 0x70, 0x63, 0x68, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x69,
	0x6b, 0x74, 0x6f, 0x6b, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x69, 0x6b, 0x74,
	0x6f, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x75, 0x6d, 0x62, 0x6c, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x75, 0x6d, 0x62, 0x6c, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x6f, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x69, 0x65, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x78,
	0x70, 0x75, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x75, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x69, 0x65,
	0x73, 0x22, 0x6f, 0x0a, 0x0b, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x6c, 0x69, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69,
	0x74, 0x79, 0x22, 0x6d, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65,
	0x64, 0x22, 0x89, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x62, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x61, 0x62, 0x69, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x72, 0x61, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x61, 0x77, 0x12, 0x43, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x78,
	0x70, 0x75, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x75, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x2e, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xec, 0x08,
	0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d,
	0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x29, 0x0a,
	0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x46, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1f, 0x2e, 0x74, 0x78, 0x70, 0x75, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x75, 0x6e, 0x70,
	0x61, 0x63, 0x6b, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x36, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x78, 0x70, 0x75, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x75,
	0x6e, 0x70, 0x61, 0x63, 0x6b, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x09, 0x6f, 0x70, 0x74, 0x69,
	0x6d, 0x69, 0x7a, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x78,
	0x70, 0x75, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x75, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x2e, 0x4f,
	0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x65, 0x72, 0x52, 0x09, 0x6f, 0x70, 0x74, 0x69, 0x6d, 0x69,
	0x7a, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x79, 0x74, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x62, 0x79, 0x74, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x62, 0x79, 0x74, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x62, 0x79, 0x74, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x14, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x63,
	0x6f, 0x64, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x61, 0x73, 0x5f, 0x75,
	0x73, 0x65, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x61, 0x73, 0x55, 0x73,
	0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x67, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x11, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x47, 0x61, 0x73, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x55, 0x0a, 0x13, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x24, 0x2e, 0x74, 0x78, 0x70, 0x75, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x75, 0x6e, 0x70, 0x61,
	0x63, 0x6b, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x12, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x62, 0x69,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x62, 0x69, 0x12, 0x2c, 0x0a, 0x12, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x63, 0x0a, 0x13, 0x63, 0x6f, 0x6d,
	0x70, 0x69, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73,
	0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x74, 0x78, 0x70, 0x75, 0x6c, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x75, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70,
	0x69, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x3f,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x78, 0x70, 0x75, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x75, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x32, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x74, 0x78, 0x70, 0x75, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x75, 0x6e, 0x70,
	0x61, 0x63, 0x6b, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x78, 0x70, 0x75, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x75, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x2e, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x06, 0x73,
	0x6f, 0x63, 0x69, 0x61, 0x6c, 0x1a, 0x45, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x3f, 0x0a, 0x0d,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a,
	0x0a, 0x52, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x52, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x0e, 0x0a,
	0x0a, 0x52, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x2a, 0x58, 0x0a,
	0x12, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x56, 0x53, 0x5f, 0x56, 0x45, 0x52, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x56, 0x53, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x49,
	0x41, 0x4c, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x56, 0x53, 0x5f, 0x55, 0x4e, 0x56, 0x45, 0x52,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x78, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x54, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x54, 0x5f, 0x45, 0x52,
	0x43, 0x32, 0x30, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x54, 0x5f, 0x45, 0x52, 0x43, 0x37,
	0x32, 0x31, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x54, 0x5f, 0x45, 0x52, 0x43, 0x31, 0x31,
	0x35, 0x35, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x54, 0x5f, 0x42, 0x45, 0x50, 0x32, 0x30,
	0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x54, 0x5f, 0x42, 0x45, 0x50, 0x37, 0x32, 0x31, 0x10,
	0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x54, 0x5f, 0x42, 0x45, 0x50, 0x31, 0x31, 0x35, 0x35, 0x10,
	0x06, 0x2a, 0x4f, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4c, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4c, 0x5f, 0x53, 0x4f, 0x4c, 0x49,
	0x44, 0x49, 0x54, 0x59, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4c, 0x5f, 0x56, 0x59, 0x50,
	0x45, 0x52, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4c, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x10, 0x03, 0x42, 0x33, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x74, 0x78, 0x70, 0x75, 0x6c, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x64,
	0x69, 0x73, 0x74, 0x2f, 0x67, 0x6f, 0x2f, 0x75, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x3b, 0x75, 0x6e,
	0x70, 0x61, 0x63, 0x6b, 0x5f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_unpack_contract_proto_rawDescOnce sync.Once
	file_unpack_contract_proto_rawDescData = file_unpack_contract_proto_rawDesc
)

func file_unpack_contract_proto_rawDescGZIP() []byte {
	file_unpack_contract_proto_rawDescOnce.Do(func() {
		file_unpack_contract_proto_rawDescData = protoimpl.X.CompressGZIP(file_unpack_contract_proto_rawDescData)
	})
	return file_unpack_contract_proto_rawDescData
}

var file_unpack_contract_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_unpack_contract_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_unpack_contract_proto_goTypes = []interface{}{
	(ReceiptStatus)(0),          // 0: txpull.v1.unpack.ReceiptStatus
	(VerificationStatus)(0),     // 1: txpull.v1.unpack.VerificationStatus
	(ContractType)(0),           // 2: txpull.v1.unpack.ContractType
	(ContractLanguage)(0),       // 3: txpull.v1.unpack.ContractLanguage
	(*Metadata)(nil),            // 4: txpull.v1.unpack.Metadata
	(*YulDetails)(nil),          // 5: txpull.v1.unpack.YulDetails
	(*OptimizerDetails)(nil),    // 6: txpull.v1.unpack.OptimizerDetails
	(*Optimizer)(nil),           // 7: txpull.v1.unpack.Optimizer
	(*SourceDetails)(nil),       // 8: txpull.v1.unpack.SourceDetails
	(*Source)(nil),              // 9: txpull.v1.unpack.Source
	(*Company)(nil),             // 10: txpull.v1.unpack.Company
	(*Social)(nil),              // 11: txpull.v1.unpack.Social
	(*SyntaxError)(nil),         // 12: txpull.v1.unpack.SyntaxError
	(*ConstructorArgument)(nil), // 13: txpull.v1.unpack.ConstructorArgument
	(*Constructor)(nil),         // 14: txpull.v1.unpack.Constructor
	(*Contract)(nil),            // 15: txpull.v1.unpack.Contract
	nil,                         // 16: txpull.v1.unpack.Contract.CompilationTargetsEntry
}
var file_unpack_contract_proto_depIdxs = []int32{
	3,  // 0: txpull.v1.unpack.Metadata.language:type_name -> txpull.v1.unpack.ContractLanguage
	2,  // 1: txpull.v1.unpack.Metadata.type:type_name -> txpull.v1.unpack.ContractType
	5,  // 2: txpull.v1.unpack.OptimizerDetails.yul_details:type_name -> txpull.v1.unpack.YulDetails
	6,  // 3: txpull.v1.unpack.Optimizer.details:type_name -> txpull.v1.unpack.OptimizerDetails
	12, // 4: txpull.v1.unpack.SourceDetails.syntax_errors:type_name -> txpull.v1.unpack.SyntaxError
	8,  // 5: txpull.v1.unpack.Source.details:type_name -> txpull.v1.unpack.SourceDetails
	10, // 6: txpull.v1.unpack.Social.companies:type_name -> txpull.v1.unpack.Company
	13, // 7: txpull.v1.unpack.Constructor.arguments:type_name -> txpull.v1.unpack.ConstructorArgument
	0,  // 8: txpull.v1.unpack.Contract.receipt_status:type_name -> txpull.v1.unpack.ReceiptStatus
	4,  // 9: txpull.v1.unpack.Contract.metadata:type_name -> txpull.v1.unpack.Metadata
	7,  // 10: txpull.v1.unpack.Contract.optimizer:type_name -> txpull.v1.unpack.Optimizer
	1,  // 11: txpull.v1.unpack.Contract.verification_status:type_name -> txpull.v1.unpack.VerificationStatus
	16, // 12: txpull.v1.unpack.Contract.compilation_targets:type_name -> txpull.v1.unpack.Contract.CompilationTargetsEntry
	14, // 13: txpull.v1.unpack.Contract.constructor:type_name -> txpull.v1.unpack.Constructor
	9,  // 14: txpull.v1.unpack.Contract.sources:type_name -> txpull.v1.unpack.Source
	11, // 15: txpull.v1.unpack.Contract.social:type_name -> txpull.v1.unpack.Social
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_unpack_contract_proto_init() }
func file_unpack_contract_proto_init() {
	if File_unpack_contract_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_unpack_contract_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unpack_contract_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YulDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unpack_contract_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptimizerDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unpack_contract_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Optimizer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unpack_contract_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unpack_contract_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unpack_contract_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Company); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unpack_contract_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Social); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unpack_contract_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SyntaxError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unpack_contract_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConstructorArgument); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unpack_contract_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Constructor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_unpack_contract_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Contract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_unpack_contract_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_unpack_contract_proto_goTypes,
		DependencyIndexes: file_unpack_contract_proto_depIdxs,
		EnumInfos:         file_unpack_contract_proto_enumTypes,
		MessageInfos:      file_unpack_contract_proto_msgTypes,
	}.Build()
	File_unpack_contract_proto = out.File
	file_unpack_contract_proto_rawDesc = nil
	file_unpack_contract_proto_goTypes = nil
	file_unpack_contract_proto_depIdxs = nil
}
