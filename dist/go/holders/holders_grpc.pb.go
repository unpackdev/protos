// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package holders

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HoldersClient is the client API for Holders service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HoldersClient interface {
	Filter(ctx context.Context, in *FilterHolderRequest, opts ...grpc.CallOption) (*FilterHolderResponse, error)
	Get(ctx context.Context, in *GetHolderRequest, opts ...grpc.CallOption) (*GetHolderResponse, error)
}

type holdersClient struct {
	cc grpc.ClientConnInterface
}

func NewHoldersClient(cc grpc.ClientConnInterface) HoldersClient {
	return &holdersClient{cc}
}

func (c *holdersClient) Filter(ctx context.Context, in *FilterHolderRequest, opts ...grpc.CallOption) (*FilterHolderResponse, error) {
	out := new(FilterHolderResponse)
	err := c.cc.Invoke(ctx, "/unpack.v1.holders.Holders/Filter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holdersClient) Get(ctx context.Context, in *GetHolderRequest, opts ...grpc.CallOption) (*GetHolderResponse, error) {
	out := new(GetHolderResponse)
	err := c.cc.Invoke(ctx, "/unpack.v1.holders.Holders/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HoldersServer is the server API for Holders service.
// All implementations must embed UnimplementedHoldersServer
// for forward compatibility
type HoldersServer interface {
	Filter(context.Context, *FilterHolderRequest) (*FilterHolderResponse, error)
	Get(context.Context, *GetHolderRequest) (*GetHolderResponse, error)
	mustEmbedUnimplementedHoldersServer()
}

// UnimplementedHoldersServer must be embedded to have forward compatible implementations.
type UnimplementedHoldersServer struct {
}

func (UnimplementedHoldersServer) Filter(context.Context, *FilterHolderRequest) (*FilterHolderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Filter not implemented")
}
func (UnimplementedHoldersServer) Get(context.Context, *GetHolderRequest) (*GetHolderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedHoldersServer) mustEmbedUnimplementedHoldersServer() {}

// UnsafeHoldersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HoldersServer will
// result in compilation errors.
type UnsafeHoldersServer interface {
	mustEmbedUnimplementedHoldersServer()
}

func RegisterHoldersServer(s grpc.ServiceRegistrar, srv HoldersServer) {
	s.RegisterService(&Holders_ServiceDesc, srv)
}

func _Holders_Filter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterHolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HoldersServer).Filter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unpack.v1.holders.Holders/Filter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HoldersServer).Filter(ctx, req.(*FilterHolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Holders_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HoldersServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unpack.v1.holders.Holders/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HoldersServer).Get(ctx, req.(*GetHolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Holders_ServiceDesc is the grpc.ServiceDesc for Holders service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Holders_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "unpack.v1.holders.Holders",
	HandlerType: (*HoldersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Filter",
			Handler:    _Holders_Filter_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Holders_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "holders/holders.proto",
}
