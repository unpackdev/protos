// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.12.4
// source: opcode/codes.proto

package opcode_pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// OpCode represents the set of operation codes (opcodes) used in the Ethereum Virtual Machine (EVM).
// These opcodes are fundamental instructions that the EVM executes.
type OpCode int32

const (
	// STOP halts execution.
	OpCode_STOP OpCode = 0
	// ADD performs addition operation.
	OpCode_ADD OpCode = 1
	// MUL performs multiplication operation.
	OpCode_MUL OpCode = 2
	// SUB performs subtraction operation.
	OpCode_SUB OpCode = 3
	// DIV performs division operation.
	OpCode_DIV OpCode = 4
	// SDIV performs signed division operation.
	OpCode_SDIV OpCode = 5
	// MOD returns the remainder after division.
	OpCode_MOD OpCode = 6
	// SMOD returns the remainder after signed division.
	OpCode_SMOD OpCode = 7
	// ADDMOD performs the modulo addition of two numbers.
	OpCode_ADDMOD OpCode = 8
	// MULMOD performs the modulo multiplication of two numbers.
	OpCode_MULMOD OpCode = 9
	// EXP performs exponential operation.
	OpCode_EXP OpCode = 10
	// SIGNEXTEND extends the sign bit to the left for a signed number.
	OpCode_SIGNEXTEND OpCode = 11
	// LT performs a less-than comparison.
	OpCode_LT OpCode = 16
	// GT performs a greater-than comparison.
	OpCode_GT OpCode = 17
	// SLT performs a signed less-than comparison.
	OpCode_SLT OpCode = 18
	// SGT performs a signed greater-than comparison.
	OpCode_SGT OpCode = 19
	// EQ checks for equality between two values.
	OpCode_EQ OpCode = 20
	// ISZERO checks if a given value is zero.
	OpCode_ISZERO OpCode = 21
	// AND performs a bitwise AND operation.
	OpCode_AND OpCode = 22
	// OR performs a bitwise OR operation.
	OpCode_OR OpCode = 23
	// XOR performs a bitwise XOR operation.
	OpCode_XOR OpCode = 24
	// NOT performs a bitwise NOT operation.
	OpCode_NOT OpCode = 25
	// BYTE returns the Nth byte of the input data.
	OpCode_BYTE OpCode = 26
	// SHL and SHR perform bitwise shift left and shift right operations, respectively.
	OpCode_SHL OpCode = 27
	OpCode_SHR OpCode = 28
	OpCode_SAR OpCode = 29
	// KECCAK256 computes the Keccak-256 hash of input data.
	OpCode_KECCAK256 OpCode = 32
	// ADDRESS returns the address of the current account.
	OpCode_ADDRESS OpCode = 48
	// BALANCE returns the balance of the given address.
	OpCode_BALANCE OpCode = 49
	// ORIGIN returns the address of the original sender of the transaction.
	OpCode_ORIGIN OpCode = 50
	// CALLER returns the address of the account that initiated the call.
	OpCode_CALLER OpCode = 51
	// CALLVALUE returns the value passed with the call.
	OpCode_CALLVALUE OpCode = 52
	// CALLDATALOAD loads a word of data from the call data.
	OpCode_CALLDATALOAD OpCode = 53
	// CALLDATASIZE returns the size of the call data.
	OpCode_CALLDATASIZE OpCode = 54
	// CALLDATACOPY copies a portion of the call data to memory.
	OpCode_CALLDATACOPY OpCode = 55
	// CODESIZE returns the size of the contract's code.
	OpCode_CODESIZE OpCode = 56
	// CODECOPY copies a portion of the contract's code to memory.
	OpCode_CODECOPY OpCode = 57
	// GASPRICE returns the gas price of the transaction.
	OpCode_GASPRICE OpCode = 58
	// EXTCODESIZE returns the size of the code at the given address.
	OpCode_EXTCODESIZE OpCode = 59
	// EXTCODECOPY copies a portion of the code at the given address to memory.
	OpCode_EXTCODECOPY OpCode = 60
	// RETURNDATASIZE returns the size of the return data buffer.
	OpCode_RETURNDATASIZE OpCode = 61
	// RETURNDATACOPY copies a portion of the return data buffer to memory.
	OpCode_RETURNDATACOPY OpCode = 62
	// EXTCODEHASH returns the hash of the code at the given address.
	OpCode_EXTCODEHASH OpCode = 63
	// BLOCKHASH returns the hash of a specific block.
	OpCode_BLOCKHASH OpCode = 64
	// COINBASE returns the address of the block's beneficiary.
	OpCode_COINBASE OpCode = 65
	// TIMESTAMP returns the timestamp of the current block.
	OpCode_TIMESTAMP OpCode = 66
	// NUMBER returns the block number of the current block.
	OpCode_NUMBER OpCode = 67
	// DIFFICULTY returns the difficulty of the current block.
	OpCode_DIFFICULTY OpCode = 68
	// GASLIMIT returns the gas limit of the current block.
	OpCode_GASLIMIT OpCode = 69
	// CHAINID returns the chain ID of the current chain.
	OpCode_CHAINID OpCode = 70
	// SELFBALANCE returns the balance of the current contract.
	OpCode_SELFBALANCE OpCode = 71
	// BASEFEE returns the base fee of the current block.
	OpCode_BASEFEE OpCode = 72
	// BLOBHASH returns the hash of the provided data.
	OpCode_BLOBHASH OpCode = 73
	// POP removes the top item from the stack.
	OpCode_POP OpCode = 80
	// MLOAD loads a word from memory.
	OpCode_MLOAD OpCode = 81
	// MSTORE stores a word in memory.
	OpCode_MSTORE OpCode = 82
	// MSTORE8 stores a byte in memory.
	OpCode_MSTORE8 OpCode = 83
	// SLOAD loads a word from storage.
	OpCode_SLOAD OpCode = 84
	// SSTORE stores a word to storage.
	OpCode_SSTORE OpCode = 85
	// JUMP transfers control to a different part of the code.
	OpCode_JUMP OpCode = 86
	// JUMPI conditionally transfers control to a different part of the code.
	OpCode_JUMPI OpCode = 87
	// PC returns the program counter.
	OpCode_PC OpCode = 88
	// MSIZE returns the size of the active memory in bytes.
	OpCode_MSIZE OpCode = 89
	// GAS returns the available gas.
	OpCode_GAS OpCode = 90
	// JUMPDEST marks a destination for jumps within the code.
	OpCode_JUMPDEST OpCode = 91
	// PUSH1-PUSH32 place the given number of bytes onto the stack.
	OpCode_PUSH0  OpCode = 95
	OpCode_PUSH1  OpCode = 96
	OpCode_PUSH2  OpCode = 97
	OpCode_PUSH3  OpCode = 98
	OpCode_PUSH4  OpCode = 99
	OpCode_PUSH5  OpCode = 100
	OpCode_PUSH6  OpCode = 101
	OpCode_PUSH7  OpCode = 102
	OpCode_PUSH8  OpCode = 103
	OpCode_PUSH9  OpCode = 104
	OpCode_PUSH10 OpCode = 105
	OpCode_PUSH11 OpCode = 106
	OpCode_PUSH12 OpCode = 107
	OpCode_PUSH13 OpCode = 108
	OpCode_PUSH14 OpCode = 109
	OpCode_PUSH15 OpCode = 110
	OpCode_PUSH16 OpCode = 111
	OpCode_PUSH17 OpCode = 112
	OpCode_PUSH18 OpCode = 113
	OpCode_PUSH19 OpCode = 114
	OpCode_PUSH20 OpCode = 115
	OpCode_PUSH21 OpCode = 116
	OpCode_PUSH22 OpCode = 117
	OpCode_PUSH23 OpCode = 118
	OpCode_PUSH24 OpCode = 119
	OpCode_PUSH25 OpCode = 120
	OpCode_PUSH26 OpCode = 121
	OpCode_PUSH27 OpCode = 122
	OpCode_PUSH28 OpCode = 123
	OpCode_PUSH29 OpCode = 124
	OpCode_PUSH30 OpCode = 125
	OpCode_PUSH31 OpCode = 126
	OpCode_PUSH32 OpCode = 127
	// DUP1-DUP16 duplicate the Nth item from the stack.
	OpCode_DUP1  OpCode = 128
	OpCode_DUP2  OpCode = 129
	OpCode_DUP3  OpCode = 130
	OpCode_DUP4  OpCode = 131
	OpCode_DUP5  OpCode = 132
	OpCode_DUP6  OpCode = 133
	OpCode_DUP7  OpCode = 134
	OpCode_DUP8  OpCode = 135
	OpCode_DUP9  OpCode = 136
	OpCode_DUP10 OpCode = 137
	OpCode_DUP11 OpCode = 138
	OpCode_DUP12 OpCode = 139
	OpCode_DUP13 OpCode = 140
	OpCode_DUP14 OpCode = 141
	OpCode_DUP15 OpCode = 142
	OpCode_DUP16 OpCode = 143
	// SWAP1-SWAP16 swaps the top stack item with the Nth item.
	OpCode_SWAP1  OpCode = 144
	OpCode_SWAP2  OpCode = 145
	OpCode_SWAP3  OpCode = 146
	OpCode_SWAP4  OpCode = 147
	OpCode_SWAP5  OpCode = 148
	OpCode_SWAP6  OpCode = 149
	OpCode_SWAP7  OpCode = 150
	OpCode_SWAP8  OpCode = 151
	OpCode_SWAP9  OpCode = 152
	OpCode_SWAP10 OpCode = 153
	OpCode_SWAP11 OpCode = 154
	OpCode_SWAP12 OpCode = 155
	OpCode_SWAP13 OpCode = 156
	OpCode_SWAP14 OpCode = 157
	OpCode_SWAP15 OpCode = 158
	OpCode_SWAP16 OpCode = 159
	// LOG0-LOG4 record a log entry.
	OpCode_LOG0 OpCode = 160
	OpCode_LOG1 OpCode = 161
	OpCode_LOG2 OpCode = 162
	OpCode_LOG3 OpCode = 163
	OpCode_LOG4 OpCode = 164
	// TLOAD and TSTORE provide access to transaction-specific data.
	OpCode_TLOAD  OpCode = 179
	OpCode_TSTORE OpCode = 180
	// CREATE creates a new contract.
	OpCode_CREATE OpCode = 240
	// CALL invokes a message call to another contract.
	OpCode_CALL OpCode = 241
	// CALLCODE invokes a message call to another contract using the current code's context.
	OpCode_CALLCODE OpCode = 242
	// RETURN halts execution and returns data from a contract.
	OpCode_RETURN OpCode = 243
	// DELEGATECALL performs a message call to another contract, preserving the caller's context.
	OpCode_DELEGATECALL OpCode = 244
	// CREATE2 creates a new contract with a specified salt.
	OpCode_CREATE2 OpCode = 245
	// STATICCALL performs a static message call to another contract.
	OpCode_STATICCALL OpCode = 250
	// REVERT stops execution and reverts state changes.
	OpCode_REVERT OpCode = 253
	// INVALID is an invalid opcode.
	OpCode_INVALID OpCode = 254
	// SELFDESTRUCT destroys the current contract and sends remaining funds to an address.
	OpCode_SELFDESTRUCT OpCode = 255
)

// Enum value maps for OpCode.
var (
	OpCode_name = map[int32]string{
		0:   "STOP",
		1:   "ADD",
		2:   "MUL",
		3:   "SUB",
		4:   "DIV",
		5:   "SDIV",
		6:   "MOD",
		7:   "SMOD",
		8:   "ADDMOD",
		9:   "MULMOD",
		10:  "EXP",
		11:  "SIGNEXTEND",
		16:  "LT",
		17:  "GT",
		18:  "SLT",
		19:  "SGT",
		20:  "EQ",
		21:  "ISZERO",
		22:  "AND",
		23:  "OR",
		24:  "XOR",
		25:  "NOT",
		26:  "BYTE",
		27:  "SHL",
		28:  "SHR",
		29:  "SAR",
		32:  "KECCAK256",
		48:  "ADDRESS",
		49:  "BALANCE",
		50:  "ORIGIN",
		51:  "CALLER",
		52:  "CALLVALUE",
		53:  "CALLDATALOAD",
		54:  "CALLDATASIZE",
		55:  "CALLDATACOPY",
		56:  "CODESIZE",
		57:  "CODECOPY",
		58:  "GASPRICE",
		59:  "EXTCODESIZE",
		60:  "EXTCODECOPY",
		61:  "RETURNDATASIZE",
		62:  "RETURNDATACOPY",
		63:  "EXTCODEHASH",
		64:  "BLOCKHASH",
		65:  "COINBASE",
		66:  "TIMESTAMP",
		67:  "NUMBER",
		68:  "DIFFICULTY",
		69:  "GASLIMIT",
		70:  "CHAINID",
		71:  "SELFBALANCE",
		72:  "BASEFEE",
		73:  "BLOBHASH",
		80:  "POP",
		81:  "MLOAD",
		82:  "MSTORE",
		83:  "MSTORE8",
		84:  "SLOAD",
		85:  "SSTORE",
		86:  "JUMP",
		87:  "JUMPI",
		88:  "PC",
		89:  "MSIZE",
		90:  "GAS",
		91:  "JUMPDEST",
		95:  "PUSH0",
		96:  "PUSH1",
		97:  "PUSH2",
		98:  "PUSH3",
		99:  "PUSH4",
		100: "PUSH5",
		101: "PUSH6",
		102: "PUSH7",
		103: "PUSH8",
		104: "PUSH9",
		105: "PUSH10",
		106: "PUSH11",
		107: "PUSH12",
		108: "PUSH13",
		109: "PUSH14",
		110: "PUSH15",
		111: "PUSH16",
		112: "PUSH17",
		113: "PUSH18",
		114: "PUSH19",
		115: "PUSH20",
		116: "PUSH21",
		117: "PUSH22",
		118: "PUSH23",
		119: "PUSH24",
		120: "PUSH25",
		121: "PUSH26",
		122: "PUSH27",
		123: "PUSH28",
		124: "PUSH29",
		125: "PUSH30",
		126: "PUSH31",
		127: "PUSH32",
		128: "DUP1",
		129: "DUP2",
		130: "DUP3",
		131: "DUP4",
		132: "DUP5",
		133: "DUP6",
		134: "DUP7",
		135: "DUP8",
		136: "DUP9",
		137: "DUP10",
		138: "DUP11",
		139: "DUP12",
		140: "DUP13",
		141: "DUP14",
		142: "DUP15",
		143: "DUP16",
		144: "SWAP1",
		145: "SWAP2",
		146: "SWAP3",
		147: "SWAP4",
		148: "SWAP5",
		149: "SWAP6",
		150: "SWAP7",
		151: "SWAP8",
		152: "SWAP9",
		153: "SWAP10",
		154: "SWAP11",
		155: "SWAP12",
		156: "SWAP13",
		157: "SWAP14",
		158: "SWAP15",
		159: "SWAP16",
		160: "LOG0",
		161: "LOG1",
		162: "LOG2",
		163: "LOG3",
		164: "LOG4",
		179: "TLOAD",
		180: "TSTORE",
		240: "CREATE",
		241: "CALL",
		242: "CALLCODE",
		243: "RETURN",
		244: "DELEGATECALL",
		245: "CREATE2",
		250: "STATICCALL",
		253: "REVERT",
		254: "INVALID",
		255: "SELFDESTRUCT",
	}
	OpCode_value = map[string]int32{
		"STOP":           0,
		"ADD":            1,
		"MUL":            2,
		"SUB":            3,
		"DIV":            4,
		"SDIV":           5,
		"MOD":            6,
		"SMOD":           7,
		"ADDMOD":         8,
		"MULMOD":         9,
		"EXP":            10,
		"SIGNEXTEND":     11,
		"LT":             16,
		"GT":             17,
		"SLT":            18,
		"SGT":            19,
		"EQ":             20,
		"ISZERO":         21,
		"AND":            22,
		"OR":             23,
		"XOR":            24,
		"NOT":            25,
		"BYTE":           26,
		"SHL":            27,
		"SHR":            28,
		"SAR":            29,
		"KECCAK256":      32,
		"ADDRESS":        48,
		"BALANCE":        49,
		"ORIGIN":         50,
		"CALLER":         51,
		"CALLVALUE":      52,
		"CALLDATALOAD":   53,
		"CALLDATASIZE":   54,
		"CALLDATACOPY":   55,
		"CODESIZE":       56,
		"CODECOPY":       57,
		"GASPRICE":       58,
		"EXTCODESIZE":    59,
		"EXTCODECOPY":    60,
		"RETURNDATASIZE": 61,
		"RETURNDATACOPY": 62,
		"EXTCODEHASH":    63,
		"BLOCKHASH":      64,
		"COINBASE":       65,
		"TIMESTAMP":      66,
		"NUMBER":         67,
		"DIFFICULTY":     68,
		"GASLIMIT":       69,
		"CHAINID":        70,
		"SELFBALANCE":    71,
		"BASEFEE":        72,
		"BLOBHASH":       73,
		"POP":            80,
		"MLOAD":          81,
		"MSTORE":         82,
		"MSTORE8":        83,
		"SLOAD":          84,
		"SSTORE":         85,
		"JUMP":           86,
		"JUMPI":          87,
		"PC":             88,
		"MSIZE":          89,
		"GAS":            90,
		"JUMPDEST":       91,
		"PUSH0":          95,
		"PUSH1":          96,
		"PUSH2":          97,
		"PUSH3":          98,
		"PUSH4":          99,
		"PUSH5":          100,
		"PUSH6":          101,
		"PUSH7":          102,
		"PUSH8":          103,
		"PUSH9":          104,
		"PUSH10":         105,
		"PUSH11":         106,
		"PUSH12":         107,
		"PUSH13":         108,
		"PUSH14":         109,
		"PUSH15":         110,
		"PUSH16":         111,
		"PUSH17":         112,
		"PUSH18":         113,
		"PUSH19":         114,
		"PUSH20":         115,
		"PUSH21":         116,
		"PUSH22":         117,
		"PUSH23":         118,
		"PUSH24":         119,
		"PUSH25":         120,
		"PUSH26":         121,
		"PUSH27":         122,
		"PUSH28":         123,
		"PUSH29":         124,
		"PUSH30":         125,
		"PUSH31":         126,
		"PUSH32":         127,
		"DUP1":           128,
		"DUP2":           129,
		"DUP3":           130,
		"DUP4":           131,
		"DUP5":           132,
		"DUP6":           133,
		"DUP7":           134,
		"DUP8":           135,
		"DUP9":           136,
		"DUP10":          137,
		"DUP11":          138,
		"DUP12":          139,
		"DUP13":          140,
		"DUP14":          141,
		"DUP15":          142,
		"DUP16":          143,
		"SWAP1":          144,
		"SWAP2":          145,
		"SWAP3":          146,
		"SWAP4":          147,
		"SWAP5":          148,
		"SWAP6":          149,
		"SWAP7":          150,
		"SWAP8":          151,
		"SWAP9":          152,
		"SWAP10":         153,
		"SWAP11":         154,
		"SWAP12":         155,
		"SWAP13":         156,
		"SWAP14":         157,
		"SWAP15":         158,
		"SWAP16":         159,
		"LOG0":           160,
		"LOG1":           161,
		"LOG2":           162,
		"LOG3":           163,
		"LOG4":           164,
		"TLOAD":          179,
		"TSTORE":         180,
		"CREATE":         240,
		"CALL":           241,
		"CALLCODE":       242,
		"RETURN":         243,
		"DELEGATECALL":   244,
		"CREATE2":        245,
		"STATICCALL":     250,
		"REVERT":         253,
		"INVALID":        254,
		"SELFDESTRUCT":   255,
	}
)

func (x OpCode) Enum() *OpCode {
	p := new(OpCode)
	*p = x
	return p
}

func (x OpCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OpCode) Descriptor() protoreflect.EnumDescriptor {
	return file_opcode_codes_proto_enumTypes[0].Descriptor()
}

func (OpCode) Type() protoreflect.EnumType {
	return &file_opcode_codes_proto_enumTypes[0]
}

func (x OpCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OpCode.Descriptor instead.
func (OpCode) EnumDescriptor() ([]byte, []int) {
	return file_opcode_codes_proto_rawDescGZIP(), []int{0}
}

var File_opcode_codes_proto protoreflect.FileDescriptor

var file_opcode_codes_proto_rawDesc = []byte{
	0x0a, 0x12, 0x6f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x2f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x74, 0x78, 0x70, 0x75, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x6f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x2a, 0x83, 0x0e, 0x0a, 0x06, 0x4f, 0x70, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x41,
	0x44, 0x44, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x55, 0x4c, 0x10, 0x02, 0x12, 0x07, 0x0a,
	0x03, 0x53, 0x55, 0x42, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x49, 0x56, 0x10, 0x04, 0x12,
	0x08, 0x0a, 0x04, 0x53, 0x44, 0x49, 0x56, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x4f, 0x44,
	0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x4d, 0x4f, 0x44, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06,
	0x41, 0x44, 0x44, 0x4d, 0x4f, 0x44, 0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x55, 0x4c, 0x4d,
	0x4f, 0x44, 0x10, 0x09, 0x12, 0x07, 0x0a, 0x03, 0x45, 0x58, 0x50, 0x10, 0x0a, 0x12, 0x0e, 0x0a,
	0x0a, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x58, 0x54, 0x45, 0x4e, 0x44, 0x10, 0x0b, 0x12, 0x06, 0x0a,
	0x02, 0x4c, 0x54, 0x10, 0x10, 0x12, 0x06, 0x0a, 0x02, 0x47, 0x54, 0x10, 0x11, 0x12, 0x07, 0x0a,
	0x03, 0x53, 0x4c, 0x54, 0x10, 0x12, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x47, 0x54, 0x10, 0x13, 0x12,
	0x06, 0x0a, 0x02, 0x45, 0x51, 0x10, 0x14, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x53, 0x5a, 0x45, 0x52,
	0x4f, 0x10, 0x15, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e, 0x44, 0x10, 0x16, 0x12, 0x06, 0x0a, 0x02,
	0x4f, 0x52, 0x10, 0x17, 0x12, 0x07, 0x0a, 0x03, 0x58, 0x4f, 0x52, 0x10, 0x18, 0x12, 0x07, 0x0a,
	0x03, 0x4e, 0x4f, 0x54, 0x10, 0x19, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x59, 0x54, 0x45, 0x10, 0x1a,
	0x12, 0x07, 0x0a, 0x03, 0x53, 0x48, 0x4c, 0x10, 0x1b, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x48, 0x52,
	0x10, 0x1c, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x41, 0x52, 0x10, 0x1d, 0x12, 0x0d, 0x0a, 0x09, 0x4b,
	0x45, 0x43, 0x43, 0x41, 0x4b, 0x32, 0x35, 0x36, 0x10, 0x20, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x44,
	0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x30, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x41, 0x4c, 0x41, 0x4e,
	0x43, 0x45, 0x10, 0x31, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x10, 0x32,
	0x12, 0x0a, 0x0a, 0x06, 0x43, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x10, 0x33, 0x12, 0x0d, 0x0a, 0x09,
	0x43, 0x41, 0x4c, 0x4c, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x34, 0x12, 0x10, 0x0a, 0x0c, 0x43,
	0x41, 0x4c, 0x4c, 0x44, 0x41, 0x54, 0x41, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x35, 0x12, 0x10, 0x0a,
	0x0c, 0x43, 0x41, 0x4c, 0x4c, 0x44, 0x41, 0x54, 0x41, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x36, 0x12,
	0x10, 0x0a, 0x0c, 0x43, 0x41, 0x4c, 0x4c, 0x44, 0x41, 0x54, 0x41, 0x43, 0x4f, 0x50, 0x59, 0x10,
	0x37, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x44, 0x45, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x38, 0x12,
	0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x44, 0x45, 0x43, 0x4f, 0x50, 0x59, 0x10, 0x39, 0x12, 0x0c, 0x0a,
	0x08, 0x47, 0x41, 0x53, 0x50, 0x52, 0x49, 0x43, 0x45, 0x10, 0x3a, 0x12, 0x0f, 0x0a, 0x0b, 0x45,
	0x58, 0x54, 0x43, 0x4f, 0x44, 0x45, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x3b, 0x12, 0x0f, 0x0a, 0x0b,
	0x45, 0x58, 0x54, 0x43, 0x4f, 0x44, 0x45, 0x43, 0x4f, 0x50, 0x59, 0x10, 0x3c, 0x12, 0x12, 0x0a,
	0x0e, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x44, 0x41, 0x54, 0x41, 0x53, 0x49, 0x5a, 0x45, 0x10,
	0x3d, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x44, 0x41, 0x54, 0x41, 0x43,
	0x4f, 0x50, 0x59, 0x10, 0x3e, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x58, 0x54, 0x43, 0x4f, 0x44, 0x45,
	0x48, 0x41, 0x53, 0x48, 0x10, 0x3f, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x48,
	0x41, 0x53, 0x48, 0x10, 0x40, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x49, 0x4e, 0x42, 0x41, 0x53,
	0x45, 0x10, 0x41, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50,
	0x10, 0x42, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x43, 0x12, 0x0e,
	0x0a, 0x0a, 0x44, 0x49, 0x46, 0x46, 0x49, 0x43, 0x55, 0x4c, 0x54, 0x59, 0x10, 0x44, 0x12, 0x0c,
	0x0a, 0x08, 0x47, 0x41, 0x53, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x45, 0x12, 0x0b, 0x0a, 0x07,
	0x43, 0x48, 0x41, 0x49, 0x4e, 0x49, 0x44, 0x10, 0x46, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x45, 0x4c,
	0x46, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x47, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x41,
	0x53, 0x45, 0x46, 0x45, 0x45, 0x10, 0x48, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x4c, 0x4f, 0x42, 0x48,
	0x41, 0x53, 0x48, 0x10, 0x49, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x4f, 0x50, 0x10, 0x50, 0x12, 0x09,
	0x0a, 0x05, 0x4d, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x51, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x53, 0x54,
	0x4f, 0x52, 0x45, 0x10, 0x52, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x38,
	0x10, 0x53, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x54, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0x55, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x55, 0x4d,
	0x50, 0x10, 0x56, 0x12, 0x09, 0x0a, 0x05, 0x4a, 0x55, 0x4d, 0x50, 0x49, 0x10, 0x57, 0x12, 0x06,
	0x0a, 0x02, 0x50, 0x43, 0x10, 0x58, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x53, 0x49, 0x5a, 0x45, 0x10,
	0x59, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x41, 0x53, 0x10, 0x5a, 0x12, 0x0c, 0x0a, 0x08, 0x4a, 0x55,
	0x4d, 0x50, 0x44, 0x45, 0x53, 0x54, 0x10, 0x5b, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x55, 0x53, 0x48,
	0x30, 0x10, 0x5f, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x55, 0x53, 0x48, 0x31, 0x10, 0x60, 0x12, 0x09,
	0x0a, 0x05, 0x50, 0x55, 0x53, 0x48, 0x32, 0x10, 0x61, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x55, 0x53,
	0x48, 0x33, 0x10, 0x62, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x55, 0x53, 0x48, 0x34, 0x10, 0x63, 0x12,
	0x09, 0x0a, 0x05, 0x50, 0x55, 0x53, 0x48, 0x35, 0x10, 0x64, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x55,
	0x53, 0x48, 0x36, 0x10, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x55, 0x53, 0x48, 0x37, 0x10, 0x66,
	0x12, 0x09, 0x0a, 0x05, 0x50, 0x55, 0x53, 0x48, 0x38, 0x10, 0x67, 0x12, 0x09, 0x0a, 0x05, 0x50,
	0x55, 0x53, 0x48, 0x39, 0x10, 0x68, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x55, 0x53, 0x48, 0x31, 0x30,
	0x10, 0x69, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x55, 0x53, 0x48, 0x31, 0x31, 0x10, 0x6a, 0x12, 0x0a,
	0x0a, 0x06, 0x50, 0x55, 0x53, 0x48, 0x31, 0x32, 0x10, 0x6b, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x55,
	0x53, 0x48, 0x31, 0x33, 0x10, 0x6c, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x55, 0x53, 0x48, 0x31, 0x34,
	0x10, 0x6d, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x55, 0x53, 0x48, 0x31, 0x35, 0x10, 0x6e, 0x12, 0x0a,
	0x0a, 0x06, 0x50, 0x55, 0x53, 0x48, 0x31, 0x36, 0x10, 0x6f, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x55,
	0x53, 0x48, 0x31, 0x37, 0x10, 0x70, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x55, 0x53, 0x48, 0x31, 0x38,
	0x10, 0x71, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x55, 0x53, 0x48, 0x31, 0x39, 0x10, 0x72, 0x12, 0x0a,
	0x0a, 0x06, 0x50, 0x55, 0x53, 0x48, 0x32, 0x30, 0x10, 0x73, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x55,
	0x53, 0x48, 0x32, 0x31, 0x10, 0x74, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x55, 0x53, 0x48, 0x32, 0x32,
	0x10, 0x75, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x55, 0x53, 0x48, 0x32, 0x33, 0x10, 0x76, 0x12, 0x0a,
	0x0a, 0x06, 0x50, 0x55, 0x53, 0x48, 0x32, 0x34, 0x10, 0x77, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x55,
	0x53, 0x48, 0x32, 0x35, 0x10, 0x78, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x55, 0x53, 0x48, 0x32, 0x36,
	0x10, 0x79, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x55, 0x53, 0x48, 0x32, 0x37, 0x10, 0x7a, 0x12, 0x0a,
	0x0a, 0x06, 0x50, 0x55, 0x53, 0x48, 0x32, 0x38, 0x10, 0x7b, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x55,
	0x53, 0x48, 0x32, 0x39, 0x10, 0x7c, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x55, 0x53, 0x48, 0x33, 0x30,
	0x10, 0x7d, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x55, 0x53, 0x48, 0x33, 0x31, 0x10, 0x7e, 0x12, 0x0a,
	0x0a, 0x06, 0x50, 0x55, 0x53, 0x48, 0x33, 0x32, 0x10, 0x7f, 0x12, 0x09, 0x0a, 0x04, 0x44, 0x55,
	0x50, 0x31, 0x10, 0x80, 0x01, 0x12, 0x09, 0x0a, 0x04, 0x44, 0x55, 0x50, 0x32, 0x10, 0x81, 0x01,
	0x12, 0x09, 0x0a, 0x04, 0x44, 0x55, 0x50, 0x33, 0x10, 0x82, 0x01, 0x12, 0x09, 0x0a, 0x04, 0x44,
	0x55, 0x50, 0x34, 0x10, 0x83, 0x01, 0x12, 0x09, 0x0a, 0x04, 0x44, 0x55, 0x50, 0x35, 0x10, 0x84,
	0x01, 0x12, 0x09, 0x0a, 0x04, 0x44, 0x55, 0x50, 0x36, 0x10, 0x85, 0x01, 0x12, 0x09, 0x0a, 0x04,
	0x44, 0x55, 0x50, 0x37, 0x10, 0x86, 0x01, 0x12, 0x09, 0x0a, 0x04, 0x44, 0x55, 0x50, 0x38, 0x10,
	0x87, 0x01, 0x12, 0x09, 0x0a, 0x04, 0x44, 0x55, 0x50, 0x39, 0x10, 0x88, 0x01, 0x12, 0x0a, 0x0a,
	0x05, 0x44, 0x55, 0x50, 0x31, 0x30, 0x10, 0x89, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x44, 0x55, 0x50,
	0x31, 0x31, 0x10, 0x8a, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x44, 0x55, 0x50, 0x31, 0x32, 0x10, 0x8b,
	0x01, 0x12, 0x0a, 0x0a, 0x05, 0x44, 0x55, 0x50, 0x31, 0x33, 0x10, 0x8c, 0x01, 0x12, 0x0a, 0x0a,
	0x05, 0x44, 0x55, 0x50, 0x31, 0x34, 0x10, 0x8d, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x44, 0x55, 0x50,
	0x31, 0x35, 0x10, 0x8e, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x44, 0x55, 0x50, 0x31, 0x36, 0x10, 0x8f,
	0x01, 0x12, 0x0a, 0x0a, 0x05, 0x53, 0x57, 0x41, 0x50, 0x31, 0x10, 0x90, 0x01, 0x12, 0x0a, 0x0a,
	0x05, 0x53, 0x57, 0x41, 0x50, 0x32, 0x10, 0x91, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x53, 0x57, 0x41,
	0x50, 0x33, 0x10, 0x92, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x53, 0x57, 0x41, 0x50, 0x34, 0x10, 0x93,
	0x01, 0x12, 0x0a, 0x0a, 0x05, 0x53, 0x57, 0x41, 0x50, 0x35, 0x10, 0x94, 0x01, 0x12, 0x0a, 0x0a,
	0x05, 0x53, 0x57, 0x41, 0x50, 0x36, 0x10, 0x95, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x53, 0x57, 0x41,
	0x50, 0x37, 0x10, 0x96, 0x01, 0x12, 0x0a, 0x0a, 0x05, 0x53, 0x57, 0x41, 0x50, 0x38, 0x10, 0x97,
	0x01, 0x12, 0x0a, 0x0a, 0x05, 0x53, 0x57, 0x41, 0x50, 0x39, 0x10, 0x98, 0x01, 0x12, 0x0b, 0x0a,
	0x06, 0x53, 0x57, 0x41, 0x50, 0x31, 0x30, 0x10, 0x99, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x53, 0x57,
	0x41, 0x50, 0x31, 0x31, 0x10, 0x9a, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x53, 0x57, 0x41, 0x50, 0x31,
	0x32, 0x10, 0x9b, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x53, 0x57, 0x41, 0x50, 0x31, 0x33, 0x10, 0x9c,
	0x01, 0x12, 0x0b, 0x0a, 0x06, 0x53, 0x57, 0x41, 0x50, 0x31, 0x34, 0x10, 0x9d, 0x01, 0x12, 0x0b,
	0x0a, 0x06, 0x53, 0x57, 0x41, 0x50, 0x31, 0x35, 0x10, 0x9e, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x53,
	0x57, 0x41, 0x50, 0x31, 0x36, 0x10, 0x9f, 0x01, 0x12, 0x09, 0x0a, 0x04, 0x4c, 0x4f, 0x47, 0x30,
	0x10, 0xa0, 0x01, 0x12, 0x09, 0x0a, 0x04, 0x4c, 0x4f, 0x47, 0x31, 0x10, 0xa1, 0x01, 0x12, 0x09,
	0x0a, 0x04, 0x4c, 0x4f, 0x47, 0x32, 0x10, 0xa2, 0x01, 0x12, 0x09, 0x0a, 0x04, 0x4c, 0x4f, 0x47,
	0x33, 0x10, 0xa3, 0x01, 0x12, 0x09, 0x0a, 0x04, 0x4c, 0x4f, 0x47, 0x34, 0x10, 0xa4, 0x01, 0x12,
	0x0a, 0x0a, 0x05, 0x54, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0xb3, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x54,
	0x53, 0x54, 0x4f, 0x52, 0x45, 0x10, 0xb4, 0x01, 0x12, 0x0b, 0x0a, 0x06, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x10, 0xf0, 0x01, 0x12, 0x09, 0x0a, 0x04, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0xf1, 0x01,
	0x12, 0x0d, 0x0a, 0x08, 0x43, 0x41, 0x4c, 0x4c, 0x43, 0x4f, 0x44, 0x45, 0x10, 0xf2, 0x01, 0x12,
	0x0b, 0x0a, 0x06, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x10, 0xf3, 0x01, 0x12, 0x11, 0x0a, 0x0c,
	0x44, 0x45, 0x4c, 0x45, 0x47, 0x41, 0x54, 0x45, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0xf4, 0x01, 0x12,
	0x0c, 0x0a, 0x07, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x32, 0x10, 0xf5, 0x01, 0x12, 0x0f, 0x0a,
	0x0a, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0xfa, 0x01, 0x12, 0x0b,
	0x0a, 0x06, 0x52, 0x45, 0x56, 0x45, 0x52, 0x54, 0x10, 0xfd, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0xfe, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x53, 0x45, 0x4c,
	0x46, 0x44, 0x45, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x10, 0xff, 0x01, 0x42, 0x33, 0x5a, 0x31,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x78, 0x70, 0x75, 0x6c,
	0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x64, 0x69, 0x73, 0x74, 0x2f, 0x67, 0x6f,
	0x2f, 0x6f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x3b, 0x6f, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x70,
	0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_opcode_codes_proto_rawDescOnce sync.Once
	file_opcode_codes_proto_rawDescData = file_opcode_codes_proto_rawDesc
)

func file_opcode_codes_proto_rawDescGZIP() []byte {
	file_opcode_codes_proto_rawDescOnce.Do(func() {
		file_opcode_codes_proto_rawDescData = protoimpl.X.CompressGZIP(file_opcode_codes_proto_rawDescData)
	})
	return file_opcode_codes_proto_rawDescData
}

var file_opcode_codes_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_opcode_codes_proto_goTypes = []interface{}{
	(OpCode)(0), // 0: txpull.v1.opcode.OpCode
}
var file_opcode_codes_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_opcode_codes_proto_init() }
func file_opcode_codes_proto_init() {
	if File_opcode_codes_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_opcode_codes_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_opcode_codes_proto_goTypes,
		DependencyIndexes: file_opcode_codes_proto_depIdxs,
		EnumInfos:         file_opcode_codes_proto_enumTypes,
	}.Build()
	File_opcode_codes_proto = out.File
	file_opcode_codes_proto_rawDesc = nil
	file_opcode_codes_proto_goTypes = nil
	file_opcode_codes_proto_depIdxs = nil
}
