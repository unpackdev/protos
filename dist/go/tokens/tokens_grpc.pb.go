// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package tokens

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TokensClient is the client API for Tokens service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TokensClient interface {
	Filter(ctx context.Context, in *FilterTokensRequest, opts ...grpc.CallOption) (*FilterTokensResponse, error)
	Get(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*GetTokenResponse, error)
	// Queue new token to the network. Response will only return acknowledgements, not actual
	// token.
	Queue(ctx context.Context, in *QueueTokenRequest, opts ...grpc.CallOption) (*QueueTokenResponse, error)
	// Queue new token to the network and wait for network response about the token
	QueueAndWait(ctx context.Context, opts ...grpc.CallOption) (Tokens_QueueAndWaitClient, error)
	Subscribe(ctx context.Context, in *SubscribeTokensRequest, opts ...grpc.CallOption) (Tokens_SubscribeClient, error)
}

type tokensClient struct {
	cc grpc.ClientConnInterface
}

func NewTokensClient(cc grpc.ClientConnInterface) TokensClient {
	return &tokensClient{cc}
}

func (c *tokensClient) Filter(ctx context.Context, in *FilterTokensRequest, opts ...grpc.CallOption) (*FilterTokensResponse, error) {
	out := new(FilterTokensResponse)
	err := c.cc.Invoke(ctx, "/unpack.v1.tokens.Tokens/Filter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokensClient) Get(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*GetTokenResponse, error) {
	out := new(GetTokenResponse)
	err := c.cc.Invoke(ctx, "/unpack.v1.tokens.Tokens/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokensClient) Queue(ctx context.Context, in *QueueTokenRequest, opts ...grpc.CallOption) (*QueueTokenResponse, error) {
	out := new(QueueTokenResponse)
	err := c.cc.Invoke(ctx, "/unpack.v1.tokens.Tokens/Queue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tokensClient) QueueAndWait(ctx context.Context, opts ...grpc.CallOption) (Tokens_QueueAndWaitClient, error) {
	stream, err := c.cc.NewStream(ctx, &Tokens_ServiceDesc.Streams[0], "/unpack.v1.tokens.Tokens/QueueAndWait", opts...)
	if err != nil {
		return nil, err
	}
	x := &tokensQueueAndWaitClient{stream}
	return x, nil
}

type Tokens_QueueAndWaitClient interface {
	Send(*QueueTokenRequest) error
	Recv() (*SubscriptionTokenResponse, error)
	grpc.ClientStream
}

type tokensQueueAndWaitClient struct {
	grpc.ClientStream
}

func (x *tokensQueueAndWaitClient) Send(m *QueueTokenRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tokensQueueAndWaitClient) Recv() (*SubscriptionTokenResponse, error) {
	m := new(SubscriptionTokenResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tokensClient) Subscribe(ctx context.Context, in *SubscribeTokensRequest, opts ...grpc.CallOption) (Tokens_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &Tokens_ServiceDesc.Streams[1], "/unpack.v1.tokens.Tokens/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &tokensSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Tokens_SubscribeClient interface {
	Recv() (*SubscriptionTokenResponse, error)
	grpc.ClientStream
}

type tokensSubscribeClient struct {
	grpc.ClientStream
}

func (x *tokensSubscribeClient) Recv() (*SubscriptionTokenResponse, error) {
	m := new(SubscriptionTokenResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TokensServer is the server API for Tokens service.
// All implementations must embed UnimplementedTokensServer
// for forward compatibility
type TokensServer interface {
	Filter(context.Context, *FilterTokensRequest) (*FilterTokensResponse, error)
	Get(context.Context, *GetTokenRequest) (*GetTokenResponse, error)
	// Queue new token to the network. Response will only return acknowledgements, not actual
	// token.
	Queue(context.Context, *QueueTokenRequest) (*QueueTokenResponse, error)
	// Queue new token to the network and wait for network response about the token
	QueueAndWait(Tokens_QueueAndWaitServer) error
	Subscribe(*SubscribeTokensRequest, Tokens_SubscribeServer) error
	mustEmbedUnimplementedTokensServer()
}

// UnimplementedTokensServer must be embedded to have forward compatible implementations.
type UnimplementedTokensServer struct {
}

func (UnimplementedTokensServer) Filter(context.Context, *FilterTokensRequest) (*FilterTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Filter not implemented")
}
func (UnimplementedTokensServer) Get(context.Context, *GetTokenRequest) (*GetTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedTokensServer) Queue(context.Context, *QueueTokenRequest) (*QueueTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Queue not implemented")
}
func (UnimplementedTokensServer) QueueAndWait(Tokens_QueueAndWaitServer) error {
	return status.Errorf(codes.Unimplemented, "method QueueAndWait not implemented")
}
func (UnimplementedTokensServer) Subscribe(*SubscribeTokensRequest, Tokens_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedTokensServer) mustEmbedUnimplementedTokensServer() {}

// UnsafeTokensServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TokensServer will
// result in compilation errors.
type UnsafeTokensServer interface {
	mustEmbedUnimplementedTokensServer()
}

func RegisterTokensServer(s grpc.ServiceRegistrar, srv TokensServer) {
	s.RegisterService(&Tokens_ServiceDesc, srv)
}

func _Tokens_Filter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterTokensRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokensServer).Filter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unpack.v1.tokens.Tokens/Filter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokensServer).Filter(ctx, req.(*FilterTokensRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tokens_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokensServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unpack.v1.tokens.Tokens/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokensServer).Get(ctx, req.(*GetTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tokens_Queue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokensServer).Queue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/unpack.v1.tokens.Tokens/Queue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokensServer).Queue(ctx, req.(*QueueTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tokens_QueueAndWait_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TokensServer).QueueAndWait(&tokensQueueAndWaitServer{stream})
}

type Tokens_QueueAndWaitServer interface {
	Send(*SubscriptionTokenResponse) error
	Recv() (*QueueTokenRequest, error)
	grpc.ServerStream
}

type tokensQueueAndWaitServer struct {
	grpc.ServerStream
}

func (x *tokensQueueAndWaitServer) Send(m *SubscriptionTokenResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tokensQueueAndWaitServer) Recv() (*QueueTokenRequest, error) {
	m := new(QueueTokenRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Tokens_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeTokensRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TokensServer).Subscribe(m, &tokensSubscribeServer{stream})
}

type Tokens_SubscribeServer interface {
	Send(*SubscriptionTokenResponse) error
	grpc.ServerStream
}

type tokensSubscribeServer struct {
	grpc.ServerStream
}

func (x *tokensSubscribeServer) Send(m *SubscriptionTokenResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Tokens_ServiceDesc is the grpc.ServiceDesc for Tokens service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tokens_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "unpack.v1.tokens.Tokens",
	HandlerType: (*TokensServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Filter",
			Handler:    _Tokens_Filter_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Tokens_Get_Handler,
		},
		{
			MethodName: "Queue",
			Handler:    _Tokens_Queue_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "QueueAndWait",
			Handler:       _Tokens_QueueAndWait_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _Tokens_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "tokens/tokens.proto",
}
