// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package solgo_pb

import (
	context "context"
	health "github.com/txpull/protos/dist/go/health"
	metadata "github.com/txpull/protos/dist/go/metadata"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SolGoServiceClient is the client API for SolGoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SolGoServiceClient interface {
	GetMetadata(ctx context.Context, in *metadata.MetadataRequest, opts ...grpc.CallOption) (*metadata.MetadataResponse, error)
	GetHealth(ctx context.Context, in *health.HealthRequest, opts ...grpc.CallOption) (*health.HealthResponse, error)
}

type solGoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSolGoServiceClient(cc grpc.ClientConnInterface) SolGoServiceClient {
	return &solGoServiceClient{cc}
}

func (c *solGoServiceClient) GetMetadata(ctx context.Context, in *metadata.MetadataRequest, opts ...grpc.CallOption) (*metadata.MetadataResponse, error) {
	out := new(metadata.MetadataResponse)
	err := c.cc.Invoke(ctx, "/txpull.v1.solgo.SolGoService/GetMetadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *solGoServiceClient) GetHealth(ctx context.Context, in *health.HealthRequest, opts ...grpc.CallOption) (*health.HealthResponse, error) {
	out := new(health.HealthResponse)
	err := c.cc.Invoke(ctx, "/txpull.v1.solgo.SolGoService/GetHealth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SolGoServiceServer is the server API for SolGoService service.
// All implementations must embed UnimplementedSolGoServiceServer
// for forward compatibility
type SolGoServiceServer interface {
	GetMetadata(context.Context, *metadata.MetadataRequest) (*metadata.MetadataResponse, error)
	GetHealth(context.Context, *health.HealthRequest) (*health.HealthResponse, error)
	mustEmbedUnimplementedSolGoServiceServer()
}

// UnimplementedSolGoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSolGoServiceServer struct {
}

func (UnimplementedSolGoServiceServer) GetMetadata(context.Context, *metadata.MetadataRequest) (*metadata.MetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetadata not implemented")
}
func (UnimplementedSolGoServiceServer) GetHealth(context.Context, *health.HealthRequest) (*health.HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHealth not implemented")
}
func (UnimplementedSolGoServiceServer) mustEmbedUnimplementedSolGoServiceServer() {}

// UnsafeSolGoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SolGoServiceServer will
// result in compilation errors.
type UnsafeSolGoServiceServer interface {
	mustEmbedUnimplementedSolGoServiceServer()
}

func RegisterSolGoServiceServer(s grpc.ServiceRegistrar, srv SolGoServiceServer) {
	s.RegisterService(&SolGoService_ServiceDesc, srv)
}

func _SolGoService_GetMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(metadata.MetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SolGoServiceServer).GetMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/txpull.v1.solgo.SolGoService/GetMetadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SolGoServiceServer).GetMetadata(ctx, req.(*metadata.MetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SolGoService_GetHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(health.HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SolGoServiceServer).GetHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/txpull.v1.solgo.SolGoService/GetHealth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SolGoServiceServer).GetHealth(ctx, req.(*health.HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SolGoService_ServiceDesc is the grpc.ServiceDesc for SolGoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SolGoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "txpull.v1.solgo.SolGoService",
	HandlerType: (*SolGoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMetadata",
			Handler:    _SolGoService_GetMetadata_Handler,
		},
		{
			MethodName: "GetHealth",
			Handler:    _SolGoService_GetHealth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "solgo/services.proto",
}
