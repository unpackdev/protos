// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.12.4
// source: ast/node.proto

package ast_pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LibraryName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                  string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	NodeType              NodeType `protobuf:"varint,3,opt,name=node_type,json=nodeType,proto3,enum=txpull.v1.ast.NodeType" json:"node_type,omitempty"`
	ReferencedDeclaration int64    `protobuf:"varint,4,opt,name=referenced_declaration,json=referencedDeclaration,proto3" json:"referenced_declaration,omitempty"`
	Src                   *Src     `protobuf:"bytes,5,opt,name=src,proto3" json:"src,omitempty"`
}

func (x *LibraryName) Reset() {
	*x = LibraryName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ast_node_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LibraryName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LibraryName) ProtoMessage() {}

func (x *LibraryName) ProtoReflect() protoreflect.Message {
	mi := &file_ast_node_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LibraryName.ProtoReflect.Descriptor instead.
func (*LibraryName) Descriptor() ([]byte, []int) {
	return file_ast_node_proto_rawDescGZIP(), []int{0}
}

func (x *LibraryName) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LibraryName) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LibraryName) GetNodeType() NodeType {
	if x != nil {
		return x.NodeType
	}
	return NodeType_NT_DEFAULT
}

func (x *LibraryName) GetReferencedDeclaration() int64 {
	if x != nil {
		return x.ReferencedDeclaration
	}
	return 0
}

func (x *LibraryName) GetSrc() *Src {
	if x != nil {
		return x.Src
	}
	return nil
}

type BaseContractName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                  string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	NodeType              NodeType `protobuf:"varint,3,opt,name=node_type,json=nodeType,proto3,enum=txpull.v1.ast.NodeType" json:"node_type,omitempty"`
	ReferencedDeclaration int64    `protobuf:"varint,4,opt,name=referenced_declaration,json=referencedDeclaration,proto3" json:"referenced_declaration,omitempty"`
	Src                   *Src     `protobuf:"bytes,5,opt,name=src,proto3" json:"src,omitempty"`
}

func (x *BaseContractName) Reset() {
	*x = BaseContractName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ast_node_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseContractName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseContractName) ProtoMessage() {}

func (x *BaseContractName) ProtoReflect() protoreflect.Message {
	mi := &file_ast_node_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseContractName.ProtoReflect.Descriptor instead.
func (*BaseContractName) Descriptor() ([]byte, []int) {
	return file_ast_node_proto_rawDescGZIP(), []int{1}
}

func (x *BaseContractName) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BaseContractName) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BaseContractName) GetNodeType() NodeType {
	if x != nil {
		return x.NodeType
	}
	return NodeType_NT_DEFAULT
}

func (x *BaseContractName) GetReferencedDeclaration() int64 {
	if x != nil {
		return x.ReferencedDeclaration
	}
	return 0
}

func (x *BaseContractName) GetSrc() *Src {
	if x != nil {
		return x.Src
	}
	return nil
}

type BaseContract struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	NodeType NodeType          `protobuf:"varint,2,opt,name=node_type,json=nodeType,proto3,enum=txpull.v1.ast.NodeType" json:"node_type,omitempty"`
	BaseName *BaseContractName `protobuf:"bytes,3,opt,name=base_name,json=baseName,proto3" json:"base_name,omitempty"`
	Src      *Src              `protobuf:"bytes,4,opt,name=src,proto3" json:"src,omitempty"`
}

func (x *BaseContract) Reset() {
	*x = BaseContract{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ast_node_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseContract) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseContract) ProtoMessage() {}

func (x *BaseContract) ProtoReflect() protoreflect.Message {
	mi := &file_ast_node_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseContract.ProtoReflect.Descriptor instead.
func (*BaseContract) Descriptor() ([]byte, []int) {
	return file_ast_node_proto_rawDescGZIP(), []int{2}
}

func (x *BaseContract) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BaseContract) GetNodeType() NodeType {
	if x != nil {
		return x.NodeType
	}
	return NodeType_NT_DEFAULT
}

func (x *BaseContract) GetBaseName() *BaseContractName {
	if x != nil {
		return x.BaseName
	}
	return nil
}

func (x *BaseContract) GetSrc() *Src {
	if x != nil {
		return x.Src
	}
	return nil
}

type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                      int64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                    string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	NodeType                NodeType          `protobuf:"varint,3,opt,name=node_type,json=nodeType,proto3,enum=txpull.v1.ast.NodeType" json:"node_type,omitempty"`
	Src                     *Src              `protobuf:"bytes,4,opt,name=src,proto3" json:"src,omitempty"`
	Abstract                bool              `protobuf:"varint,5,opt,name=abstract,proto3" json:"abstract,omitempty"`
	Kind                    NodeType          `protobuf:"varint,6,opt,name=kind,proto3,enum=txpull.v1.ast.NodeType" json:"kind,omitempty"`
	FullyImplemented        bool              `protobuf:"varint,7,opt,name=fully_implemented,json=fullyImplemented,proto3" json:"fully_implemented,omitempty"`
	Implemented             bool              `protobuf:"varint,8,opt,name=implemented,proto3" json:"implemented,omitempty"`
	LinearizedBaseContracts []int64           `protobuf:"varint,9,rep,packed,name=linearized_base_contracts,json=linearizedBaseContracts,proto3" json:"linearized_base_contracts,omitempty"`
	Literals                []string          `protobuf:"bytes,10,rep,name=literals,proto3" json:"literals,omitempty"`
	Nodes                   []*Node           `protobuf:"bytes,11,rep,name=nodes,proto3" json:"nodes,omitempty"`
	Visibility              Visibility        `protobuf:"varint,12,opt,name=visibility,proto3,enum=txpull.v1.ast.Visibility" json:"visibility,omitempty"`
	StateMutability         Mutability        `protobuf:"varint,13,opt,name=state_mutability,json=stateMutability,proto3,enum=txpull.v1.ast.Mutability" json:"state_mutability,omitempty"`
	Virtual                 bool              `protobuf:"varint,14,opt,name=virtual,proto3" json:"virtual,omitempty"`
	Parameters              *ParametersList   `protobuf:"bytes,15,opt,name=parameters,proto3" json:"parameters,omitempty"`
	ReturnParameters        *ParametersList   `protobuf:"bytes,16,opt,name=return_parameters,json=returnParameters,proto3" json:"return_parameters,omitempty"`
	Body                    *Body             `protobuf:"bytes,17,opt,name=body,proto3" json:"body,omitempty"`
	AbsolutePath            string            `protobuf:"bytes,18,opt,name=absolute_path,json=absolutePath,proto3" json:"absolute_path,omitempty"`
	File                    string            `protobuf:"bytes,19,opt,name=file,proto3" json:"file,omitempty"`
	Scope                   int64             `protobuf:"varint,20,opt,name=scope,proto3" json:"scope,omitempty"`
	SourceUnit              int64             `protobuf:"varint,21,opt,name=source_unit,json=sourceUnit,proto3" json:"source_unit,omitempty"`
	SymbolAliases           []string          `protobuf:"bytes,22,rep,name=symbol_aliases,json=symbolAliases,proto3" json:"symbol_aliases,omitempty"`
	UnitAlias               string            `protobuf:"bytes,23,opt,name=unit_alias,json=unitAlias,proto3" json:"unit_alias,omitempty"`
	LibraryName             *LibraryName      `protobuf:"bytes,24,opt,name=library_name,json=libraryName,proto3" json:"library_name,omitempty"`
	TypeName                *TypeName         `protobuf:"bytes,25,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	IsConstant              bool              `protobuf:"varint,26,opt,name=is_constant,json=isConstant,proto3" json:"is_constant,omitempty"`
	IsStateVariable         bool              `protobuf:"varint,27,opt,name=is_state_variable,json=isStateVariable,proto3" json:"is_state_variable,omitempty"`
	TypeDescriptions        *TypeDescriptions `protobuf:"bytes,28,opt,name=type_descriptions,json=typeDescriptions,proto3" json:"type_descriptions,omitempty"`
	StorageLocation         StorageLocation   `protobuf:"varint,29,opt,name=storage_location,json=storageLocation,proto3,enum=txpull.v1.ast.StorageLocation" json:"storage_location,omitempty"`
	Anonymous               bool              `protobuf:"varint,30,opt,name=anonymous,proto3" json:"anonymous,omitempty"`
	ContractDependencies    []int64           `protobuf:"varint,31,rep,packed,name=contract_dependencies,json=contractDependencies,proto3" json:"contract_dependencies,omitempty"`
	BaseContracts           []*BaseContract   `protobuf:"bytes,32,rep,name=base_contracts,json=baseContracts,proto3" json:"base_contracts,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ast_node_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_ast_node_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_ast_node_proto_rawDescGZIP(), []int{3}
}

func (x *Node) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Node) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Node) GetNodeType() NodeType {
	if x != nil {
		return x.NodeType
	}
	return NodeType_NT_DEFAULT
}

func (x *Node) GetSrc() *Src {
	if x != nil {
		return x.Src
	}
	return nil
}

func (x *Node) GetAbstract() bool {
	if x != nil {
		return x.Abstract
	}
	return false
}

func (x *Node) GetKind() NodeType {
	if x != nil {
		return x.Kind
	}
	return NodeType_NT_DEFAULT
}

func (x *Node) GetFullyImplemented() bool {
	if x != nil {
		return x.FullyImplemented
	}
	return false
}

func (x *Node) GetImplemented() bool {
	if x != nil {
		return x.Implemented
	}
	return false
}

func (x *Node) GetLinearizedBaseContracts() []int64 {
	if x != nil {
		return x.LinearizedBaseContracts
	}
	return nil
}

func (x *Node) GetLiterals() []string {
	if x != nil {
		return x.Literals
	}
	return nil
}

func (x *Node) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *Node) GetVisibility() Visibility {
	if x != nil {
		return x.Visibility
	}
	return Visibility_V_DEFAULT
}

func (x *Node) GetStateMutability() Mutability {
	if x != nil {
		return x.StateMutability
	}
	return Mutability_M_DEFAULT
}

func (x *Node) GetVirtual() bool {
	if x != nil {
		return x.Virtual
	}
	return false
}

func (x *Node) GetParameters() *ParametersList {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *Node) GetReturnParameters() *ParametersList {
	if x != nil {
		return x.ReturnParameters
	}
	return nil
}

func (x *Node) GetBody() *Body {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *Node) GetAbsolutePath() string {
	if x != nil {
		return x.AbsolutePath
	}
	return ""
}

func (x *Node) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *Node) GetScope() int64 {
	if x != nil {
		return x.Scope
	}
	return 0
}

func (x *Node) GetSourceUnit() int64 {
	if x != nil {
		return x.SourceUnit
	}
	return 0
}

func (x *Node) GetSymbolAliases() []string {
	if x != nil {
		return x.SymbolAliases
	}
	return nil
}

func (x *Node) GetUnitAlias() string {
	if x != nil {
		return x.UnitAlias
	}
	return ""
}

func (x *Node) GetLibraryName() *LibraryName {
	if x != nil {
		return x.LibraryName
	}
	return nil
}

func (x *Node) GetTypeName() *TypeName {
	if x != nil {
		return x.TypeName
	}
	return nil
}

func (x *Node) GetIsConstant() bool {
	if x != nil {
		return x.IsConstant
	}
	return false
}

func (x *Node) GetIsStateVariable() bool {
	if x != nil {
		return x.IsStateVariable
	}
	return false
}

func (x *Node) GetTypeDescriptions() *TypeDescriptions {
	if x != nil {
		return x.TypeDescriptions
	}
	return nil
}

func (x *Node) GetStorageLocation() StorageLocation {
	if x != nil {
		return x.StorageLocation
	}
	return StorageLocation_ST_UNKNOWN
}

func (x *Node) GetAnonymous() bool {
	if x != nil {
		return x.Anonymous
	}
	return false
}

func (x *Node) GetContractDependencies() []int64 {
	if x != nil {
		return x.ContractDependencies
	}
	return nil
}

func (x *Node) GetBaseContracts() []*BaseContract {
	if x != nil {
		return x.BaseContracts
	}
	return nil
}

type RootNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes []*Node `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *RootNode) Reset() {
	*x = RootNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ast_node_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RootNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RootNode) ProtoMessage() {}

func (x *RootNode) ProtoReflect() protoreflect.Message {
	mi := &file_ast_node_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RootNode.ProtoReflect.Descriptor instead.
func (*RootNode) Descriptor() ([]byte, []int) {
	return file_ast_node_proto_rawDescGZIP(), []int{4}
}

func (x *RootNode) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

var File_ast_node_proto protoreflect.FileDescriptor

var file_ast_node_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x61, 0x73, 0x74, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0d, 0x74, 0x78, 0x70, 0x75, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x1a,
	0x0f, 0x61, 0x73, 0x74, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0d, 0x61, 0x73, 0x74, 0x2f, 0x73, 0x72, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x14, 0x61, 0x73, 0x74, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x61, 0x73, 0x74, 0x2f, 0x62, 0x6f, 0x64, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc4, 0x01, 0x0a, 0x0b, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x74,
	0x78, 0x70, 0x75, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x35, 0x0a, 0x16, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x64, 0x65,
	0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x15, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x44, 0x65, 0x63, 0x6c, 0x61,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x78, 0x70, 0x75, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x61, 0x73, 0x74, 0x2e, 0x53, 0x72, 0x63, 0x52, 0x03, 0x73, 0x72, 0x63, 0x22, 0xc9, 0x01, 0x0a,
	0x10, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x74, 0x78, 0x70, 0x75, 0x6c,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x16, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x74, 0x78, 0x70, 0x75, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e,
	0x53, 0x72, 0x63, 0x52, 0x03, 0x73, 0x72, 0x63, 0x22, 0xb8, 0x01, 0x0a, 0x0c, 0x42, 0x61, 0x73,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x09, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x74,
	0x78, 0x70, 0x75, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x3c, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x78, 0x70, 0x75, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x61,
	0x73, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x03, 0x73, 0x72, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x78, 0x70,
	0x75, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x53, 0x72, 0x63, 0x52, 0x03,
	0x73, 0x72, 0x63, 0x22, 0x98, 0x0b, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x34, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x74, 0x78, 0x70, 0x75, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x61, 0x73, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6e, 0x6f,
	0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x78, 0x70, 0x75, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x61, 0x73, 0x74, 0x2e, 0x53, 0x72, 0x63, 0x52, 0x03, 0x73, 0x72, 0x63, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x74, 0x78, 0x70, 0x75, 0x6c, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x5f, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x65,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x19, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x69, 0x7a,
	0x65, 0x64, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x03, 0x52, 0x17, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x69,
	0x7a, 0x65, 0x64, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x73, 0x12, 0x29, 0x0a, 0x05,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x78,
	0x70, 0x75, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x74, 0x78,
	0x70, 0x75, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x56, 0x69, 0x73, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x44, 0x0a, 0x10, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x75, 0x74, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x74,
	0x78, 0x70, 0x75, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4d, 0x75, 0x74,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x75,
	0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x69, 0x72, 0x74,
	0x75, 0x61, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x76, 0x69, 0x72, 0x74, 0x75,
	0x61, 0x6c, 0x12, 0x3d, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74, 0x78, 0x70, 0x75, 0x6c, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x4a, 0x0a, 0x11, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74,
	0x78, 0x70, 0x75, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x10, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x27, 0x0a,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x78,
	0x70, 0x75, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x42, 0x6f, 0x64, 0x79,
	0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61,
	0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x3d, 0x0a, 0x0c,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x78, 0x70, 0x75, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x61,
	0x73, 0x74, 0x2e, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0b,
	0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x74, 0x78, 0x70, 0x75, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x4c,
	0x0a, 0x11, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x78, 0x70, 0x75,
	0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x10, 0x74, 0x79, 0x70, 0x65,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x49, 0x0a, 0x10,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x74, 0x78, 0x70, 0x75, 0x6c, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6e, 0x6f, 0x6e, 0x79,
	0x6d, 0x6f, 0x75, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x6e, 0x6f, 0x6e,
	0x79, 0x6d, 0x6f, 0x75, 0x73, 0x12, 0x33, 0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x5f, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x1f,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x0e, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x18, 0x20, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x78, 0x70, 0x75, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x61,
	0x73, 0x74, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52,
	0x0d, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x22, 0x35,
	0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x78, 0x70, 0x75,
	0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x78, 0x70, 0x75, 0x6c, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2f, 0x64, 0x69, 0x73, 0x74, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x73, 0x74, 0x3b, 0x61, 0x73,
	0x74, 0x5f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ast_node_proto_rawDescOnce sync.Once
	file_ast_node_proto_rawDescData = file_ast_node_proto_rawDesc
)

func file_ast_node_proto_rawDescGZIP() []byte {
	file_ast_node_proto_rawDescOnce.Do(func() {
		file_ast_node_proto_rawDescData = protoimpl.X.CompressGZIP(file_ast_node_proto_rawDescData)
	})
	return file_ast_node_proto_rawDescData
}

var file_ast_node_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_ast_node_proto_goTypes = []interface{}{
	(*LibraryName)(nil),      // 0: txpull.v1.ast.LibraryName
	(*BaseContractName)(nil), // 1: txpull.v1.ast.BaseContractName
	(*BaseContract)(nil),     // 2: txpull.v1.ast.BaseContract
	(*Node)(nil),             // 3: txpull.v1.ast.Node
	(*RootNode)(nil),         // 4: txpull.v1.ast.RootNode
	(NodeType)(0),            // 5: txpull.v1.ast.NodeType
	(*Src)(nil),              // 6: txpull.v1.ast.Src
	(Visibility)(0),          // 7: txpull.v1.ast.Visibility
	(Mutability)(0),          // 8: txpull.v1.ast.Mutability
	(*ParametersList)(nil),   // 9: txpull.v1.ast.ParametersList
	(*Body)(nil),             // 10: txpull.v1.ast.Body
	(*TypeName)(nil),         // 11: txpull.v1.ast.TypeName
	(*TypeDescriptions)(nil), // 12: txpull.v1.ast.TypeDescriptions
	(StorageLocation)(0),     // 13: txpull.v1.ast.StorageLocation
}
var file_ast_node_proto_depIdxs = []int32{
	5,  // 0: txpull.v1.ast.LibraryName.node_type:type_name -> txpull.v1.ast.NodeType
	6,  // 1: txpull.v1.ast.LibraryName.src:type_name -> txpull.v1.ast.Src
	5,  // 2: txpull.v1.ast.BaseContractName.node_type:type_name -> txpull.v1.ast.NodeType
	6,  // 3: txpull.v1.ast.BaseContractName.src:type_name -> txpull.v1.ast.Src
	5,  // 4: txpull.v1.ast.BaseContract.node_type:type_name -> txpull.v1.ast.NodeType
	1,  // 5: txpull.v1.ast.BaseContract.base_name:type_name -> txpull.v1.ast.BaseContractName
	6,  // 6: txpull.v1.ast.BaseContract.src:type_name -> txpull.v1.ast.Src
	5,  // 7: txpull.v1.ast.Node.node_type:type_name -> txpull.v1.ast.NodeType
	6,  // 8: txpull.v1.ast.Node.src:type_name -> txpull.v1.ast.Src
	5,  // 9: txpull.v1.ast.Node.kind:type_name -> txpull.v1.ast.NodeType
	3,  // 10: txpull.v1.ast.Node.nodes:type_name -> txpull.v1.ast.Node
	7,  // 11: txpull.v1.ast.Node.visibility:type_name -> txpull.v1.ast.Visibility
	8,  // 12: txpull.v1.ast.Node.state_mutability:type_name -> txpull.v1.ast.Mutability
	9,  // 13: txpull.v1.ast.Node.parameters:type_name -> txpull.v1.ast.ParametersList
	9,  // 14: txpull.v1.ast.Node.return_parameters:type_name -> txpull.v1.ast.ParametersList
	10, // 15: txpull.v1.ast.Node.body:type_name -> txpull.v1.ast.Body
	0,  // 16: txpull.v1.ast.Node.library_name:type_name -> txpull.v1.ast.LibraryName
	11, // 17: txpull.v1.ast.Node.type_name:type_name -> txpull.v1.ast.TypeName
	12, // 18: txpull.v1.ast.Node.type_descriptions:type_name -> txpull.v1.ast.TypeDescriptions
	13, // 19: txpull.v1.ast.Node.storage_location:type_name -> txpull.v1.ast.StorageLocation
	2,  // 20: txpull.v1.ast.Node.base_contracts:type_name -> txpull.v1.ast.BaseContract
	3,  // 21: txpull.v1.ast.RootNode.nodes:type_name -> txpull.v1.ast.Node
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_ast_node_proto_init() }
func file_ast_node_proto_init() {
	if File_ast_node_proto != nil {
		return
	}
	file_ast_types_proto_init()
	file_ast_src_proto_init()
	file_ast_parameters_proto_init()
	file_ast_body_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ast_node_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LibraryName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ast_node_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseContractName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ast_node_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseContract); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ast_node_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ast_node_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RootNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ast_node_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ast_node_proto_goTypes,
		DependencyIndexes: file_ast_node_proto_depIdxs,
		MessageInfos:      file_ast_node_proto_msgTypes,
	}.Build()
	File_ast_node_proto = out.File
	file_ast_node_proto_rawDesc = nil
	file_ast_node_proto_goTypes = nil
	file_ast_node_proto_depIdxs = nil
}
