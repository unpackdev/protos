// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.12.4
// source: ast/types.proto

package ast_pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NodeType int32

const (
	NodeType_SOURCE_UNIT                    NodeType = 0
	NodeType_CONTRACT                       NodeType = 1
	NodeType_MODIFIER                       NodeType = 2
	NodeType_VARIABLE                       NodeType = 3
	NodeType_ENUM                           NodeType = 4
	NodeType_STRUCT                         NodeType = 5
	NodeType_EVENT                          NodeType = 6
	NodeType_ERROR                          NodeType = 7
	NodeType_USING                          NodeType = 8
	NodeType_PRAGMA_DIRECTIVE               NodeType = 9
	NodeType_CONSTRUCTOR                    NodeType = 10
	NodeType_RETURN                         NodeType = 11
	NodeType_MAPPING                        NodeType = 12
	NodeType_ARRAY                          NodeType = 13
	NodeType_ENUM_VALUE                     NodeType = 14
	NodeType_IDENTIFIER                     NodeType = 15
	NodeType_LITERAL                        NodeType = 16
	NodeType_UNARY_OPERATION                NodeType = 17
	NodeType_BINARY_OPERATION               NodeType = 18
	NodeType_TERNARY_OPERATION              NodeType = 19
	NodeType_TUPLE                          NodeType = 20
	NodeType_INDEX_ACCESS                   NodeType = 21
	NodeType_MEMBER_ACCESS                  NodeType = 22
	NodeType_FUNCTION_CALL                  NodeType = 23
	NodeType_NEW_EXPRESSION                 NodeType = 24
	NodeType_CONDITIONAL                    NodeType = 25
	NodeType_ASSIGNMENT                     NodeType = 26
	NodeType_EMIT                           NodeType = 27
	NodeType_IMPORT                         NodeType = 28
	NodeType_ELEMENTARY_TYPE_NAME           NodeType = 29
	NodeType_COMMENT                        NodeType = 30
	NodeType_COMMENT_MULTILINE              NodeType = 31
	NodeType_LICENSE                        NodeType = 32
	NodeType_LIBRARY_DEFINITION             NodeType = 33
	NodeType_CONTRACT_DEFINITION            NodeType = 34
	NodeType_KIND_CONTRACT                  NodeType = 35
	NodeType_KIND_LIBRARY                   NodeType = 36
	NodeType_KIND_INTERFACE                 NodeType = 37
	NodeType_KIND_STRUCT                    NodeType = 38
	NodeType_KIND_ENUM                      NodeType = 39
	NodeType_KIND_FUNCTION                  NodeType = 40
	NodeType_FUNCTION_DEFINITION            NodeType = 41
	NodeType_PARAMETER_LIST                 NodeType = 42
	NodeType_VARIABLE_DECLARATION           NodeType = 43
	NodeType_VARIABLE_DECLARATION_STATEMENT NodeType = 44
	NodeType_BLOCK                          NodeType = 45
	NodeType_RETURN_STATEMENT               NodeType = 46
)

// Enum value maps for NodeType.
var (
	NodeType_name = map[int32]string{
		0:  "SOURCE_UNIT",
		1:  "CONTRACT",
		2:  "MODIFIER",
		3:  "VARIABLE",
		4:  "ENUM",
		5:  "STRUCT",
		6:  "EVENT",
		7:  "ERROR",
		8:  "USING",
		9:  "PRAGMA_DIRECTIVE",
		10: "CONSTRUCTOR",
		11: "RETURN",
		12: "MAPPING",
		13: "ARRAY",
		14: "ENUM_VALUE",
		15: "IDENTIFIER",
		16: "LITERAL",
		17: "UNARY_OPERATION",
		18: "BINARY_OPERATION",
		19: "TERNARY_OPERATION",
		20: "TUPLE",
		21: "INDEX_ACCESS",
		22: "MEMBER_ACCESS",
		23: "FUNCTION_CALL",
		24: "NEW_EXPRESSION",
		25: "CONDITIONAL",
		26: "ASSIGNMENT",
		27: "EMIT",
		28: "IMPORT",
		29: "ELEMENTARY_TYPE_NAME",
		30: "COMMENT",
		31: "COMMENT_MULTILINE",
		32: "LICENSE",
		33: "LIBRARY_DEFINITION",
		34: "CONTRACT_DEFINITION",
		35: "KIND_CONTRACT",
		36: "KIND_LIBRARY",
		37: "KIND_INTERFACE",
		38: "KIND_STRUCT",
		39: "KIND_ENUM",
		40: "KIND_FUNCTION",
		41: "FUNCTION_DEFINITION",
		42: "PARAMETER_LIST",
		43: "VARIABLE_DECLARATION",
		44: "VARIABLE_DECLARATION_STATEMENT",
		45: "BLOCK",
		46: "RETURN_STATEMENT",
	}
	NodeType_value = map[string]int32{
		"SOURCE_UNIT":                    0,
		"CONTRACT":                       1,
		"MODIFIER":                       2,
		"VARIABLE":                       3,
		"ENUM":                           4,
		"STRUCT":                         5,
		"EVENT":                          6,
		"ERROR":                          7,
		"USING":                          8,
		"PRAGMA_DIRECTIVE":               9,
		"CONSTRUCTOR":                    10,
		"RETURN":                         11,
		"MAPPING":                        12,
		"ARRAY":                          13,
		"ENUM_VALUE":                     14,
		"IDENTIFIER":                     15,
		"LITERAL":                        16,
		"UNARY_OPERATION":                17,
		"BINARY_OPERATION":               18,
		"TERNARY_OPERATION":              19,
		"TUPLE":                          20,
		"INDEX_ACCESS":                   21,
		"MEMBER_ACCESS":                  22,
		"FUNCTION_CALL":                  23,
		"NEW_EXPRESSION":                 24,
		"CONDITIONAL":                    25,
		"ASSIGNMENT":                     26,
		"EMIT":                           27,
		"IMPORT":                         28,
		"ELEMENTARY_TYPE_NAME":           29,
		"COMMENT":                        30,
		"COMMENT_MULTILINE":              31,
		"LICENSE":                        32,
		"LIBRARY_DEFINITION":             33,
		"CONTRACT_DEFINITION":            34,
		"KIND_CONTRACT":                  35,
		"KIND_LIBRARY":                   36,
		"KIND_INTERFACE":                 37,
		"KIND_STRUCT":                    38,
		"KIND_ENUM":                      39,
		"KIND_FUNCTION":                  40,
		"FUNCTION_DEFINITION":            41,
		"PARAMETER_LIST":                 42,
		"VARIABLE_DECLARATION":           43,
		"VARIABLE_DECLARATION_STATEMENT": 44,
		"BLOCK":                          45,
		"RETURN_STATEMENT":               46,
	}
)

func (x NodeType) Enum() *NodeType {
	p := new(NodeType)
	*p = x
	return p
}

func (x NodeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeType) Descriptor() protoreflect.EnumDescriptor {
	return file_ast_types_proto_enumTypes[0].Descriptor()
}

func (NodeType) Type() protoreflect.EnumType {
	return &file_ast_types_proto_enumTypes[0]
}

func (x NodeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeType.Descriptor instead.
func (NodeType) EnumDescriptor() ([]byte, []int) {
	return file_ast_types_proto_rawDescGZIP(), []int{0}
}

type Mutability int32

const (
	Mutability_MUTABLE   Mutability = 0
	Mutability_IMMUTABLE Mutability = 1
)

// Enum value maps for Mutability.
var (
	Mutability_name = map[int32]string{
		0: "MUTABLE",
		1: "IMMUTABLE",
	}
	Mutability_value = map[string]int32{
		"MUTABLE":   0,
		"IMMUTABLE": 1,
	}
)

func (x Mutability) Enum() *Mutability {
	p := new(Mutability)
	*p = x
	return p
}

func (x Mutability) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Mutability) Descriptor() protoreflect.EnumDescriptor {
	return file_ast_types_proto_enumTypes[1].Descriptor()
}

func (Mutability) Type() protoreflect.EnumType {
	return &file_ast_types_proto_enumTypes[1]
}

func (x Mutability) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Mutability.Descriptor instead.
func (Mutability) EnumDescriptor() ([]byte, []int) {
	return file_ast_types_proto_rawDescGZIP(), []int{1}
}

type StorageLocation int32

const (
	StorageLocation_DEFAULT  StorageLocation = 0
	StorageLocation_MEMORY   StorageLocation = 1
	StorageLocation_STORAGE  StorageLocation = 2
	StorageLocation_CALLDATA StorageLocation = 3
)

// Enum value maps for StorageLocation.
var (
	StorageLocation_name = map[int32]string{
		0: "DEFAULT",
		1: "MEMORY",
		2: "STORAGE",
		3: "CALLDATA",
	}
	StorageLocation_value = map[string]int32{
		"DEFAULT":  0,
		"MEMORY":   1,
		"STORAGE":  2,
		"CALLDATA": 3,
	}
)

func (x StorageLocation) Enum() *StorageLocation {
	p := new(StorageLocation)
	*p = x
	return p
}

func (x StorageLocation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StorageLocation) Descriptor() protoreflect.EnumDescriptor {
	return file_ast_types_proto_enumTypes[2].Descriptor()
}

func (StorageLocation) Type() protoreflect.EnumType {
	return &file_ast_types_proto_enumTypes[2]
}

func (x StorageLocation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StorageLocation.Descriptor instead.
func (StorageLocation) EnumDescriptor() ([]byte, []int) {
	return file_ast_types_proto_rawDescGZIP(), []int{2}
}

type Visibility int32

const (
	Visibility_INTERNAL Visibility = 0
	Visibility_PRIVATE  Visibility = 1
	Visibility_PUBLIC   Visibility = 2
)

// Enum value maps for Visibility.
var (
	Visibility_name = map[int32]string{
		0: "INTERNAL",
		1: "PRIVATE",
		2: "PUBLIC",
	}
	Visibility_value = map[string]int32{
		"INTERNAL": 0,
		"PRIVATE":  1,
		"PUBLIC":   2,
	}
)

func (x Visibility) Enum() *Visibility {
	p := new(Visibility)
	*p = x
	return p
}

func (x Visibility) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Visibility) Descriptor() protoreflect.EnumDescriptor {
	return file_ast_types_proto_enumTypes[3].Descriptor()
}

func (Visibility) Type() protoreflect.EnumType {
	return &file_ast_types_proto_enumTypes[3]
}

func (x Visibility) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Visibility.Descriptor instead.
func (Visibility) EnumDescriptor() ([]byte, []int) {
	return file_ast_types_proto_rawDescGZIP(), []int{3}
}

type Operator int32

const (
	Operator_O_DEFAULT             Operator = 0
	Operator_ADDITION              Operator = 1
	Operator_SUBTRACTION           Operator = 2
	Operator_MULTIPLICATION        Operator = 3
	Operator_DIVISION              Operator = 4
	Operator_MODULO                Operator = 5
	Operator_EXPONENTIATION        Operator = 6
	Operator_GREATER_THAN          Operator = 7
	Operator_GREATER_THAN_OR_EQUAL Operator = 8
	Operator_LESS_THAN             Operator = 9
	Operator_LESS_THAN_OR_EQUAL    Operator = 10
	Operator_EXACT                 Operator = 11
)

// Enum value maps for Operator.
var (
	Operator_name = map[int32]string{
		0:  "O_DEFAULT",
		1:  "ADDITION",
		2:  "SUBTRACTION",
		3:  "MULTIPLICATION",
		4:  "DIVISION",
		5:  "MODULO",
		6:  "EXPONENTIATION",
		7:  "GREATER_THAN",
		8:  "GREATER_THAN_OR_EQUAL",
		9:  "LESS_THAN",
		10: "LESS_THAN_OR_EQUAL",
		11: "EXACT",
	}
	Operator_value = map[string]int32{
		"O_DEFAULT":             0,
		"ADDITION":              1,
		"SUBTRACTION":           2,
		"MULTIPLICATION":        3,
		"DIVISION":              4,
		"MODULO":                5,
		"EXPONENTIATION":        6,
		"GREATER_THAN":          7,
		"GREATER_THAN_OR_EQUAL": 8,
		"LESS_THAN":             9,
		"LESS_THAN_OR_EQUAL":    10,
		"EXACT":                 11,
	}
)

func (x Operator) Enum() *Operator {
	p := new(Operator)
	*p = x
	return p
}

func (x Operator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Operator) Descriptor() protoreflect.EnumDescriptor {
	return file_ast_types_proto_enumTypes[4].Descriptor()
}

func (Operator) Type() protoreflect.EnumType {
	return &file_ast_types_proto_enumTypes[4]
}

func (x Operator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Operator.Descriptor instead.
func (Operator) EnumDescriptor() ([]byte, []int) {
	return file_ast_types_proto_rawDescGZIP(), []int{4}
}

var File_ast_types_proto protoreflect.FileDescriptor

var file_ast_types_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x61, 0x73, 0x74, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0d, 0x74, 0x78, 0x70, 0x75, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74,
	0x2a, 0xb8, 0x06, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a,
	0x0b, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08,
	0x4d, 0x4f, 0x44, 0x49, 0x46, 0x49, 0x45, 0x52, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x56, 0x41,
	0x52, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x4e, 0x55, 0x4d,
	0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x10, 0x05, 0x12, 0x09,
	0x0a, 0x05, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x07, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x08, 0x12,
	0x14, 0x0a, 0x10, 0x50, 0x52, 0x41, 0x47, 0x4d, 0x41, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54,
	0x49, 0x56, 0x45, 0x10, 0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x55,
	0x43, 0x54, 0x4f, 0x52, 0x10, 0x0a, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e,
	0x10, 0x0b, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x41, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x0c, 0x12,
	0x09, 0x0a, 0x05, 0x41, 0x52, 0x52, 0x41, 0x59, 0x10, 0x0d, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x4e,
	0x55, 0x4d, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x0e, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x44,
	0x45, 0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x10, 0x0f, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x49,
	0x54, 0x45, 0x52, 0x41, 0x4c, 0x10, 0x10, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x4e, 0x41, 0x52, 0x59,
	0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x11, 0x12, 0x14, 0x0a, 0x10,
	0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x10, 0x12, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x52, 0x59, 0x5f, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x13, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x55, 0x50,
	0x4c, 0x45, 0x10, 0x14, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x41, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x15, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52,
	0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x16, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x55, 0x4e,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x17, 0x12, 0x12, 0x0a, 0x0e,
	0x4e, 0x45, 0x57, 0x5f, 0x45, 0x58, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x18,
	0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10,
	0x19, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x53, 0x53, 0x49, 0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x10,
	0x1a, 0x12, 0x08, 0x0a, 0x04, 0x45, 0x4d, 0x49, 0x54, 0x10, 0x1b, 0x12, 0x0a, 0x0a, 0x06, 0x49,
	0x4d, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x1c, 0x12, 0x18, 0x0a, 0x14, 0x45, 0x4c, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x41, 0x52, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10,
	0x1d, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x1e, 0x12, 0x15,
	0x0a, 0x11, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x4c,
	0x49, 0x4e, 0x45, 0x10, 0x1f, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45,
	0x10, 0x20, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x52, 0x59, 0x5f, 0x44, 0x45,
	0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x21, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f,
	0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x22, 0x12, 0x11, 0x0a, 0x0d, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x54,
	0x52, 0x41, 0x43, 0x54, 0x10, 0x23, 0x12, 0x10, 0x0a, 0x0c, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4c,
	0x49, 0x42, 0x52, 0x41, 0x52, 0x59, 0x10, 0x24, 0x12, 0x12, 0x0a, 0x0e, 0x4b, 0x49, 0x4e, 0x44,
	0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x10, 0x25, 0x12, 0x0f, 0x0a, 0x0b,
	0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x10, 0x26, 0x12, 0x0d, 0x0a,
	0x09, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x45, 0x4e, 0x55, 0x4d, 0x10, 0x27, 0x12, 0x11, 0x0a, 0x0d,
	0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x28, 0x12,
	0x17, 0x0a, 0x13, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x46, 0x49,
	0x4e, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x29, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x41, 0x52, 0x41,
	0x4d, 0x45, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x2a, 0x12, 0x18, 0x0a, 0x14,
	0x56, 0x41, 0x52, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x44, 0x45, 0x43, 0x4c, 0x41, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x2b, 0x12, 0x22, 0x0a, 0x1e, 0x56, 0x41, 0x52, 0x49, 0x41, 0x42,
	0x4c, 0x45, 0x5f, 0x44, 0x45, 0x43, 0x4c, 0x41, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x2c, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x4c,
	0x4f, 0x43, 0x4b, 0x10, 0x2d, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x54, 0x55, 0x52, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x2e, 0x2a, 0x28, 0x0a, 0x0a, 0x4d,
	0x75, 0x74, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x55, 0x54,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x4d, 0x4d, 0x55, 0x54, 0x41,
	0x42, 0x4c, 0x45, 0x10, 0x01, 0x2a, 0x45, 0x0a, 0x0f, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41,
	0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x10, 0x02, 0x12, 0x0c,
	0x0a, 0x08, 0x43, 0x41, 0x4c, 0x4c, 0x44, 0x41, 0x54, 0x41, 0x10, 0x03, 0x2a, 0x33, 0x0a, 0x0a,
	0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x49, 0x56,
	0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x10,
	0x02, 0x2a, 0xd9, 0x01, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x0d,
	0x0a, 0x09, 0x4f, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x41, 0x44, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x53,
	0x55, 0x42, 0x54, 0x52, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e,
	0x4d, 0x55, 0x4c, 0x54, 0x49, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03,
	0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x0a,
	0x0a, 0x06, 0x4d, 0x4f, 0x44, 0x55, 0x4c, 0x4f, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x58,
	0x50, 0x4f, 0x4e, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x10,
	0x0a, 0x0c, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x07,
	0x12, 0x19, 0x0a, 0x15, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e,
	0x5f, 0x4f, 0x52, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x08, 0x12, 0x0d, 0x0a, 0x09, 0x4c,
	0x45, 0x53, 0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12, 0x4c, 0x45,
	0x53, 0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x4f, 0x52, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c,
	0x10, 0x0a, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x58, 0x41, 0x43, 0x54, 0x10, 0x0b, 0x42, 0x2d, 0x5a,
	0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x78, 0x70, 0x75,
	0x6c, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x64, 0x69, 0x73, 0x74, 0x2f, 0x67,
	0x6f, 0x2f, 0x61, 0x73, 0x74, 0x3b, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ast_types_proto_rawDescOnce sync.Once
	file_ast_types_proto_rawDescData = file_ast_types_proto_rawDesc
)

func file_ast_types_proto_rawDescGZIP() []byte {
	file_ast_types_proto_rawDescOnce.Do(func() {
		file_ast_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_ast_types_proto_rawDescData)
	})
	return file_ast_types_proto_rawDescData
}

var file_ast_types_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_ast_types_proto_goTypes = []interface{}{
	(NodeType)(0),        // 0: txpull.v1.ast.NodeType
	(Mutability)(0),      // 1: txpull.v1.ast.Mutability
	(StorageLocation)(0), // 2: txpull.v1.ast.StorageLocation
	(Visibility)(0),      // 3: txpull.v1.ast.Visibility
	(Operator)(0),        // 4: txpull.v1.ast.Operator
}
var file_ast_types_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_ast_types_proto_init() }
func file_ast_types_proto_init() {
	if File_ast_types_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ast_types_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ast_types_proto_goTypes,
		DependencyIndexes: file_ast_types_proto_depIdxs,
		EnumInfos:         file_ast_types_proto_enumTypes,
	}.Build()
	File_ast_types_proto = out.File
	file_ast_types_proto_rawDesc = nil
	file_ast_types_proto_goTypes = nil
	file_ast_types_proto_depIdxs = nil
}
