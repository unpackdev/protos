// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.21.12
// source: ast/yul.proto

package ast_pb

import (
	v3 "github.com/cncf/xds/go/xds/type/v3"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AssemblyStatement represents a higher-level assembly statement.
type AssemblyStatement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                         // Unique identifier for the assembly statement.
	NodeType NodeType `protobuf:"varint,2,opt,name=node_type,json=nodeType,proto3,enum=unpack.v1.ast.NodeType" json:"node_type,omitempty"` // The type of the node.
	Src      *Src     `protobuf:"bytes,3,opt,name=src,proto3" json:"src,omitempty"`                                                        // Source information for the assembly statement.
	Body     *Body    `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`                                                      // The body of the assembly statement.
}

func (x *AssemblyStatement) Reset() {
	*x = AssemblyStatement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ast_yul_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssemblyStatement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssemblyStatement) ProtoMessage() {}

func (x *AssemblyStatement) ProtoReflect() protoreflect.Message {
	mi := &file_ast_yul_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssemblyStatement.ProtoReflect.Descriptor instead.
func (*AssemblyStatement) Descriptor() ([]byte, []int) {
	return file_ast_yul_proto_rawDescGZIP(), []int{0}
}

func (x *AssemblyStatement) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AssemblyStatement) GetNodeType() NodeType {
	if x != nil {
		return x.NodeType
	}
	return NodeType_NT_DEFAULT
}

func (x *AssemblyStatement) GetSrc() *Src {
	if x != nil {
		return x.Src
	}
	return nil
}

func (x *AssemblyStatement) GetBody() *Body {
	if x != nil {
		return x.Body
	}
	return nil
}

// YulBlockStatement represents a Yul block of statements.
type YulBlockStatement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                         // Unique identifier for the Yul block statement.
	NodeType   NodeType          `protobuf:"varint,2,opt,name=node_type,json=nodeType,proto3,enum=unpack.v1.ast.NodeType" json:"node_type,omitempty"` // The type of the node.
	Src        *Src              `protobuf:"bytes,3,opt,name=src,proto3" json:"src,omitempty"`                                                        // Source information for the Yul block statement.
	Statements []*v3.TypedStruct `protobuf:"bytes,4,rep,name=statements,proto3" json:"statements,omitempty"`                                          // The statements within the block.
}

func (x *YulBlockStatement) Reset() {
	*x = YulBlockStatement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ast_yul_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YulBlockStatement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YulBlockStatement) ProtoMessage() {}

func (x *YulBlockStatement) ProtoReflect() protoreflect.Message {
	mi := &file_ast_yul_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YulBlockStatement.ProtoReflect.Descriptor instead.
func (*YulBlockStatement) Descriptor() ([]byte, []int) {
	return file_ast_yul_proto_rawDescGZIP(), []int{1}
}

func (x *YulBlockStatement) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *YulBlockStatement) GetNodeType() NodeType {
	if x != nil {
		return x.NodeType
	}
	return NodeType_NT_DEFAULT
}

func (x *YulBlockStatement) GetSrc() *Src {
	if x != nil {
		return x.Src
	}
	return nil
}

func (x *YulBlockStatement) GetStatements() []*v3.TypedStruct {
	if x != nil {
		return x.Statements
	}
	return nil
}

// YulStatement represents an individual Yul statement.
type YulStatement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                         // Unique identifier for the Yul statement.
	NodeType   NodeType          `protobuf:"varint,2,opt,name=node_type,json=nodeType,proto3,enum=unpack.v1.ast.NodeType" json:"node_type,omitempty"` // The type of the node.
	Src        *Src              `protobuf:"bytes,3,opt,name=src,proto3" json:"src,omitempty"`                                                        // Source information for the Yul statement.
	Statements []*v3.TypedStruct `protobuf:"bytes,4,rep,name=statements,proto3" json:"statements,omitempty"`                                          // Any sub-statements or expressions associated with this statement.
}

func (x *YulStatement) Reset() {
	*x = YulStatement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ast_yul_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YulStatement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YulStatement) ProtoMessage() {}

func (x *YulStatement) ProtoReflect() protoreflect.Message {
	mi := &file_ast_yul_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YulStatement.ProtoReflect.Descriptor instead.
func (*YulStatement) Descriptor() ([]byte, []int) {
	return file_ast_yul_proto_rawDescGZIP(), []int{2}
}

func (x *YulStatement) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *YulStatement) GetNodeType() NodeType {
	if x != nil {
		return x.NodeType
	}
	return NodeType_NT_DEFAULT
}

func (x *YulStatement) GetSrc() *Src {
	if x != nil {
		return x.Src
	}
	return nil
}

func (x *YulStatement) GetStatements() []*v3.TypedStruct {
	if x != nil {
		return x.Statements
	}
	return nil
}

// YulIdentifier represents an identifier in the Yul language.
type YulIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                         // Unique identifier for the identifier.
	NodeType NodeType `protobuf:"varint,2,opt,name=node_type,json=nodeType,proto3,enum=unpack.v1.ast.NodeType" json:"node_type,omitempty"` // The type of the node.
	Src      *Src     `protobuf:"bytes,3,opt,name=src,proto3" json:"src,omitempty"`                                                        // Source information for the identifier.
	Name     string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`                                                      // The name of the identifier.
}

func (x *YulIdentifier) Reset() {
	*x = YulIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ast_yul_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YulIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YulIdentifier) ProtoMessage() {}

func (x *YulIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_ast_yul_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YulIdentifier.ProtoReflect.Descriptor instead.
func (*YulIdentifier) Descriptor() ([]byte, []int) {
	return file_ast_yul_proto_rawDescGZIP(), []int{3}
}

func (x *YulIdentifier) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *YulIdentifier) GetNodeType() NodeType {
	if x != nil {
		return x.NodeType
	}
	return NodeType_NT_DEFAULT
}

func (x *YulIdentifier) GetSrc() *Src {
	if x != nil {
		return x.Src
	}
	return nil
}

func (x *YulIdentifier) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// YulVariableStatement represents a variable declaration in Yul.
type YulVariableStatement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                         // Unique identifier for the variable statement.
	NodeType  NodeType          `protobuf:"varint,2,opt,name=node_type,json=nodeType,proto3,enum=unpack.v1.ast.NodeType" json:"node_type,omitempty"` // The type of the node.
	Src       *Src              `protobuf:"bytes,3,opt,name=src,proto3" json:"src,omitempty"`                                                        // Source information for the variable statement.
	Let       bool              `protobuf:"varint,4,opt,name=let,proto3" json:"let,omitempty"`                                                       // Specifies if it's a "let" declaration.
	Value     *v3.TypedStruct   `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`                                                    // The value assigned to the variable.
	Variables []*v3.TypedStruct `protobuf:"bytes,6,rep,name=variables,proto3" json:"variables,omitempty"`                                            // List of variables declared.
}

func (x *YulVariableStatement) Reset() {
	*x = YulVariableStatement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ast_yul_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YulVariableStatement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YulVariableStatement) ProtoMessage() {}

func (x *YulVariableStatement) ProtoReflect() protoreflect.Message {
	mi := &file_ast_yul_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YulVariableStatement.ProtoReflect.Descriptor instead.
func (*YulVariableStatement) Descriptor() ([]byte, []int) {
	return file_ast_yul_proto_rawDescGZIP(), []int{4}
}

func (x *YulVariableStatement) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *YulVariableStatement) GetNodeType() NodeType {
	if x != nil {
		return x.NodeType
	}
	return NodeType_NT_DEFAULT
}

func (x *YulVariableStatement) GetSrc() *Src {
	if x != nil {
		return x.Src
	}
	return nil
}

func (x *YulVariableStatement) GetLet() bool {
	if x != nil {
		return x.Let
	}
	return false
}

func (x *YulVariableStatement) GetValue() *v3.TypedStruct {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *YulVariableStatement) GetVariables() []*v3.TypedStruct {
	if x != nil {
		return x.Variables
	}
	return nil
}

// YulSwitchCaseStatement represents a case within a Yul switch statement.
type YulSwitchCaseStatement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                         // Unique identifier for the case statement.
	NodeType NodeType        `protobuf:"varint,2,opt,name=node_type,json=nodeType,proto3,enum=unpack.v1.ast.NodeType" json:"node_type,omitempty"` // The type of the node.
	Src      *Src            `protobuf:"bytes,3,opt,name=src,proto3" json:"src,omitempty"`                                                        // Source information for the case statement.
	Case     *v3.TypedStruct `protobuf:"bytes,4,opt,name=case,proto3" json:"case,omitempty"`                                                      // The case value.
	Body     *v3.TypedStruct `protobuf:"bytes,5,opt,name=body,proto3" json:"body,omitempty"`                                                      // The body of the case.
}

func (x *YulSwitchCaseStatement) Reset() {
	*x = YulSwitchCaseStatement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ast_yul_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YulSwitchCaseStatement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YulSwitchCaseStatement) ProtoMessage() {}

func (x *YulSwitchCaseStatement) ProtoReflect() protoreflect.Message {
	mi := &file_ast_yul_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YulSwitchCaseStatement.ProtoReflect.Descriptor instead.
func (*YulSwitchCaseStatement) Descriptor() ([]byte, []int) {
	return file_ast_yul_proto_rawDescGZIP(), []int{5}
}

func (x *YulSwitchCaseStatement) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *YulSwitchCaseStatement) GetNodeType() NodeType {
	if x != nil {
		return x.NodeType
	}
	return NodeType_NT_DEFAULT
}

func (x *YulSwitchCaseStatement) GetSrc() *Src {
	if x != nil {
		return x.Src
	}
	return nil
}

func (x *YulSwitchCaseStatement) GetCase() *v3.TypedStruct {
	if x != nil {
		return x.Case
	}
	return nil
}

func (x *YulSwitchCaseStatement) GetBody() *v3.TypedStruct {
	if x != nil {
		return x.Body
	}
	return nil
}

// YulSwitchStatement represents a switch statement in Yul.
type YulSwitchStatement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64                     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                         // Unique identifier for the switch statement.
	NodeType NodeType                  `protobuf:"varint,2,opt,name=node_type,json=nodeType,proto3,enum=unpack.v1.ast.NodeType" json:"node_type,omitempty"` // The type of the node.
	Src      *Src                      `protobuf:"bytes,3,opt,name=src,proto3" json:"src,omitempty"`                                                        // Source information for the switch statement.
	Cases    []*YulSwitchCaseStatement `protobuf:"bytes,4,rep,name=cases,proto3" json:"cases,omitempty"`                                                    // The list of cases for the switch statement.
}

func (x *YulSwitchStatement) Reset() {
	*x = YulSwitchStatement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ast_yul_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YulSwitchStatement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YulSwitchStatement) ProtoMessage() {}

func (x *YulSwitchStatement) ProtoReflect() protoreflect.Message {
	mi := &file_ast_yul_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YulSwitchStatement.ProtoReflect.Descriptor instead.
func (*YulSwitchStatement) Descriptor() ([]byte, []int) {
	return file_ast_yul_proto_rawDescGZIP(), []int{6}
}

func (x *YulSwitchStatement) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *YulSwitchStatement) GetNodeType() NodeType {
	if x != nil {
		return x.NodeType
	}
	return NodeType_NT_DEFAULT
}

func (x *YulSwitchStatement) GetSrc() *Src {
	if x != nil {
		return x.Src
	}
	return nil
}

func (x *YulSwitchStatement) GetCases() []*YulSwitchCaseStatement {
	if x != nil {
		return x.Cases
	}
	return nil
}

// YulLiteralStatement represents a literal value in Yul.
type YulLiteralStatement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                         // Unique identifier for the literal.
	NodeType NodeType `protobuf:"varint,2,opt,name=node_type,json=nodeType,proto3,enum=unpack.v1.ast.NodeType" json:"node_type,omitempty"` // The type of the node.
	Kind     NodeType `protobuf:"varint,3,opt,name=kind,proto3,enum=unpack.v1.ast.NodeType" json:"kind,omitempty"`                         // The kind of the literal (e.g., string, number).
	Src      *Src     `protobuf:"bytes,4,opt,name=src,proto3" json:"src,omitempty"`                                                        // Source information for the literal.
	Value    string   `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`                                                    // The literal value as a string.
	HexValue string   `protobuf:"bytes,6,opt,name=hex_value,json=hexValue,proto3" json:"hex_value,omitempty"`                              // The literal value as a hexadecimal string.
}

func (x *YulLiteralStatement) Reset() {
	*x = YulLiteralStatement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ast_yul_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YulLiteralStatement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YulLiteralStatement) ProtoMessage() {}

func (x *YulLiteralStatement) ProtoReflect() protoreflect.Message {
	mi := &file_ast_yul_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YulLiteralStatement.ProtoReflect.Descriptor instead.
func (*YulLiteralStatement) Descriptor() ([]byte, []int) {
	return file_ast_yul_proto_rawDescGZIP(), []int{7}
}

func (x *YulLiteralStatement) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *YulLiteralStatement) GetNodeType() NodeType {
	if x != nil {
		return x.NodeType
	}
	return NodeType_NT_DEFAULT
}

func (x *YulLiteralStatement) GetKind() NodeType {
	if x != nil {
		return x.Kind
	}
	return NodeType_NT_DEFAULT
}

func (x *YulLiteralStatement) GetSrc() *Src {
	if x != nil {
		return x.Src
	}
	return nil
}

func (x *YulLiteralStatement) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *YulLiteralStatement) GetHexValue() string {
	if x != nil {
		return x.HexValue
	}
	return ""
}

// YulLeaveStatement represents a "leave" statement in Yul.
type YulLeaveStatement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                         // Unique identifier for the leave statement.
	NodeType NodeType `protobuf:"varint,2,opt,name=node_type,json=nodeType,proto3,enum=unpack.v1.ast.NodeType" json:"node_type,omitempty"` // The type of the node.
	Src      *Src     `protobuf:"bytes,3,opt,name=src,proto3" json:"src,omitempty"`                                                        // Source information for the leave statement.
}

func (x *YulLeaveStatement) Reset() {
	*x = YulLeaveStatement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ast_yul_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YulLeaveStatement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YulLeaveStatement) ProtoMessage() {}

func (x *YulLeaveStatement) ProtoReflect() protoreflect.Message {
	mi := &file_ast_yul_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YulLeaveStatement.ProtoReflect.Descriptor instead.
func (*YulLeaveStatement) Descriptor() ([]byte, []int) {
	return file_ast_yul_proto_rawDescGZIP(), []int{8}
}

func (x *YulLeaveStatement) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *YulLeaveStatement) GetNodeType() NodeType {
	if x != nil {
		return x.NodeType
	}
	return NodeType_NT_DEFAULT
}

func (x *YulLeaveStatement) GetSrc() *Src {
	if x != nil {
		return x.Src
	}
	return nil
}

// YulBreakStatement represents a "break" statement in Yul.
type YulBreakStatement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                         // Unique identifier for the break statement.
	NodeType NodeType `protobuf:"varint,2,opt,name=node_type,json=nodeType,proto3,enum=unpack.v1.ast.NodeType" json:"node_type,omitempty"` // The type of the node.
	Src      *Src     `protobuf:"bytes,3,opt,name=src,proto3" json:"src,omitempty"`                                                        // Source information for the break statement.
}

func (x *YulBreakStatement) Reset() {
	*x = YulBreakStatement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ast_yul_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YulBreakStatement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YulBreakStatement) ProtoMessage() {}

func (x *YulBreakStatement) ProtoReflect() protoreflect.Message {
	mi := &file_ast_yul_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YulBreakStatement.ProtoReflect.Descriptor instead.
func (*YulBreakStatement) Descriptor() ([]byte, []int) {
	return file_ast_yul_proto_rawDescGZIP(), []int{9}
}

func (x *YulBreakStatement) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *YulBreakStatement) GetNodeType() NodeType {
	if x != nil {
		return x.NodeType
	}
	return NodeType_NT_DEFAULT
}

func (x *YulBreakStatement) GetSrc() *Src {
	if x != nil {
		return x.Src
	}
	return nil
}

// YulContinueStatement represents a "continue" statement in Yul.
type YulContinueStatement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                         // Unique identifier for the continue statement.
	NodeType NodeType `protobuf:"varint,2,opt,name=node_type,json=nodeType,proto3,enum=unpack.v1.ast.NodeType" json:"node_type,omitempty"` // The type of the node.
	Src      *Src     `protobuf:"bytes,3,opt,name=src,proto3" json:"src,omitempty"`                                                        // Source information for the continue statement.
}

func (x *YulContinueStatement) Reset() {
	*x = YulContinueStatement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ast_yul_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YulContinueStatement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YulContinueStatement) ProtoMessage() {}

func (x *YulContinueStatement) ProtoReflect() protoreflect.Message {
	mi := &file_ast_yul_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YulContinueStatement.ProtoReflect.Descriptor instead.
func (*YulContinueStatement) Descriptor() ([]byte, []int) {
	return file_ast_yul_proto_rawDescGZIP(), []int{10}
}

func (x *YulContinueStatement) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *YulContinueStatement) GetNodeType() NodeType {
	if x != nil {
		return x.NodeType
	}
	return NodeType_NT_DEFAULT
}

func (x *YulContinueStatement) GetSrc() *Src {
	if x != nil {
		return x.Src
	}
	return nil
}

// YulIfStatement represents an "if" statement in Yul.
type YulIfStatement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                         // Unique identifier for the if statement.
	NodeType  NodeType        `protobuf:"varint,2,opt,name=node_type,json=nodeType,proto3,enum=unpack.v1.ast.NodeType" json:"node_type,omitempty"` // The type of the node.
	Src       *Src            `protobuf:"bytes,3,opt,name=src,proto3" json:"src,omitempty"`                                                        // Source information for the if statement.
	Condition *v3.TypedStruct `protobuf:"bytes,4,opt,name=condition,proto3" json:"condition,omitempty"`                                            // The condition of the if statement.
	Body      *v3.TypedStruct `protobuf:"bytes,5,opt,name=body,proto3" json:"body,omitempty"`                                                      // The body of the if statement.
}

func (x *YulIfStatement) Reset() {
	*x = YulIfStatement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ast_yul_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YulIfStatement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YulIfStatement) ProtoMessage() {}

func (x *YulIfStatement) ProtoReflect() protoreflect.Message {
	mi := &file_ast_yul_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YulIfStatement.ProtoReflect.Descriptor instead.
func (*YulIfStatement) Descriptor() ([]byte, []int) {
	return file_ast_yul_proto_rawDescGZIP(), []int{11}
}

func (x *YulIfStatement) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *YulIfStatement) GetNodeType() NodeType {
	if x != nil {
		return x.NodeType
	}
	return NodeType_NT_DEFAULT
}

func (x *YulIfStatement) GetSrc() *Src {
	if x != nil {
		return x.Src
	}
	return nil
}

func (x *YulIfStatement) GetCondition() *v3.TypedStruct {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *YulIfStatement) GetBody() *v3.TypedStruct {
	if x != nil {
		return x.Body
	}
	return nil
}

// YulFunctionDefinition represents a function definition in Yul.
type YulFunctionDefinition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                         // Unique identifier for the function definition.
	NodeType         NodeType          `protobuf:"varint,2,opt,name=node_type,json=nodeType,proto3,enum=unpack.v1.ast.NodeType" json:"node_type,omitempty"` // The type of the node.
	Src              *Src              `protobuf:"bytes,3,opt,name=src,proto3" json:"src,omitempty"`                                                        // Source information for the function definition.
	Arguments        []*v3.TypedStruct `protobuf:"bytes,4,rep,name=arguments,proto3" json:"arguments,omitempty"`                                            // The arguments of the function.
	Body             *v3.TypedStruct   `protobuf:"bytes,5,opt,name=body,proto3" json:"body,omitempty"`                                                      // The body of the function.
	ReturnParameters []*v3.TypedStruct `protobuf:"bytes,6,rep,name=return_parameters,json=returnParameters,proto3" json:"return_parameters,omitempty"`      // The return parameters of the function.
}

func (x *YulFunctionDefinition) Reset() {
	*x = YulFunctionDefinition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ast_yul_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YulFunctionDefinition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YulFunctionDefinition) ProtoMessage() {}

func (x *YulFunctionDefinition) ProtoReflect() protoreflect.Message {
	mi := &file_ast_yul_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YulFunctionDefinition.ProtoReflect.Descriptor instead.
func (*YulFunctionDefinition) Descriptor() ([]byte, []int) {
	return file_ast_yul_proto_rawDescGZIP(), []int{12}
}

func (x *YulFunctionDefinition) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *YulFunctionDefinition) GetNodeType() NodeType {
	if x != nil {
		return x.NodeType
	}
	return NodeType_NT_DEFAULT
}

func (x *YulFunctionDefinition) GetSrc() *Src {
	if x != nil {
		return x.Src
	}
	return nil
}

func (x *YulFunctionDefinition) GetArguments() []*v3.TypedStruct {
	if x != nil {
		return x.Arguments
	}
	return nil
}

func (x *YulFunctionDefinition) GetBody() *v3.TypedStruct {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *YulFunctionDefinition) GetReturnParameters() []*v3.TypedStruct {
	if x != nil {
		return x.ReturnParameters
	}
	return nil
}

// YulFunctionCallStatement represents a function call in Yul.
type YulFunctionCallStatement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                         // Unique identifier for the function call statement.
	NodeType     NodeType          `protobuf:"varint,2,opt,name=node_type,json=nodeType,proto3,enum=unpack.v1.ast.NodeType" json:"node_type,omitempty"` // The type of the node.
	Src          *Src              `protobuf:"bytes,3,opt,name=src,proto3" json:"src,omitempty"`                                                        // Source information for the function call statement.
	FunctionName *v3.TypedStruct   `protobuf:"bytes,4,opt,name=function_name,json=functionName,proto3" json:"function_name,omitempty"`                  // The name of the function being called.
	Arguments    []*v3.TypedStruct `protobuf:"bytes,5,rep,name=arguments,proto3" json:"arguments,omitempty"`                                            // The arguments passed to the function.
}

func (x *YulFunctionCallStatement) Reset() {
	*x = YulFunctionCallStatement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ast_yul_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YulFunctionCallStatement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YulFunctionCallStatement) ProtoMessage() {}

func (x *YulFunctionCallStatement) ProtoReflect() protoreflect.Message {
	mi := &file_ast_yul_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YulFunctionCallStatement.ProtoReflect.Descriptor instead.
func (*YulFunctionCallStatement) Descriptor() ([]byte, []int) {
	return file_ast_yul_proto_rawDescGZIP(), []int{13}
}

func (x *YulFunctionCallStatement) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *YulFunctionCallStatement) GetNodeType() NodeType {
	if x != nil {
		return x.NodeType
	}
	return NodeType_NT_DEFAULT
}

func (x *YulFunctionCallStatement) GetSrc() *Src {
	if x != nil {
		return x.Src
	}
	return nil
}

func (x *YulFunctionCallStatement) GetFunctionName() *v3.TypedStruct {
	if x != nil {
		return x.FunctionName
	}
	return nil
}

func (x *YulFunctionCallStatement) GetArguments() []*v3.TypedStruct {
	if x != nil {
		return x.Arguments
	}
	return nil
}

// YulAssignmentStatement represents an assignment operation in Yul.
type YulAssignmentStatement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64             `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                         // Unique identifier for the assignment statement.
	NodeType      NodeType          `protobuf:"varint,2,opt,name=node_type,json=nodeType,proto3,enum=unpack.v1.ast.NodeType" json:"node_type,omitempty"` // The type of the node.
	Src           *Src              `protobuf:"bytes,3,opt,name=src,proto3" json:"src,omitempty"`                                                        // Source information for the assignment statement.
	VariableNames []*v3.TypedStruct `protobuf:"bytes,4,rep,name=variable_names,json=variableNames,proto3" json:"variable_names,omitempty"`               // The variables being assigned to.
	Value         *v3.TypedStruct   `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`                                                    // The value being assigned.
}

func (x *YulAssignmentStatement) Reset() {
	*x = YulAssignmentStatement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ast_yul_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YulAssignmentStatement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YulAssignmentStatement) ProtoMessage() {}

func (x *YulAssignmentStatement) ProtoReflect() protoreflect.Message {
	mi := &file_ast_yul_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YulAssignmentStatement.ProtoReflect.Descriptor instead.
func (*YulAssignmentStatement) Descriptor() ([]byte, []int) {
	return file_ast_yul_proto_rawDescGZIP(), []int{14}
}

func (x *YulAssignmentStatement) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *YulAssignmentStatement) GetNodeType() NodeType {
	if x != nil {
		return x.NodeType
	}
	return NodeType_NT_DEFAULT
}

func (x *YulAssignmentStatement) GetSrc() *Src {
	if x != nil {
		return x.Src
	}
	return nil
}

func (x *YulAssignmentStatement) GetVariableNames() []*v3.TypedStruct {
	if x != nil {
		return x.VariableNames
	}
	return nil
}

func (x *YulAssignmentStatement) GetValue() *v3.TypedStruct {
	if x != nil {
		return x.Value
	}
	return nil
}

// YulExpressionStatement represents an expression in Yul.
type YulExpressionStatement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                         // Unique identifier for the expression statement.
	NodeType   NodeType        `protobuf:"varint,2,opt,name=node_type,json=nodeType,proto3,enum=unpack.v1.ast.NodeType" json:"node_type,omitempty"` // The type of the node.
	Src        *Src            `protobuf:"bytes,3,opt,name=src,proto3" json:"src,omitempty"`                                                        // Source information for the expression statement.
	Expression *v3.TypedStruct `protobuf:"bytes,4,opt,name=expression,proto3" json:"expression,omitempty"`                                          // The expression itself.
}

func (x *YulExpressionStatement) Reset() {
	*x = YulExpressionStatement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ast_yul_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YulExpressionStatement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YulExpressionStatement) ProtoMessage() {}

func (x *YulExpressionStatement) ProtoReflect() protoreflect.Message {
	mi := &file_ast_yul_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YulExpressionStatement.ProtoReflect.Descriptor instead.
func (*YulExpressionStatement) Descriptor() ([]byte, []int) {
	return file_ast_yul_proto_rawDescGZIP(), []int{15}
}

func (x *YulExpressionStatement) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *YulExpressionStatement) GetNodeType() NodeType {
	if x != nil {
		return x.NodeType
	}
	return NodeType_NT_DEFAULT
}

func (x *YulExpressionStatement) GetSrc() *Src {
	if x != nil {
		return x.Src
	}
	return nil
}

func (x *YulExpressionStatement) GetExpression() *v3.TypedStruct {
	if x != nil {
		return x.Expression
	}
	return nil
}

// YulForStatement represents a "for" loop in Yul.
type YulForStatement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                         // Unique identifier for the for statement.
	NodeType  NodeType        `protobuf:"varint,2,opt,name=node_type,json=nodeType,proto3,enum=unpack.v1.ast.NodeType" json:"node_type,omitempty"` // The type of the node.
	Src       *Src            `protobuf:"bytes,3,opt,name=src,proto3" json:"src,omitempty"`                                                        // Source information for the for statement.
	Pre       *v3.TypedStruct `protobuf:"bytes,4,opt,name=pre,proto3" json:"pre,omitempty"`                                                        // Initialization part of the for loop.
	Post      *v3.TypedStruct `protobuf:"bytes,5,opt,name=post,proto3" json:"post,omitempty"`                                                      // Increment/decrement part of the for loop.
	Condition *v3.TypedStruct `protobuf:"bytes,6,opt,name=condition,proto3" json:"condition,omitempty"`                                            // Condition of the for loop.
	Body      *v3.TypedStruct `protobuf:"bytes,7,opt,name=body,proto3" json:"body,omitempty"`                                                      // The body of the for loop.
}

func (x *YulForStatement) Reset() {
	*x = YulForStatement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ast_yul_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *YulForStatement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*YulForStatement) ProtoMessage() {}

func (x *YulForStatement) ProtoReflect() protoreflect.Message {
	mi := &file_ast_yul_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use YulForStatement.ProtoReflect.Descriptor instead.
func (*YulForStatement) Descriptor() ([]byte, []int) {
	return file_ast_yul_proto_rawDescGZIP(), []int{16}
}

func (x *YulForStatement) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *YulForStatement) GetNodeType() NodeType {
	if x != nil {
		return x.NodeType
	}
	return NodeType_NT_DEFAULT
}

func (x *YulForStatement) GetSrc() *Src {
	if x != nil {
		return x.Src
	}
	return nil
}

func (x *YulForStatement) GetPre() *v3.TypedStruct {
	if x != nil {
		return x.Pre
	}
	return nil
}

func (x *YulForStatement) GetPost() *v3.TypedStruct {
	if x != nil {
		return x.Post
	}
	return nil
}

func (x *YulForStatement) GetCondition() *v3.TypedStruct {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *YulForStatement) GetBody() *v3.TypedStruct {
	if x != nil {
		return x.Body
	}
	return nil
}

var File_ast_yul_proto protoreflect.FileDescriptor

var file_ast_yul_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x61, 0x73, 0x74, 0x2f, 0x79, 0x75, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0d, 0x75, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x1a, 0x0f,
	0x61, 0x73, 0x74, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0d, 0x61, 0x73, 0x74, 0x2f, 0x73, 0x72, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e,
	0x61, 0x73, 0x74, 0x2f, 0x62, 0x6f, 0x64, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x78, 0x64, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x76, 0x33, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa8,
	0x01, 0x0a, 0x11, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x75, 0x6e, 0x70, 0x61, 0x63, 0x6b,
	0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x03, 0x73, 0x72,
	0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75, 0x6e, 0x70, 0x61, 0x63, 0x6b,
	0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x53, 0x72, 0x63, 0x52, 0x03, 0x73, 0x72, 0x63,
	0x12, 0x27, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x75, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x42,
	0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0xb9, 0x01, 0x0a, 0x11, 0x59, 0x75,
	0x6c, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x34, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x75, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x61,
	0x73, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6e, 0x6f, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x61,
	0x73, 0x74, 0x2e, 0x53, 0x72, 0x63, 0x52, 0x03, 0x73, 0x72, 0x63, 0x12, 0x38, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x78, 0x64, 0x73, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xb4, 0x01, 0x0a, 0x0c, 0x59, 0x75, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x75, 0x6e, 0x70, 0x61,
	0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x03,
	0x73, 0x72, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75, 0x6e, 0x70, 0x61,
	0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x53, 0x72, 0x63, 0x52, 0x03, 0x73,
	0x72, 0x63, 0x12, 0x38, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x78, 0x64, 0x73, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x33, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x8f, 0x01, 0x0a,
	0x0d, 0x59, 0x75, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x34,
	0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x75, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73,
	0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x75, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73,
	0x74, 0x2e, 0x53, 0x72, 0x63, 0x52, 0x03, 0x73, 0x72, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xfc,
	0x01, 0x0a, 0x14, 0x59, 0x75, 0x6c, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x75, 0x6e, 0x70,
	0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a,
	0x03, 0x73, 0x72, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75, 0x6e, 0x70,
	0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x53, 0x72, 0x63, 0x52, 0x03,
	0x73, 0x72, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x03, 0x6c, 0x65, 0x74, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x78, 0x64, 0x73, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e,
	0x76, 0x33, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x78, 0x64, 0x73, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x64, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x52, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0xe0, 0x01,
	0x0a, 0x16, 0x59, 0x75, 0x6c, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x43, 0x61, 0x73, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x75, 0x6e,
	0x70, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24,
	0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75, 0x6e,
	0x70, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x53, 0x72, 0x63, 0x52,
	0x03, 0x73, 0x72, 0x63, 0x12, 0x2c, 0x0a, 0x04, 0x63, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x78, 0x64, 0x73, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x33,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x63, 0x61,
	0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x78, 0x64, 0x73, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x22, 0xbd, 0x01, 0x0a, 0x12, 0x59, 0x75, 0x6c, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x75, 0x6e, 0x70,
	0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a,
	0x03, 0x73, 0x72, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75, 0x6e, 0x70,
	0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x53, 0x72, 0x63, 0x52, 0x03,
	0x73, 0x72, 0x63, 0x12, 0x3b, 0x0a, 0x05, 0x63, 0x61, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x75, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x61,
	0x73, 0x74, 0x2e, 0x59, 0x75, 0x6c, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x43, 0x61, 0x73, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x63, 0x61, 0x73, 0x65, 0x73,
	0x22, 0xe1, 0x01, 0x0a, 0x13, 0x59, 0x75, 0x6c, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x75, 0x6e,
	0x70, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x75,
	0x6e, 0x70, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x24, 0x0a, 0x03, 0x73,
	0x72, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75, 0x6e, 0x70, 0x61, 0x63,
	0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x53, 0x72, 0x63, 0x52, 0x03, 0x73, 0x72,
	0x63, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x65, 0x78, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x65, 0x78, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x7f, 0x0a, 0x11, 0x59, 0x75, 0x6c, 0x4c, 0x65, 0x61, 0x76, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x09, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x75,
	0x6e, 0x70, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x24, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75,
	0x6e, 0x70, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x53, 0x72, 0x63,
	0x52, 0x03, 0x73, 0x72, 0x63, 0x22, 0x7f, 0x0a, 0x11, 0x59, 0x75, 0x6c, 0x42, 0x72, 0x65, 0x61,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x09, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x75, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x24, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x75, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x53, 0x72,
	0x63, 0x52, 0x03, 0x73, 0x72, 0x63, 0x22, 0x82, 0x01, 0x0a, 0x14, 0x59, 0x75, 0x6c, 0x43, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x34, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x17, 0x2e, 0x75, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x61,
	0x73, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6e, 0x6f, 0x64,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x61,
	0x73, 0x74, 0x2e, 0x53, 0x72, 0x63, 0x52, 0x03, 0x73, 0x72, 0x63, 0x22, 0xe2, 0x01, 0x0a, 0x0e,
	0x59, 0x75, 0x6c, 0x49, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x34,
	0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x75, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73,
	0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x75, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73,
	0x74, 0x2e, 0x53, 0x72, 0x63, 0x52, 0x03, 0x73, 0x72, 0x63, 0x12, 0x36, 0x0a, 0x09, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x78, 0x64, 0x73, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x78, 0x64, 0x73, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x22, 0xb0, 0x02, 0x0a, 0x15, 0x59, 0x75, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x09, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x75, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x24, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x75, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x53, 0x72,
	0x63, 0x52, 0x03, 0x73, 0x72, 0x63, 0x12, 0x36, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x78, 0x64, 0x73, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x64, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2c,
	0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x78,
	0x64, 0x73, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x64,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x45, 0x0a, 0x11,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x78, 0x64, 0x73, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x52, 0x10, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x22, 0xfd, 0x01, 0x0a, 0x18, 0x59, 0x75, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x34, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x75, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e,
	0x61, 0x73, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6e, 0x6f,
	0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e,
	0x61, 0x73, 0x74, 0x2e, 0x53, 0x72, 0x63, 0x52, 0x03, 0x73, 0x72, 0x63, 0x12, 0x3d, 0x0a, 0x0d,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x78, 0x64, 0x73, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76,
	0x33, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0c, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x61,
	0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x78, 0x64, 0x73, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x22, 0xf5, 0x01, 0x0a, 0x16, 0x59, 0x75, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x34,
	0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x75, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73,
	0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x75, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73,
	0x74, 0x2e, 0x53, 0x72, 0x63, 0x52, 0x03, 0x73, 0x72, 0x63, 0x12, 0x3f, 0x0a, 0x0e, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x78, 0x64, 0x73, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x33,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0d, 0x76, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x78, 0x64, 0x73,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x64, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xbe, 0x01, 0x0a, 0x16,
	0x59, 0x75, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x75, 0x6e, 0x70, 0x61,
	0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x03,
	0x73, 0x72, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75, 0x6e, 0x70, 0x61,
	0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x53, 0x72, 0x63, 0x52, 0x03, 0x73,
	0x72, 0x63, 0x12, 0x38, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x78, 0x64, 0x73, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x33, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xbd, 0x02, 0x0a,
	0x0f, 0x59, 0x75, 0x6c, 0x46, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x34, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x75, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e,
	0x61, 0x73, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6e, 0x6f,
	0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x75, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x2e, 0x76, 0x31, 0x2e,
	0x61, 0x73, 0x74, 0x2e, 0x53, 0x72, 0x63, 0x52, 0x03, 0x73, 0x72, 0x63, 0x12, 0x2a, 0x0a, 0x03,
	0x70, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x78, 0x64, 0x73, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x64, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x52, 0x03, 0x70, 0x72, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x70, 0x6f, 0x73, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x78, 0x64, 0x73, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x76, 0x33, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x64, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x52, 0x04, 0x70, 0x6f, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x78, 0x64, 0x73, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x64, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c,
	0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x78,
	0x64, 0x73, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x76, 0x33, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x64,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x42, 0x30, 0x5a, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x75, 0x6e, 0x70, 0x61, 0x63,
	0x6b, 0x64, 0x65, 0x76, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x64, 0x69, 0x73, 0x74,
	0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x73, 0x74, 0x3b, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x62, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ast_yul_proto_rawDescOnce sync.Once
	file_ast_yul_proto_rawDescData = file_ast_yul_proto_rawDesc
)

func file_ast_yul_proto_rawDescGZIP() []byte {
	file_ast_yul_proto_rawDescOnce.Do(func() {
		file_ast_yul_proto_rawDescData = protoimpl.X.CompressGZIP(file_ast_yul_proto_rawDescData)
	})
	return file_ast_yul_proto_rawDescData
}

var file_ast_yul_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_ast_yul_proto_goTypes = []interface{}{
	(*AssemblyStatement)(nil),        // 0: unpack.v1.ast.AssemblyStatement
	(*YulBlockStatement)(nil),        // 1: unpack.v1.ast.YulBlockStatement
	(*YulStatement)(nil),             // 2: unpack.v1.ast.YulStatement
	(*YulIdentifier)(nil),            // 3: unpack.v1.ast.YulIdentifier
	(*YulVariableStatement)(nil),     // 4: unpack.v1.ast.YulVariableStatement
	(*YulSwitchCaseStatement)(nil),   // 5: unpack.v1.ast.YulSwitchCaseStatement
	(*YulSwitchStatement)(nil),       // 6: unpack.v1.ast.YulSwitchStatement
	(*YulLiteralStatement)(nil),      // 7: unpack.v1.ast.YulLiteralStatement
	(*YulLeaveStatement)(nil),        // 8: unpack.v1.ast.YulLeaveStatement
	(*YulBreakStatement)(nil),        // 9: unpack.v1.ast.YulBreakStatement
	(*YulContinueStatement)(nil),     // 10: unpack.v1.ast.YulContinueStatement
	(*YulIfStatement)(nil),           // 11: unpack.v1.ast.YulIfStatement
	(*YulFunctionDefinition)(nil),    // 12: unpack.v1.ast.YulFunctionDefinition
	(*YulFunctionCallStatement)(nil), // 13: unpack.v1.ast.YulFunctionCallStatement
	(*YulAssignmentStatement)(nil),   // 14: unpack.v1.ast.YulAssignmentStatement
	(*YulExpressionStatement)(nil),   // 15: unpack.v1.ast.YulExpressionStatement
	(*YulForStatement)(nil),          // 16: unpack.v1.ast.YulForStatement
	(NodeType)(0),                    // 17: unpack.v1.ast.NodeType
	(*Src)(nil),                      // 18: unpack.v1.ast.Src
	(*Body)(nil),                     // 19: unpack.v1.ast.Body
	(*v3.TypedStruct)(nil),           // 20: xds.type.v3.TypedStruct
}
var file_ast_yul_proto_depIdxs = []int32{
	17, // 0: unpack.v1.ast.AssemblyStatement.node_type:type_name -> unpack.v1.ast.NodeType
	18, // 1: unpack.v1.ast.AssemblyStatement.src:type_name -> unpack.v1.ast.Src
	19, // 2: unpack.v1.ast.AssemblyStatement.body:type_name -> unpack.v1.ast.Body
	17, // 3: unpack.v1.ast.YulBlockStatement.node_type:type_name -> unpack.v1.ast.NodeType
	18, // 4: unpack.v1.ast.YulBlockStatement.src:type_name -> unpack.v1.ast.Src
	20, // 5: unpack.v1.ast.YulBlockStatement.statements:type_name -> xds.type.v3.TypedStruct
	17, // 6: unpack.v1.ast.YulStatement.node_type:type_name -> unpack.v1.ast.NodeType
	18, // 7: unpack.v1.ast.YulStatement.src:type_name -> unpack.v1.ast.Src
	20, // 8: unpack.v1.ast.YulStatement.statements:type_name -> xds.type.v3.TypedStruct
	17, // 9: unpack.v1.ast.YulIdentifier.node_type:type_name -> unpack.v1.ast.NodeType
	18, // 10: unpack.v1.ast.YulIdentifier.src:type_name -> unpack.v1.ast.Src
	17, // 11: unpack.v1.ast.YulVariableStatement.node_type:type_name -> unpack.v1.ast.NodeType
	18, // 12: unpack.v1.ast.YulVariableStatement.src:type_name -> unpack.v1.ast.Src
	20, // 13: unpack.v1.ast.YulVariableStatement.value:type_name -> xds.type.v3.TypedStruct
	20, // 14: unpack.v1.ast.YulVariableStatement.variables:type_name -> xds.type.v3.TypedStruct
	17, // 15: unpack.v1.ast.YulSwitchCaseStatement.node_type:type_name -> unpack.v1.ast.NodeType
	18, // 16: unpack.v1.ast.YulSwitchCaseStatement.src:type_name -> unpack.v1.ast.Src
	20, // 17: unpack.v1.ast.YulSwitchCaseStatement.case:type_name -> xds.type.v3.TypedStruct
	20, // 18: unpack.v1.ast.YulSwitchCaseStatement.body:type_name -> xds.type.v3.TypedStruct
	17, // 19: unpack.v1.ast.YulSwitchStatement.node_type:type_name -> unpack.v1.ast.NodeType
	18, // 20: unpack.v1.ast.YulSwitchStatement.src:type_name -> unpack.v1.ast.Src
	5,  // 21: unpack.v1.ast.YulSwitchStatement.cases:type_name -> unpack.v1.ast.YulSwitchCaseStatement
	17, // 22: unpack.v1.ast.YulLiteralStatement.node_type:type_name -> unpack.v1.ast.NodeType
	17, // 23: unpack.v1.ast.YulLiteralStatement.kind:type_name -> unpack.v1.ast.NodeType
	18, // 24: unpack.v1.ast.YulLiteralStatement.src:type_name -> unpack.v1.ast.Src
	17, // 25: unpack.v1.ast.YulLeaveStatement.node_type:type_name -> unpack.v1.ast.NodeType
	18, // 26: unpack.v1.ast.YulLeaveStatement.src:type_name -> unpack.v1.ast.Src
	17, // 27: unpack.v1.ast.YulBreakStatement.node_type:type_name -> unpack.v1.ast.NodeType
	18, // 28: unpack.v1.ast.YulBreakStatement.src:type_name -> unpack.v1.ast.Src
	17, // 29: unpack.v1.ast.YulContinueStatement.node_type:type_name -> unpack.v1.ast.NodeType
	18, // 30: unpack.v1.ast.YulContinueStatement.src:type_name -> unpack.v1.ast.Src
	17, // 31: unpack.v1.ast.YulIfStatement.node_type:type_name -> unpack.v1.ast.NodeType
	18, // 32: unpack.v1.ast.YulIfStatement.src:type_name -> unpack.v1.ast.Src
	20, // 33: unpack.v1.ast.YulIfStatement.condition:type_name -> xds.type.v3.TypedStruct
	20, // 34: unpack.v1.ast.YulIfStatement.body:type_name -> xds.type.v3.TypedStruct
	17, // 35: unpack.v1.ast.YulFunctionDefinition.node_type:type_name -> unpack.v1.ast.NodeType
	18, // 36: unpack.v1.ast.YulFunctionDefinition.src:type_name -> unpack.v1.ast.Src
	20, // 37: unpack.v1.ast.YulFunctionDefinition.arguments:type_name -> xds.type.v3.TypedStruct
	20, // 38: unpack.v1.ast.YulFunctionDefinition.body:type_name -> xds.type.v3.TypedStruct
	20, // 39: unpack.v1.ast.YulFunctionDefinition.return_parameters:type_name -> xds.type.v3.TypedStruct
	17, // 40: unpack.v1.ast.YulFunctionCallStatement.node_type:type_name -> unpack.v1.ast.NodeType
	18, // 41: unpack.v1.ast.YulFunctionCallStatement.src:type_name -> unpack.v1.ast.Src
	20, // 42: unpack.v1.ast.YulFunctionCallStatement.function_name:type_name -> xds.type.v3.TypedStruct
	20, // 43: unpack.v1.ast.YulFunctionCallStatement.arguments:type_name -> xds.type.v3.TypedStruct
	17, // 44: unpack.v1.ast.YulAssignmentStatement.node_type:type_name -> unpack.v1.ast.NodeType
	18, // 45: unpack.v1.ast.YulAssignmentStatement.src:type_name -> unpack.v1.ast.Src
	20, // 46: unpack.v1.ast.YulAssignmentStatement.variable_names:type_name -> xds.type.v3.TypedStruct
	20, // 47: unpack.v1.ast.YulAssignmentStatement.value:type_name -> xds.type.v3.TypedStruct
	17, // 48: unpack.v1.ast.YulExpressionStatement.node_type:type_name -> unpack.v1.ast.NodeType
	18, // 49: unpack.v1.ast.YulExpressionStatement.src:type_name -> unpack.v1.ast.Src
	20, // 50: unpack.v1.ast.YulExpressionStatement.expression:type_name -> xds.type.v3.TypedStruct
	17, // 51: unpack.v1.ast.YulForStatement.node_type:type_name -> unpack.v1.ast.NodeType
	18, // 52: unpack.v1.ast.YulForStatement.src:type_name -> unpack.v1.ast.Src
	20, // 53: unpack.v1.ast.YulForStatement.pre:type_name -> xds.type.v3.TypedStruct
	20, // 54: unpack.v1.ast.YulForStatement.post:type_name -> xds.type.v3.TypedStruct
	20, // 55: unpack.v1.ast.YulForStatement.condition:type_name -> xds.type.v3.TypedStruct
	20, // 56: unpack.v1.ast.YulForStatement.body:type_name -> xds.type.v3.TypedStruct
	57, // [57:57] is the sub-list for method output_type
	57, // [57:57] is the sub-list for method input_type
	57, // [57:57] is the sub-list for extension type_name
	57, // [57:57] is the sub-list for extension extendee
	0,  // [0:57] is the sub-list for field type_name
}

func init() { file_ast_yul_proto_init() }
func file_ast_yul_proto_init() {
	if File_ast_yul_proto != nil {
		return
	}
	file_ast_types_proto_init()
	file_ast_src_proto_init()
	file_ast_body_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ast_yul_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssemblyStatement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ast_yul_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YulBlockStatement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ast_yul_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YulStatement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ast_yul_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YulIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ast_yul_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YulVariableStatement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ast_yul_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YulSwitchCaseStatement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ast_yul_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YulSwitchStatement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ast_yul_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YulLiteralStatement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ast_yul_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YulLeaveStatement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ast_yul_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YulBreakStatement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ast_yul_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YulContinueStatement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ast_yul_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YulIfStatement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ast_yul_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YulFunctionDefinition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ast_yul_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YulFunctionCallStatement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ast_yul_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YulAssignmentStatement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ast_yul_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YulExpressionStatement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ast_yul_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*YulForStatement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ast_yul_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ast_yul_proto_goTypes,
		DependencyIndexes: file_ast_yul_proto_depIdxs,
		MessageInfos:      file_ast_yul_proto_msgTypes,
	}.Build()
	File_ast_yul_proto = out.File
	file_ast_yul_proto_rawDesc = nil
	file_ast_yul_proto_goTypes = nil
	file_ast_yul_proto_depIdxs = nil
}
