// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v4.23.4
// source: ast/statement.proto

package ast_pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Statement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                       int64            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	NodeType                 NodeType         `protobuf:"varint,2,opt,name=node_type,json=nodeType,proto3,enum=txpull.v1.ast.NodeType" json:"node_type,omitempty"`
	Src                      *Src             `protobuf:"bytes,3,opt,name=src,proto3" json:"src,omitempty"`
	Expression               *Expression      `protobuf:"bytes,4,opt,name=expression,proto3" json:"expression,omitempty"`
	FunctionReturnParameters int64            `protobuf:"varint,5,opt,name=function_return_parameters,json=functionReturnParameters,proto3" json:"function_return_parameters,omitempty"`
	Declarations             []*Declaration   `protobuf:"bytes,6,rep,name=declarations,proto3" json:"declarations,omitempty"`
	Assignments              []int64          `protobuf:"varint,7,rep,packed,name=assignments,proto3" json:"assignments,omitempty"`
	InitialValue             *Expression      `protobuf:"bytes,8,opt,name=initial_value,json=initialValue,proto3" json:"initial_value,omitempty"`
	Kind                     NodeType         `protobuf:"varint,9,opt,name=kind,proto3,enum=txpull.v1.ast.NodeType" json:"kind,omitempty"`
	IsConstant               bool             `protobuf:"varint,10,opt,name=is_constant,json=isConstant,proto3" json:"is_constant,omitempty"`
	IsLValue                 bool             `protobuf:"varint,11,opt,name=is_l_value,json=isLValue,proto3" json:"is_l_value,omitempty"`
	IsPure                   bool             `protobuf:"varint,12,opt,name=is_pure,json=isPure,proto3" json:"is_pure,omitempty"`
	LValueRequested          bool             `protobuf:"varint,13,opt,name=l_value_requested,json=lValueRequested,proto3" json:"l_value_requested,omitempty"`
	Names                    []string         `protobuf:"bytes,14,rep,name=names,proto3" json:"names,omitempty"`
	TryCall                  bool             `protobuf:"varint,15,opt,name=try_call,json=tryCall,proto3" json:"try_call,omitempty"`
	TypeDescription          *TypeDescription `protobuf:"bytes,16,opt,name=type_description,json=typeDescription,proto3" json:"type_description,omitempty"`
	Arguments                []*Expression    `protobuf:"bytes,17,rep,name=arguments,proto3" json:"arguments,omitempty"`
	Condition                *Expression      `protobuf:"bytes,18,opt,name=condition,proto3" json:"condition,omitempty"`
	TrueBody                 *Statement       `protobuf:"bytes,19,opt,name=true_body,json=trueBody,proto3" json:"true_body,omitempty"`
	Statements               []*Statement     `protobuf:"bytes,20,rep,name=statements,proto3" json:"statements,omitempty"`
}

func (x *Statement) Reset() {
	*x = Statement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ast_statement_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Statement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Statement) ProtoMessage() {}

func (x *Statement) ProtoReflect() protoreflect.Message {
	mi := &file_ast_statement_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Statement.ProtoReflect.Descriptor instead.
func (*Statement) Descriptor() ([]byte, []int) {
	return file_ast_statement_proto_rawDescGZIP(), []int{0}
}

func (x *Statement) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Statement) GetNodeType() NodeType {
	if x != nil {
		return x.NodeType
	}
	return NodeType_NT_DEFAULT
}

func (x *Statement) GetSrc() *Src {
	if x != nil {
		return x.Src
	}
	return nil
}

func (x *Statement) GetExpression() *Expression {
	if x != nil {
		return x.Expression
	}
	return nil
}

func (x *Statement) GetFunctionReturnParameters() int64 {
	if x != nil {
		return x.FunctionReturnParameters
	}
	return 0
}

func (x *Statement) GetDeclarations() []*Declaration {
	if x != nil {
		return x.Declarations
	}
	return nil
}

func (x *Statement) GetAssignments() []int64 {
	if x != nil {
		return x.Assignments
	}
	return nil
}

func (x *Statement) GetInitialValue() *Expression {
	if x != nil {
		return x.InitialValue
	}
	return nil
}

func (x *Statement) GetKind() NodeType {
	if x != nil {
		return x.Kind
	}
	return NodeType_NT_DEFAULT
}

func (x *Statement) GetIsConstant() bool {
	if x != nil {
		return x.IsConstant
	}
	return false
}

func (x *Statement) GetIsLValue() bool {
	if x != nil {
		return x.IsLValue
	}
	return false
}

func (x *Statement) GetIsPure() bool {
	if x != nil {
		return x.IsPure
	}
	return false
}

func (x *Statement) GetLValueRequested() bool {
	if x != nil {
		return x.LValueRequested
	}
	return false
}

func (x *Statement) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *Statement) GetTryCall() bool {
	if x != nil {
		return x.TryCall
	}
	return false
}

func (x *Statement) GetTypeDescription() *TypeDescription {
	if x != nil {
		return x.TypeDescription
	}
	return nil
}

func (x *Statement) GetArguments() []*Expression {
	if x != nil {
		return x.Arguments
	}
	return nil
}

func (x *Statement) GetCondition() *Expression {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *Statement) GetTrueBody() *Statement {
	if x != nil {
		return x.TrueBody
	}
	return nil
}

func (x *Statement) GetStatements() []*Statement {
	if x != nil {
		return x.Statements
	}
	return nil
}

type Expression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                       int64              `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                     string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	NodeType                 NodeType           `protobuf:"varint,3,opt,name=node_type,json=nodeType,proto3,enum=txpull.v1.ast.NodeType" json:"node_type,omitempty"`
	Src                      *Src               `protobuf:"bytes,4,opt,name=src,proto3" json:"src,omitempty"`
	OverloadedDeclarations   []int64            `protobuf:"varint,5,rep,packed,name=overloaded_declarations,json=overloadedDeclarations,proto3" json:"overloaded_declarations,omitempty"`
	ReferencedDeclaration    int64              `protobuf:"varint,6,opt,name=referenced_declaration,json=referencedDeclaration,proto3" json:"referenced_declaration,omitempty"`
	TypeDescription          *TypeDescription   `protobuf:"bytes,7,opt,name=type_description,json=typeDescription,proto3" json:"type_description,omitempty"`
	Expression               *Expression        `protobuf:"bytes,8,opt,name=expression,proto3" json:"expression,omitempty"`
	CommonType               *TypeDescription   `protobuf:"bytes,9,opt,name=common_type,json=commonType,proto3" json:"common_type,omitempty"`
	ArgumentTypes            []*TypeDescription `protobuf:"bytes,10,rep,name=argument_types,json=argumentTypes,proto3" json:"argument_types,omitempty"`
	Operator                 Operator           `protobuf:"varint,11,opt,name=operator,proto3,enum=txpull.v1.ast.Operator" json:"operator,omitempty"`
	LeftExpression           *Expression        `protobuf:"bytes,12,opt,name=left_expression,json=leftExpression,proto3" json:"left_expression,omitempty"`
	RightExpression          *Expression        `protobuf:"bytes,13,opt,name=right_expression,json=rightExpression,proto3" json:"right_expression,omitempty"`
	Kind                     NodeType           `protobuf:"varint,14,opt,name=kind,proto3,enum=txpull.v1.ast.NodeType" json:"kind,omitempty"`
	Value                    string             `protobuf:"bytes,15,opt,name=value,proto3" json:"value,omitempty"`
	HexValue                 string             `protobuf:"bytes,16,opt,name=hex_value,json=hexValue,proto3" json:"hex_value,omitempty"`
	IsConstant               bool               `protobuf:"varint,17,opt,name=is_constant,json=isConstant,proto3" json:"is_constant,omitempty"`
	IsLValue                 bool               `protobuf:"varint,18,opt,name=is_l_value,json=isLValue,proto3" json:"is_l_value,omitempty"`
	IsPure                   bool               `protobuf:"varint,19,opt,name=is_pure,json=isPure,proto3" json:"is_pure,omitempty"`
	LValueRequested          bool               `protobuf:"varint,20,opt,name=l_value_requested,json=lValueRequested,proto3" json:"l_value_requested,omitempty"`
	Arguments                []*Expression      `protobuf:"bytes,21,rep,name=arguments,proto3" json:"arguments,omitempty"`
	MemberName               string             `protobuf:"bytes,22,opt,name=member_name,json=memberName,proto3" json:"member_name,omitempty"`
	Components               []*Expression      `protobuf:"bytes,23,rep,name=components,proto3" json:"components,omitempty"`
	FunctionReturnParameters int64              `protobuf:"varint,24,opt,name=function_return_parameters,json=functionReturnParameters,proto3" json:"function_return_parameters,omitempty"`
	BaseExpression           *Expression        `protobuf:"bytes,25,opt,name=base_expression,json=baseExpression,proto3" json:"base_expression,omitempty"`
	IndexExpression          *Expression        `protobuf:"bytes,26,opt,name=index_expression,json=indexExpression,proto3" json:"index_expression,omitempty"`
}

func (x *Expression) Reset() {
	*x = Expression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ast_statement_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression) ProtoMessage() {}

func (x *Expression) ProtoReflect() protoreflect.Message {
	mi := &file_ast_statement_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression.ProtoReflect.Descriptor instead.
func (*Expression) Descriptor() ([]byte, []int) {
	return file_ast_statement_proto_rawDescGZIP(), []int{1}
}

func (x *Expression) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Expression) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Expression) GetNodeType() NodeType {
	if x != nil {
		return x.NodeType
	}
	return NodeType_NT_DEFAULT
}

func (x *Expression) GetSrc() *Src {
	if x != nil {
		return x.Src
	}
	return nil
}

func (x *Expression) GetOverloadedDeclarations() []int64 {
	if x != nil {
		return x.OverloadedDeclarations
	}
	return nil
}

func (x *Expression) GetReferencedDeclaration() int64 {
	if x != nil {
		return x.ReferencedDeclaration
	}
	return 0
}

func (x *Expression) GetTypeDescription() *TypeDescription {
	if x != nil {
		return x.TypeDescription
	}
	return nil
}

func (x *Expression) GetExpression() *Expression {
	if x != nil {
		return x.Expression
	}
	return nil
}

func (x *Expression) GetCommonType() *TypeDescription {
	if x != nil {
		return x.CommonType
	}
	return nil
}

func (x *Expression) GetArgumentTypes() []*TypeDescription {
	if x != nil {
		return x.ArgumentTypes
	}
	return nil
}

func (x *Expression) GetOperator() Operator {
	if x != nil {
		return x.Operator
	}
	return Operator_O_DEFAULT
}

func (x *Expression) GetLeftExpression() *Expression {
	if x != nil {
		return x.LeftExpression
	}
	return nil
}

func (x *Expression) GetRightExpression() *Expression {
	if x != nil {
		return x.RightExpression
	}
	return nil
}

func (x *Expression) GetKind() NodeType {
	if x != nil {
		return x.Kind
	}
	return NodeType_NT_DEFAULT
}

func (x *Expression) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Expression) GetHexValue() string {
	if x != nil {
		return x.HexValue
	}
	return ""
}

func (x *Expression) GetIsConstant() bool {
	if x != nil {
		return x.IsConstant
	}
	return false
}

func (x *Expression) GetIsLValue() bool {
	if x != nil {
		return x.IsLValue
	}
	return false
}

func (x *Expression) GetIsPure() bool {
	if x != nil {
		return x.IsPure
	}
	return false
}

func (x *Expression) GetLValueRequested() bool {
	if x != nil {
		return x.LValueRequested
	}
	return false
}

func (x *Expression) GetArguments() []*Expression {
	if x != nil {
		return x.Arguments
	}
	return nil
}

func (x *Expression) GetMemberName() string {
	if x != nil {
		return x.MemberName
	}
	return ""
}

func (x *Expression) GetComponents() []*Expression {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *Expression) GetFunctionReturnParameters() int64 {
	if x != nil {
		return x.FunctionReturnParameters
	}
	return 0
}

func (x *Expression) GetBaseExpression() *Expression {
	if x != nil {
		return x.BaseExpression
	}
	return nil
}

func (x *Expression) GetIndexExpression() *Expression {
	if x != nil {
		return x.IndexExpression
	}
	return nil
}

var File_ast_statement_proto protoreflect.FileDescriptor

var file_ast_statement_proto_rawDesc = []byte{
	0x0a, 0x13, 0x61, 0x73, 0x74, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x74, 0x78, 0x70, 0x75, 0x6c, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x61, 0x73, 0x74, 0x1a, 0x0f, 0x61, 0x73, 0x74, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x61, 0x73, 0x74, 0x2f, 0x73, 0x72, 0x63, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x61, 0x73, 0x74, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x61, 0x73, 0x74, 0x2f, 0x64,
	0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xa2, 0x07, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x34,
	0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x74, 0x78, 0x70, 0x75, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73,
	0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x74, 0x78, 0x70, 0x75, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73,
	0x74, 0x2e, 0x53, 0x72, 0x63, 0x52, 0x03, 0x73, 0x72, 0x63, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x74, 0x78, 0x70, 0x75, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x1a, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x3e, 0x0a, 0x0c, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x78, 0x70, 0x75,
	0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74,
	0x78, 0x70, 0x75, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x74, 0x78, 0x70, 0x75, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x61, 0x73, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x72, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x50, 0x75, 0x72, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x72, 0x79, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x74, 0x72, 0x79, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x49, 0x0a, 0x10, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x78, 0x70, 0x75, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73,
	0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x78, 0x70, 0x75, 0x6c, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x74, 0x78, 0x70, 0x75, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x09, 0x74, 0x72, 0x75, 0x65, 0x5f, 0x62, 0x6f, 0x64,
	0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x78, 0x70, 0x75, 0x6c, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x08, 0x74, 0x72, 0x75, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x38, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x74, 0x78, 0x70, 0x75, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x8a, 0x0a, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x74, 0x78,
	0x70, 0x75, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24,
	0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x78,
	0x70, 0x75, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x53, 0x72, 0x63, 0x52,
	0x03, 0x73, 0x72, 0x63, 0x12, 0x37, 0x0a, 0x17, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64,
	0x65, 0x64, 0x5f, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x03, 0x52, 0x16, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x65,
	0x64, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x35, 0x0a,
	0x16, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x63, 0x6c,
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x10, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x74, 0x78, 0x70, 0x75, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f,
	0x74, 0x79, 0x70, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x39, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x78, 0x70, 0x75, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x61, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0b, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x74, 0x78, 0x70, 0x75, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x0e, 0x61,
	0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x78, 0x70, 0x75, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x61, 0x73, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x33, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x74, 0x78, 0x70, 0x75, 0x6c, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x61, 0x73, 0x74, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x42, 0x0a, 0x0f, 0x6c, 0x65, 0x66, 0x74, 0x5f,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x74, 0x78, 0x70, 0x75, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74,
	0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x6c, 0x65, 0x66,
	0x74, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x10, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x78, 0x70, 0x75, 0x6c, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x0f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x2b, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x74, 0x78, 0x70, 0x75, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x65, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x65, 0x78, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x4c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x70, 0x75, 0x72, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x69, 0x73, 0x50, 0x75, 0x72, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x78, 0x70, 0x75, 0x6c,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x39, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x17, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x78, 0x70, 0x75, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x61, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x42, 0x0a, 0x0f, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x74, 0x78, 0x70, 0x75, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x61, 0x73,
	0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x62, 0x61,
	0x73, 0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x10,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x78, 0x70, 0x75, 0x6c, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x61, 0x73, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x0f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x74, 0x78, 0x70, 0x75, 0x6c, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x64,
	0x69, 0x73, 0x74, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x73, 0x74, 0x3b, 0x61, 0x73, 0x74, 0x5f, 0x70,
	0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ast_statement_proto_rawDescOnce sync.Once
	file_ast_statement_proto_rawDescData = file_ast_statement_proto_rawDesc
)

func file_ast_statement_proto_rawDescGZIP() []byte {
	file_ast_statement_proto_rawDescOnce.Do(func() {
		file_ast_statement_proto_rawDescData = protoimpl.X.CompressGZIP(file_ast_statement_proto_rawDescData)
	})
	return file_ast_statement_proto_rawDescData
}

var file_ast_statement_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_ast_statement_proto_goTypes = []interface{}{
	(*Statement)(nil),       // 0: txpull.v1.ast.Statement
	(*Expression)(nil),      // 1: txpull.v1.ast.Expression
	(NodeType)(0),           // 2: txpull.v1.ast.NodeType
	(*Src)(nil),             // 3: txpull.v1.ast.Src
	(*Declaration)(nil),     // 4: txpull.v1.ast.Declaration
	(*TypeDescription)(nil), // 5: txpull.v1.ast.TypeDescription
	(Operator)(0),           // 6: txpull.v1.ast.Operator
}
var file_ast_statement_proto_depIdxs = []int32{
	2,  // 0: txpull.v1.ast.Statement.node_type:type_name -> txpull.v1.ast.NodeType
	3,  // 1: txpull.v1.ast.Statement.src:type_name -> txpull.v1.ast.Src
	1,  // 2: txpull.v1.ast.Statement.expression:type_name -> txpull.v1.ast.Expression
	4,  // 3: txpull.v1.ast.Statement.declarations:type_name -> txpull.v1.ast.Declaration
	1,  // 4: txpull.v1.ast.Statement.initial_value:type_name -> txpull.v1.ast.Expression
	2,  // 5: txpull.v1.ast.Statement.kind:type_name -> txpull.v1.ast.NodeType
	5,  // 6: txpull.v1.ast.Statement.type_description:type_name -> txpull.v1.ast.TypeDescription
	1,  // 7: txpull.v1.ast.Statement.arguments:type_name -> txpull.v1.ast.Expression
	1,  // 8: txpull.v1.ast.Statement.condition:type_name -> txpull.v1.ast.Expression
	0,  // 9: txpull.v1.ast.Statement.true_body:type_name -> txpull.v1.ast.Statement
	0,  // 10: txpull.v1.ast.Statement.statements:type_name -> txpull.v1.ast.Statement
	2,  // 11: txpull.v1.ast.Expression.node_type:type_name -> txpull.v1.ast.NodeType
	3,  // 12: txpull.v1.ast.Expression.src:type_name -> txpull.v1.ast.Src
	5,  // 13: txpull.v1.ast.Expression.type_description:type_name -> txpull.v1.ast.TypeDescription
	1,  // 14: txpull.v1.ast.Expression.expression:type_name -> txpull.v1.ast.Expression
	5,  // 15: txpull.v1.ast.Expression.common_type:type_name -> txpull.v1.ast.TypeDescription
	5,  // 16: txpull.v1.ast.Expression.argument_types:type_name -> txpull.v1.ast.TypeDescription
	6,  // 17: txpull.v1.ast.Expression.operator:type_name -> txpull.v1.ast.Operator
	1,  // 18: txpull.v1.ast.Expression.left_expression:type_name -> txpull.v1.ast.Expression
	1,  // 19: txpull.v1.ast.Expression.right_expression:type_name -> txpull.v1.ast.Expression
	2,  // 20: txpull.v1.ast.Expression.kind:type_name -> txpull.v1.ast.NodeType
	1,  // 21: txpull.v1.ast.Expression.arguments:type_name -> txpull.v1.ast.Expression
	1,  // 22: txpull.v1.ast.Expression.components:type_name -> txpull.v1.ast.Expression
	1,  // 23: txpull.v1.ast.Expression.base_expression:type_name -> txpull.v1.ast.Expression
	1,  // 24: txpull.v1.ast.Expression.index_expression:type_name -> txpull.v1.ast.Expression
	25, // [25:25] is the sub-list for method output_type
	25, // [25:25] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_ast_statement_proto_init() }
func file_ast_statement_proto_init() {
	if File_ast_statement_proto != nil {
		return
	}
	file_ast_types_proto_init()
	file_ast_src_proto_init()
	file_ast_type_name_proto_init()
	file_ast_declaration_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ast_statement_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Statement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ast_statement_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ast_statement_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ast_statement_proto_goTypes,
		DependencyIndexes: file_ast_statement_proto_depIdxs,
		MessageInfos:      file_ast_statement_proto_msgTypes,
	}.Build()
	File_ast_statement_proto = out.File
	file_ast_statement_proto_rawDesc = nil
	file_ast_statement_proto_goTypes = nil
	file_ast_statement_proto_depIdxs = nil
}
